
WeatherClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007598  08007598  00017598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b4  080079b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079bc  080079bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080079c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001dc  08007ba0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007ba0  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e59a  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  0002e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f2e  00000000  00000000  00031bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df2f  00000000  00000000  00053b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6d1e  00000000  00000000  00061a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  001287c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800757c 	.word	0x0800757c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800757c 	.word	0x0800757c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__aeabi_uldivmod>:
 8001064:	b953      	cbnz	r3, 800107c <__aeabi_uldivmod+0x18>
 8001066:	b94a      	cbnz	r2, 800107c <__aeabi_uldivmod+0x18>
 8001068:	2900      	cmp	r1, #0
 800106a:	bf08      	it	eq
 800106c:	2800      	cmpeq	r0, #0
 800106e:	bf1c      	itt	ne
 8001070:	f04f 31ff 	movne.w	r1, #4294967295
 8001074:	f04f 30ff 	movne.w	r0, #4294967295
 8001078:	f000 b96c 	b.w	8001354 <__aeabi_idiv0>
 800107c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001084:	f000 f806 	bl	8001094 <__udivmoddi4>
 8001088:	f8dd e004 	ldr.w	lr, [sp, #4]
 800108c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001090:	b004      	add	sp, #16
 8001092:	4770      	bx	lr

08001094 <__udivmoddi4>:
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	9e08      	ldr	r6, [sp, #32]
 800109a:	460d      	mov	r5, r1
 800109c:	4604      	mov	r4, r0
 800109e:	468e      	mov	lr, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 8082 	bne.w	80011aa <__udivmoddi4+0x116>
 80010a6:	428a      	cmp	r2, r1
 80010a8:	4617      	mov	r7, r2
 80010aa:	d946      	bls.n	800113a <__udivmoddi4+0xa6>
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	b14a      	cbz	r2, 80010c6 <__udivmoddi4+0x32>
 80010b2:	f1c2 0120 	rsb	r1, r2, #32
 80010b6:	fa05 f302 	lsl.w	r3, r5, r2
 80010ba:	fa20 f101 	lsr.w	r1, r0, r1
 80010be:	4097      	lsls	r7, r2
 80010c0:	ea41 0e03 	orr.w	lr, r1, r3
 80010c4:	4094      	lsls	r4, r2
 80010c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010ca:	0c23      	lsrs	r3, r4, #16
 80010cc:	fbbe fcf8 	udiv	ip, lr, r8
 80010d0:	b2b9      	uxth	r1, r7
 80010d2:	fb08 ee1c 	mls	lr, r8, ip, lr
 80010d6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80010da:	fb0c f001 	mul.w	r0, ip, r1
 80010de:	4298      	cmp	r0, r3
 80010e0:	d90a      	bls.n	80010f8 <__udivmoddi4+0x64>
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	f10c 35ff 	add.w	r5, ip, #4294967295
 80010e8:	f080 8116 	bcs.w	8001318 <__udivmoddi4+0x284>
 80010ec:	4298      	cmp	r0, r3
 80010ee:	f240 8113 	bls.w	8001318 <__udivmoddi4+0x284>
 80010f2:	f1ac 0c02 	sub.w	ip, ip, #2
 80010f6:	443b      	add	r3, r7
 80010f8:	1a1b      	subs	r3, r3, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8001100:	fb08 3310 	mls	r3, r8, r0, r3
 8001104:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001108:	fb00 f101 	mul.w	r1, r0, r1
 800110c:	42a1      	cmp	r1, r4
 800110e:	d909      	bls.n	8001124 <__udivmoddi4+0x90>
 8001110:	193c      	adds	r4, r7, r4
 8001112:	f100 33ff 	add.w	r3, r0, #4294967295
 8001116:	f080 8101 	bcs.w	800131c <__udivmoddi4+0x288>
 800111a:	42a1      	cmp	r1, r4
 800111c:	f240 80fe 	bls.w	800131c <__udivmoddi4+0x288>
 8001120:	3802      	subs	r0, #2
 8001122:	443c      	add	r4, r7
 8001124:	1a64      	subs	r4, r4, r1
 8001126:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800112a:	2100      	movs	r1, #0
 800112c:	b11e      	cbz	r6, 8001136 <__udivmoddi4+0xa2>
 800112e:	40d4      	lsrs	r4, r2
 8001130:	2300      	movs	r3, #0
 8001132:	e9c6 4300 	strd	r4, r3, [r6]
 8001136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113a:	b902      	cbnz	r2, 800113e <__udivmoddi4+0xaa>
 800113c:	deff      	udf	#255	; 0xff
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	2a00      	cmp	r2, #0
 8001144:	d14f      	bne.n	80011e6 <__udivmoddi4+0x152>
 8001146:	1bcb      	subs	r3, r1, r7
 8001148:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800114c:	fa1f f887 	uxth.w	r8, r7
 8001150:	2101      	movs	r1, #1
 8001152:	fbb3 fcfe 	udiv	ip, r3, lr
 8001156:	0c25      	lsrs	r5, r4, #16
 8001158:	fb0e 331c 	mls	r3, lr, ip, r3
 800115c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001160:	fb08 f30c 	mul.w	r3, r8, ip
 8001164:	42ab      	cmp	r3, r5
 8001166:	d907      	bls.n	8001178 <__udivmoddi4+0xe4>
 8001168:	197d      	adds	r5, r7, r5
 800116a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800116e:	d202      	bcs.n	8001176 <__udivmoddi4+0xe2>
 8001170:	42ab      	cmp	r3, r5
 8001172:	f200 80e7 	bhi.w	8001344 <__udivmoddi4+0x2b0>
 8001176:	4684      	mov	ip, r0
 8001178:	1aed      	subs	r5, r5, r3
 800117a:	b2a3      	uxth	r3, r4
 800117c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001180:	fb0e 5510 	mls	r5, lr, r0, r5
 8001184:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8001188:	fb08 f800 	mul.w	r8, r8, r0
 800118c:	45a0      	cmp	r8, r4
 800118e:	d907      	bls.n	80011a0 <__udivmoddi4+0x10c>
 8001190:	193c      	adds	r4, r7, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	d202      	bcs.n	800119e <__udivmoddi4+0x10a>
 8001198:	45a0      	cmp	r8, r4
 800119a:	f200 80d7 	bhi.w	800134c <__udivmoddi4+0x2b8>
 800119e:	4618      	mov	r0, r3
 80011a0:	eba4 0408 	sub.w	r4, r4, r8
 80011a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011a8:	e7c0      	b.n	800112c <__udivmoddi4+0x98>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x12c>
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	f000 80af 	beq.w	8001312 <__udivmoddi4+0x27e>
 80011b4:	2100      	movs	r1, #0
 80011b6:	e9c6 0500 	strd	r0, r5, [r6]
 80011ba:	4608      	mov	r0, r1
 80011bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c0:	fab3 f183 	clz	r1, r3
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d14b      	bne.n	8001260 <__udivmoddi4+0x1cc>
 80011c8:	42ab      	cmp	r3, r5
 80011ca:	d302      	bcc.n	80011d2 <__udivmoddi4+0x13e>
 80011cc:	4282      	cmp	r2, r0
 80011ce:	f200 80b7 	bhi.w	8001340 <__udivmoddi4+0x2ac>
 80011d2:	1a84      	subs	r4, r0, r2
 80011d4:	eb65 0303 	sbc.w	r3, r5, r3
 80011d8:	2001      	movs	r0, #1
 80011da:	469e      	mov	lr, r3
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d0aa      	beq.n	8001136 <__udivmoddi4+0xa2>
 80011e0:	e9c6 4e00 	strd	r4, lr, [r6]
 80011e4:	e7a7      	b.n	8001136 <__udivmoddi4+0xa2>
 80011e6:	f1c2 0c20 	rsb	ip, r2, #32
 80011ea:	fa01 f302 	lsl.w	r3, r1, r2
 80011ee:	4097      	lsls	r7, r2
 80011f0:	fa20 f00c 	lsr.w	r0, r0, ip
 80011f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f8:	fa21 fc0c 	lsr.w	ip, r1, ip
 80011fc:	4318      	orrs	r0, r3
 80011fe:	fbbc f1fe 	udiv	r1, ip, lr
 8001202:	0c05      	lsrs	r5, r0, #16
 8001204:	fb0e cc11 	mls	ip, lr, r1, ip
 8001208:	fa1f f887 	uxth.w	r8, r7
 800120c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001210:	fb01 f308 	mul.w	r3, r1, r8
 8001214:	42ab      	cmp	r3, r5
 8001216:	fa04 f402 	lsl.w	r4, r4, r2
 800121a:	d909      	bls.n	8001230 <__udivmoddi4+0x19c>
 800121c:	197d      	adds	r5, r7, r5
 800121e:	f101 3cff 	add.w	ip, r1, #4294967295
 8001222:	f080 808b 	bcs.w	800133c <__udivmoddi4+0x2a8>
 8001226:	42ab      	cmp	r3, r5
 8001228:	f240 8088 	bls.w	800133c <__udivmoddi4+0x2a8>
 800122c:	3902      	subs	r1, #2
 800122e:	443d      	add	r5, r7
 8001230:	1aeb      	subs	r3, r5, r3
 8001232:	b285      	uxth	r5, r0
 8001234:	fbb3 f0fe 	udiv	r0, r3, lr
 8001238:	fb0e 3310 	mls	r3, lr, r0, r3
 800123c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001240:	fb00 f308 	mul.w	r3, r0, r8
 8001244:	42ab      	cmp	r3, r5
 8001246:	d907      	bls.n	8001258 <__udivmoddi4+0x1c4>
 8001248:	197d      	adds	r5, r7, r5
 800124a:	f100 3cff 	add.w	ip, r0, #4294967295
 800124e:	d271      	bcs.n	8001334 <__udivmoddi4+0x2a0>
 8001250:	42ab      	cmp	r3, r5
 8001252:	d96f      	bls.n	8001334 <__udivmoddi4+0x2a0>
 8001254:	3802      	subs	r0, #2
 8001256:	443d      	add	r5, r7
 8001258:	1aeb      	subs	r3, r5, r3
 800125a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800125e:	e778      	b.n	8001152 <__udivmoddi4+0xbe>
 8001260:	f1c1 0c20 	rsb	ip, r1, #32
 8001264:	408b      	lsls	r3, r1
 8001266:	fa22 f70c 	lsr.w	r7, r2, ip
 800126a:	431f      	orrs	r7, r3
 800126c:	fa20 f40c 	lsr.w	r4, r0, ip
 8001270:	fa05 f301 	lsl.w	r3, r5, r1
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fa25 f50c 	lsr.w	r5, r5, ip
 800127c:	431c      	orrs	r4, r3
 800127e:	0c23      	lsrs	r3, r4, #16
 8001280:	fbb5 f9fe 	udiv	r9, r5, lr
 8001284:	fa1f f887 	uxth.w	r8, r7
 8001288:	fb0e 5519 	mls	r5, lr, r9, r5
 800128c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8001290:	fb09 fa08 	mul.w	sl, r9, r8
 8001294:	45aa      	cmp	sl, r5
 8001296:	fa02 f201 	lsl.w	r2, r2, r1
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x21e>
 80012a0:	197d      	adds	r5, r7, r5
 80012a2:	f109 30ff 	add.w	r0, r9, #4294967295
 80012a6:	d247      	bcs.n	8001338 <__udivmoddi4+0x2a4>
 80012a8:	45aa      	cmp	sl, r5
 80012aa:	d945      	bls.n	8001338 <__udivmoddi4+0x2a4>
 80012ac:	f1a9 0902 	sub.w	r9, r9, #2
 80012b0:	443d      	add	r5, r7
 80012b2:	eba5 050a 	sub.w	r5, r5, sl
 80012b6:	b2a4      	uxth	r4, r4
 80012b8:	fbb5 f0fe 	udiv	r0, r5, lr
 80012bc:	fb0e 5510 	mls	r5, lr, r0, r5
 80012c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012c4:	fb00 f808 	mul.w	r8, r0, r8
 80012c8:	45a0      	cmp	r8, r4
 80012ca:	d907      	bls.n	80012dc <__udivmoddi4+0x248>
 80012cc:	193c      	adds	r4, r7, r4
 80012ce:	f100 35ff 	add.w	r5, r0, #4294967295
 80012d2:	d22d      	bcs.n	8001330 <__udivmoddi4+0x29c>
 80012d4:	45a0      	cmp	r8, r4
 80012d6:	d92b      	bls.n	8001330 <__udivmoddi4+0x29c>
 80012d8:	3802      	subs	r0, #2
 80012da:	443c      	add	r4, r7
 80012dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012e0:	eba4 0408 	sub.w	r4, r4, r8
 80012e4:	fba0 8902 	umull	r8, r9, r0, r2
 80012e8:	454c      	cmp	r4, r9
 80012ea:	46c6      	mov	lr, r8
 80012ec:	464d      	mov	r5, r9
 80012ee:	d319      	bcc.n	8001324 <__udivmoddi4+0x290>
 80012f0:	d016      	beq.n	8001320 <__udivmoddi4+0x28c>
 80012f2:	b15e      	cbz	r6, 800130c <__udivmoddi4+0x278>
 80012f4:	ebb3 020e 	subs.w	r2, r3, lr
 80012f8:	eb64 0405 	sbc.w	r4, r4, r5
 80012fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001300:	40ca      	lsrs	r2, r1
 8001302:	ea4c 0202 	orr.w	r2, ip, r2
 8001306:	40cc      	lsrs	r4, r1
 8001308:	e9c6 2400 	strd	r2, r4, [r6]
 800130c:	2100      	movs	r1, #0
 800130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001312:	4631      	mov	r1, r6
 8001314:	4630      	mov	r0, r6
 8001316:	e70e      	b.n	8001136 <__udivmoddi4+0xa2>
 8001318:	46ac      	mov	ip, r5
 800131a:	e6ed      	b.n	80010f8 <__udivmoddi4+0x64>
 800131c:	4618      	mov	r0, r3
 800131e:	e701      	b.n	8001124 <__udivmoddi4+0x90>
 8001320:	4543      	cmp	r3, r8
 8001322:	d2e6      	bcs.n	80012f2 <__udivmoddi4+0x25e>
 8001324:	ebb8 0e02 	subs.w	lr, r8, r2
 8001328:	eb69 0507 	sbc.w	r5, r9, r7
 800132c:	3801      	subs	r0, #1
 800132e:	e7e0      	b.n	80012f2 <__udivmoddi4+0x25e>
 8001330:	4628      	mov	r0, r5
 8001332:	e7d3      	b.n	80012dc <__udivmoddi4+0x248>
 8001334:	4660      	mov	r0, ip
 8001336:	e78f      	b.n	8001258 <__udivmoddi4+0x1c4>
 8001338:	4681      	mov	r9, r0
 800133a:	e7ba      	b.n	80012b2 <__udivmoddi4+0x21e>
 800133c:	4661      	mov	r1, ip
 800133e:	e777      	b.n	8001230 <__udivmoddi4+0x19c>
 8001340:	4608      	mov	r0, r1
 8001342:	e74b      	b.n	80011dc <__udivmoddi4+0x148>
 8001344:	f1ac 0c02 	sub.w	ip, ip, #2
 8001348:	443d      	add	r5, r7
 800134a:	e715      	b.n	8001178 <__udivmoddi4+0xe4>
 800134c:	3802      	subs	r0, #2
 800134e:	443c      	add	r4, r7
 8001350:	e726      	b.n	80011a0 <__udivmoddi4+0x10c>
 8001352:	bf00      	nop

08001354 <__aeabi_idiv0>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <BME280_GetID>:
 * @brief  Function reads BME280 chip ID
 * @retval BME280 chip ID
 *
 * */
static uint8_t BME280_GetID(BME280 *device)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af04      	add	r7, sp, #16
 800135e:	6078      	str	r0, [r7, #4]
   uint8_t id;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_ID_ADDRESS, 1, &id, 1, 20);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	2314      	movs	r3, #20
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	22d0      	movs	r2, #208	; 0xd0
 8001376:	21ec      	movs	r1, #236	; 0xec
 8001378:	f001 fd6c 	bl	8002e54 <HAL_I2C_Mem_Read>

   return id;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <BME280_SetTemperatureOversamp>:
/*
 * @brief  Function sets temperature oversampling
 *
 * */
static void BME280_SetTemperatureOversamp(BME280 *device, uint8_t value)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b088      	sub	sp, #32
 800138a:	af04      	add	r7, sp, #16
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	2314      	movs	r3, #20
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 030f 	add.w	r3, r7, #15
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	22f4      	movs	r2, #244	; 0xf4
 80013a8:	21ec      	movs	r1, #236	; 0xec
 80013aa:	f001 fd53 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0x1F;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
   ctrl |= value << 5;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	2314      	movs	r3, #20
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f107 030f 	add.w	r3, r7, #15
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	22f4      	movs	r2, #244	; 0xf4
 80013e0:	21ec      	movs	r1, #236	; 0xec
 80013e2:	f001 fc3d 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <BME280_SetPressureOversamp>:
/*
 * @brief  Function sets pressure oversampling
 *
 * */
static void BME280_SetPressureOversamp(BME280 *device, uint8_t value)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b088      	sub	sp, #32
 80013f2:	af04      	add	r7, sp, #16
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	2314      	movs	r3, #20
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	22f4      	movs	r2, #244	; 0xf4
 8001410:	21ec      	movs	r1, #236	; 0xec
 8001412:	f001 fd1f 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0xE3;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	f023 031c 	bic.w	r3, r3, #28
 800141c:	b2db      	uxtb	r3, r3
 800141e:	73fb      	strb	r3, [r7, #15]
   ctrl |= value << 2;
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	b25a      	sxtb	r2, r3
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	2314      	movs	r3, #20
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	f107 030f 	add.w	r3, r7, #15
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	22f4      	movs	r2, #244	; 0xf4
 8001448:	21ec      	movs	r1, #236	; 0xec
 800144a:	f001 fc09 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <BME280_SetHumidityOversamp>:
/*
 * @brief  Function sets humidity oversampling
 *
 * */
static void BME280_SetHumidityOversamp(BME280 *device, uint8_t value)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b088      	sub	sp, #32
 800145a:	af04      	add	r7, sp, #16
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_HUM, 1, &ctrl, 1, 20);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2314      	movs	r3, #20
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2301      	movs	r3, #1
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f107 030f 	add.w	r3, r7, #15
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	22f2      	movs	r2, #242	; 0xf2
 8001478:	21ec      	movs	r1, #236	; 0xec
 800147a:	f001 fceb 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
   ctrl |= value;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	4313      	orrs	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_HUM, 1, &ctrl, 1, 20);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2314      	movs	r3, #20
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 030f 	add.w	r3, r7, #15
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	22f2      	movs	r2, #242	; 0xf2
 80014a2:	21ec      	movs	r1, #236	; 0xec
 80014a4:	f001 fbdc 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <BME280_SetWorkingMode>:
/*
 * @brief  Function sets working mode
 *
 * */
static void BME280_SetWorkingMode(BME280 *device, uint8_t value)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af04      	add	r7, sp, #16
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	2314      	movs	r3, #20
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	f107 030f 	add.w	r3, r7, #15
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	22f4      	movs	r2, #244	; 0xf4
 80014d2:	21ec      	movs	r1, #236	; 0xec
 80014d4:	f001 fcbe 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0xFC;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	73fb      	strb	r3, [r7, #15]
   ctrl |= value;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CTRL_MEAS, 1, &ctrl, 1, 20);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	2314      	movs	r3, #20
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	2301      	movs	r3, #1
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	f107 030f 	add.w	r3, r7, #15
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	22f4      	movs	r2, #244	; 0xf4
 8001502:	21ec      	movs	r1, #236	; 0xec
 8001504:	f001 fbac 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <BME280_SetFilterCoeff>:
/*
 * @brief  Function sets filter coefficients
 *
 * */
static void BME280_SetFilterCoeff(BME280 *device, uint8_t value)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af04      	add	r7, sp, #16
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CONFIG, 1, &ctrl, 1, 20);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	2314      	movs	r3, #20
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f107 030f 	add.w	r3, r7, #15
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	22f5      	movs	r2, #245	; 0xf5
 8001532:	21ec      	movs	r1, #236	; 0xec
 8001534:	f001 fc8e 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0xE3;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f023 031c 	bic.w	r3, r3, #28
 800153e:	b2db      	uxtb	r3, r3
 8001540:	73fb      	strb	r3, [r7, #15]
   ctrl |= value << 2;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	b25a      	sxtb	r2, r3
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b25b      	sxtb	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CONFIG, 1, &ctrl, 1, 20);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	2314      	movs	r3, #20
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	2301      	movs	r3, #1
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	f107 030f 	add.w	r3, r7, #15
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	22f5      	movs	r2, #245	; 0xf5
 800156a:	21ec      	movs	r1, #236	; 0xec
 800156c:	f001 fb78 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <BME280_SetStdbyTime>:
/*
 * @brief  Function sets stdby time
 *
 * */
static void BME280_SetStdbyTime(BME280 *device, uint8_t value)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
   uint8_t ctrl;
   HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CONFIG, 1, &ctrl, 1, 20);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2314      	movs	r3, #20
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	22f5      	movs	r2, #245	; 0xf5
 800159a:	21ec      	movs	r1, #236	; 0xec
 800159c:	f001 fc5a 	bl	8002e54 <HAL_I2C_Mem_Read>
   ctrl &= 0x1F;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]
   ctrl |= value << 5;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	015b      	lsls	r3, r3, #5
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
   HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR << 1, BME280_CONFIG, 1, &ctrl, 1, 20);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	2314      	movs	r3, #20
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f107 030f 	add.w	r3, r7, #15
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	22f5      	movs	r2, #245	; 0xf5
 80015d2:	21ec      	movs	r1, #236	; 0xec
 80015d4:	f001 fb44 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <BME280_SoftReset>:
/*
 * @brief  Device Software reset
 *
 * */
void BME280_SoftReset(BME280 *device)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af04      	add	r7, sp, #16
 80015e6:	6078      	str	r0, [r7, #4]
	uint8_t reset_val = 0xB6;
 80015e8:	23b6      	movs	r3, #182	; 0xb6
 80015ea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(device->i2cHandle, BME280_ADDR  << 1, BME280_RESET,1, &reset_val, 1, 20);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	2314      	movs	r3, #20
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f107 030f 	add.w	r3, r7, #15
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e0      	movs	r2, #224	; 0xe0
 8001602:	21ec      	movs	r1, #236	; 0xec
 8001604:	f001 fb2c 	bl	8002c60 <HAL_I2C_Mem_Write>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <BME280_GetCalibData>:
 * @brief  Read calibration data from BME280 and format it
 * @param  Pointer to an instance of BME280 structure
 *
 * */
static void BME280_GetCalibData(BME280 *device)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	; 0x40
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]

	uint8_t temp_buffer[6] = {0}, press_buffer[18] = {0}, hum_buffer[9] = {0};
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
 800161c:	2300      	movs	r3, #0
 800161e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	819a      	strh	r2, [r3, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	711a      	strb	r2, [r3, #4]

	/* Read & Format Temperature Calibration Data */

	HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CALIB00, 1, temp_buffer, 6, 20);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	2314      	movs	r3, #20
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	2306      	movs	r3, #6
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	2288      	movs	r2, #136	; 0x88
 8001656:	21ec      	movs	r1, #236	; 0xec
 8001658:	f001 fbfc 	bl	8002e54 <HAL_I2C_Mem_Read>
	Calib_Data.dig_T1 = ((uint16_t)temp_buffer[1] << 8) + temp_buffer[0];
 800165c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001660:	b29b      	uxth	r3, r3
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b29a      	uxth	r2, r3
 8001666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800166a:	b29b      	uxth	r3, r3
 800166c:	4413      	add	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <BME280_GetCalibData+0x220>)
 8001672:	801a      	strh	r2, [r3, #0]
	Calib_Data.dig_T2 = ((int16_t)temp_buffer[3] << 8) + temp_buffer[2];
 8001674:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001678:	b29b      	uxth	r3, r3
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b29a      	uxth	r2, r3
 800167e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	b21a      	sxth	r2, r3
 800168a:	4b69      	ldr	r3, [pc, #420]	; (8001830 <BME280_GetCalibData+0x220>)
 800168c:	805a      	strh	r2, [r3, #2]
	Calib_Data.dig_T3 = ((int16_t)temp_buffer[5]<< 8) + temp_buffer[4];
 800168e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001692:	b29b      	uxth	r3, r3
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b29a      	uxth	r2, r3
 8001698:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800169c:	b29b      	uxth	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b62      	ldr	r3, [pc, #392]	; (8001830 <BME280_GetCalibData+0x220>)
 80016a6:	809a      	strh	r2, [r3, #4]

	/* Read & Format Pressure Calibration Data */

	HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CALIB06, 1, press_buffer, 18, 20);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	2314      	movs	r3, #20
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2312      	movs	r3, #18
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	228e      	movs	r2, #142	; 0x8e
 80016be:	21ec      	movs	r1, #236	; 0xec
 80016c0:	f001 fbc8 	bl	8002e54 <HAL_I2C_Mem_Read>
	Calib_Data.dig_P1 = ((uint16_t)press_buffer[1] << 8) + press_buffer[0];
 80016c4:	7d7b      	ldrb	r3, [r7, #21]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	7d3b      	ldrb	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <BME280_GetCalibData+0x220>)
 80016d6:	80da      	strh	r2, [r3, #6]
	Calib_Data.dig_P2 = ((int16_t)press_buffer[3] << 8) + press_buffer[2];
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b29a      	uxth	r2, r3
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <BME280_GetCalibData+0x220>)
 80016ec:	811a      	strh	r2, [r3, #8]
	Calib_Data.dig_P3 = ((int16_t)press_buffer[5] << 8) + press_buffer[4];
 80016ee:	7e7b      	ldrb	r3, [r7, #25]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <BME280_GetCalibData+0x220>)
 8001702:	815a      	strh	r2, [r3, #10]
	Calib_Data.dig_P4 = ((int16_t)press_buffer[7] << 8) + press_buffer[6];
 8001704:	7efb      	ldrb	r3, [r7, #27]
 8001706:	b29b      	uxth	r3, r3
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b29a      	uxth	r2, r3
 800170c:	7ebb      	ldrb	r3, [r7, #26]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <BME280_GetCalibData+0x220>)
 8001718:	819a      	strh	r2, [r3, #12]
	Calib_Data.dig_P5 = ((int16_t)press_buffer[9] << 8) + press_buffer[8];
 800171a:	7f7b      	ldrb	r3, [r7, #29]
 800171c:	b29b      	uxth	r3, r3
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b29a      	uxth	r2, r3
 8001722:	7f3b      	ldrb	r3, [r7, #28]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b40      	ldr	r3, [pc, #256]	; (8001830 <BME280_GetCalibData+0x220>)
 800172e:	81da      	strh	r2, [r3, #14]
	Calib_Data.dig_P6 = ((int16_t)press_buffer[11] << 8) + press_buffer[10];
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	b29b      	uxth	r3, r3
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	7fbb      	ldrb	r3, [r7, #30]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <BME280_GetCalibData+0x220>)
 8001744:	821a      	strh	r2, [r3, #16]
	Calib_Data.dig_P7 = ((int16_t)press_buffer[13] << 8) + press_buffer[12];
 8001746:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <BME280_GetCalibData+0x220>)
 800175e:	825a      	strh	r2, [r3, #18]
	Calib_Data.dig_P8 = ((int16_t)press_buffer[15] << 8) + press_buffer[14];
 8001760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001764:	b29b      	uxth	r3, r3
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <BME280_GetCalibData+0x220>)
 8001778:	829a      	strh	r2, [r3, #20]
	Calib_Data.dig_P9 = ((int16_t)press_buffer[17] << 8) + press_buffer[16];
 800177a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800177e:	b29b      	uxth	r3, r3
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b29a      	uxth	r2, r3
 8001784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	b21a      	sxth	r2, r3
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <BME280_GetCalibData+0x220>)
 8001792:	82da      	strh	r2, [r3, #22]

	/* Read & Format Humidity Calibration Data */

	HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CALIB25, 1, hum_buffer, 1, 20);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	2314      	movs	r3, #20
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	22a1      	movs	r2, #161	; 0xa1
 80017aa:	21ec      	movs	r1, #236	; 0xec
 80017ac:	f001 fb52 	bl	8002e54 <HAL_I2C_Mem_Read>
	Calib_Data.dig_H1 = (uint8_t)hum_buffer[0];
 80017b0:	7a3a      	ldrb	r2, [r7, #8]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <BME280_GetCalibData+0x220>)
 80017b4:	761a      	strb	r2, [r3, #24]

	HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_CALIB26, 1, &hum_buffer[1], 7, 20);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	2314      	movs	r3, #20
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2307      	movs	r3, #7
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	3301      	adds	r3, #1
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22e1      	movs	r2, #225	; 0xe1
 80017ce:	21ec      	movs	r1, #236	; 0xec
 80017d0:	f001 fb40 	bl	8002e54 <HAL_I2C_Mem_Read>
	Calib_Data.dig_H2 = ((int16_t)hum_buffer[2] << 8) + hum_buffer[1];
 80017d4:	7abb      	ldrb	r3, [r7, #10]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <BME280_GetCalibData+0x220>)
 80017e8:	835a      	strh	r2, [r3, #26]
	Calib_Data.dig_H3 = (uint8_t)hum_buffer[3];
 80017ea:	7afa      	ldrb	r2, [r7, #11]
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <BME280_GetCalibData+0x220>)
 80017ee:	771a      	strb	r2, [r3, #28]
	Calib_Data.dig_H4 = ((int16_t)hum_buffer[4] << 4) | (hum_buffer[5] & 0x0F);
 80017f0:	7b3b      	ldrb	r3, [r7, #12]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	7b7b      	ldrb	r3, [r7, #13]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21a      	sxth	r2, r3
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <BME280_GetCalibData+0x220>)
 8001806:	83da      	strh	r2, [r3, #30]
	Calib_Data.dig_H5 = ((int16_t)hum_buffer[6] << 4) | (hum_buffer[5] >> 4);
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <BME280_GetCalibData+0x220>)
 800181c:	841a      	strh	r2, [r3, #32]
	Calib_Data.dig_H6 = (int8_t)hum_buffer[7];
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	b25a      	sxtb	r2, r3
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <BME280_GetCalibData+0x220>)
 8001824:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000204 	.word	0x20000204

08001834 <BME280_Init>:
/*
 * @brief  Initialization function
 *
 * */
void BME280_Init(BME280 *device, I2C_HandleTypeDef *i2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	// Fill the structure fields with initial values
	device->i2cHandle = i2c;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
	device->temp_val = 0.0f;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
	device->pressure_val = 0.0f;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
	device->humidity_val = 0.0f;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	60da      	str	r2, [r3, #12]

	BME280_SoftReset(device);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff febf 	bl	80015e0 <BME280_SoftReset>
	HAL_Delay(100);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f000 fdfe 	bl	8002464 <HAL_Delay>

	uint8_t bme280_id = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
	bme280_id = BME280_GetID(device);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fd73 	bl	8001358 <BME280_GetID>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]

	if(bme280_id == BME280_ID)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b60      	cmp	r3, #96	; 0x60
 800187a:	d11d      	bne.n	80018b8 <BME280_Init+0x84>
	{
		BME280_GetCalibData(device);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fec7 	bl	8001610 <BME280_GetCalibData>
		HAL_Delay(50);
 8001882:	2032      	movs	r0, #50	; 0x32
 8001884:	f000 fdee 	bl	8002464 <HAL_Delay>

		BME280_SetTemperatureOversamp(device, BME280_OVERSAMP_X1);
 8001888:	2101      	movs	r1, #1
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fd7b 	bl	8001386 <BME280_SetTemperatureOversamp>
		BME280_SetPressureOversamp(device, BME280_OVERSAMP_X2);
 8001890:	2102      	movs	r1, #2
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fdab 	bl	80013ee <BME280_SetPressureOversamp>
		BME280_SetHumidityOversamp(device, BME280_OVERSAMP_X1);
 8001898:	2101      	movs	r1, #1
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fddb 	bl	8001456 <BME280_SetHumidityOversamp>
		BME280_SetFilterCoeff(device, BME280_FILTER_OFF);
 80018a0:	2100      	movs	r1, #0
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fe34 	bl	8001510 <BME280_SetFilterCoeff>
		BME280_SetStdbyTime(device, BME280_STDBY_20_MS);
 80018a8:	2107      	movs	r1, #7
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fe64 	bl	8001578 <BME280_SetStdbyTime>
	    BME280_SetWorkingMode(device, BME280_NORMAL_MODE);
 80018b0:	2103      	movs	r1, #3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fdfc 	bl	80014b0 <BME280_SetWorkingMode>
	}

}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <BME280_ReadSensorData>:
 * @brief  Read raw temperature, pressure & humidity data from BME280
 * @param  Pointer to an instance of BME280 structure
 *
 * */
void BME280_ReadSensorData(BME280 *device)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	6078      	str	r0, [r7, #4]
	uint8_t output_data[10] = {0};
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	809a      	strh	r2, [r3, #4]

	HAL_I2C_Mem_Read(device->i2cHandle, BME280_ADDR << 1, BME280_PRESS_MSB, 1, output_data, 8, 20);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	2314      	movs	r3, #20
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2308      	movs	r3, #8
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	22f7      	movs	r2, #247	; 0xf7
 80018ec:	21ec      	movs	r1, #236	; 0xec
 80018ee:	f001 fab1 	bl	8002e54 <HAL_I2C_Mem_Read>

	adc_p  = (uint32_t)output_data[0] << 12;      //PRESS_MSB
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	4a1a      	ldr	r2, [pc, #104]	; (8001960 <BME280_ReadSensorData+0xa0>)
 80018f8:	6013      	str	r3, [r2, #0]
	adc_p |= (uint32_t)output_data[1] << 4;       //PRESS_LSB
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	011a      	lsls	r2, r3, #4
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <BME280_ReadSensorData+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <BME280_ReadSensorData+0xa0>)
 8001906:	6013      	str	r3, [r2, #0]
	adc_p |= (uint32_t)output_data[2] >> 4;       //PRESS_XLSB
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <BME280_ReadSensorData+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <BME280_ReadSensorData+0xa0>)
 8001918:	6013      	str	r3, [r2, #0]

    adc_t  = (uint32_t)output_data[3] << 12;      //TEMP_MSB
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	031b      	lsls	r3, r3, #12
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <BME280_ReadSensorData+0xa4>)
 8001920:	6013      	str	r3, [r2, #0]
    adc_t |= (uint32_t)output_data[4] << 4;       //TEMP_LSB
 8001922:	7c3b      	ldrb	r3, [r7, #16]
 8001924:	011a      	lsls	r2, r3, #4
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <BME280_ReadSensorData+0xa4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <BME280_ReadSensorData+0xa4>)
 800192e:	6013      	str	r3, [r2, #0]
    adc_t |= (uint32_t)output_data[5] >> 4;       //TEMP_XLSB
 8001930:	7c7b      	ldrb	r3, [r7, #17]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <BME280_ReadSensorData+0xa4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4313      	orrs	r3, r2
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <BME280_ReadSensorData+0xa4>)
 8001940:	6013      	str	r3, [r2, #0]

    adc_h  = (uint32_t)output_data[6] << 8;       //HUM_MSB
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <BME280_ReadSensorData+0xa8>)
 8001948:	6013      	str	r3, [r2, #0]
    adc_h |= (uint32_t)output_data[7];            //HUM_LSB
 800194a:	7cfb      	ldrb	r3, [r7, #19]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <BME280_ReadSensorData+0xa8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <BME280_ReadSensorData+0xa8>)
 8001956:	6013      	str	r3, [r2, #0]

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000022c 	.word	0x2000022c
 8001964:	20000228 	.word	0x20000228
 8001968:	20000230 	.word	0x20000230

0800196c <BME280_TemperatureComp>:
/*
 * @brief  Function executes Temperature Compensation Algorithm
 *
 * */
static int32_t BME280_TemperatureComp()
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0

   int32_t temp1, temp2, T;

   temp1 = ((((adc_t>>3) - ((int32_t)Calib_Data.dig_T1<<1))) * ((int32_t)Calib_Data.dig_T2)) >> 11;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <BME280_TemperatureComp+0x74>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <BME280_TemperatureComp+0x78>)
 800197a:	8812      	ldrh	r2, [r2, #0]
 800197c:	0052      	lsls	r2, r2, #1
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <BME280_TemperatureComp+0x78>)
 8001982:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	60fb      	str	r3, [r7, #12]
   temp2 = (((((adc_t>>4) - ((int32_t)Calib_Data.dig_T1)) * ((adc_t>>4) - ((int32_t)Calib_Data.dig_T1))) >> 12) * ((int32_t)Calib_Data.dig_T3)) >> 14;
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <BME280_TemperatureComp+0x74>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <BME280_TemperatureComp+0x78>)
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <BME280_TemperatureComp+0x74>)
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	0912      	lsrs	r2, r2, #4
 80019a0:	4910      	ldr	r1, [pc, #64]	; (80019e4 <BME280_TemperatureComp+0x78>)
 80019a2:	8809      	ldrh	r1, [r1, #0]
 80019a4:	1a52      	subs	r2, r2, r1
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	0b1b      	lsrs	r3, r3, #12
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <BME280_TemperatureComp+0x78>)
 80019ae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	0b9b      	lsrs	r3, r3, #14
 80019b8:	60bb      	str	r3, [r7, #8]
   t_fine = temp1 + temp2;
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <BME280_TemperatureComp+0x7c>)
 80019c2:	6013      	str	r3, [r2, #0]
   T = (t_fine * 5 + 128) >> 8;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <BME280_TemperatureComp+0x7c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3380      	adds	r3, #128	; 0x80
 80019d0:	121b      	asrs	r3, r3, #8
 80019d2:	607b      	str	r3, [r7, #4]

   return T;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000228 	.word	0x20000228
 80019e4:	20000204 	.word	0x20000204
 80019e8:	20000234 	.word	0x20000234

080019ec <BME280_PressureComp>:
/*
 * @brief  Function executes Pressure Compensation Algorithm
 *
 * */
static uint32_t BME280_PressureComp()
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
   int32_t press1, press2;
   uint32_t P;

   press1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <BME280_PressureComp+0x130>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	105b      	asrs	r3, r3, #1
 80019f8:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80019fc:	60bb      	str	r3, [r7, #8]
   press2 = (((press1>>2) * (press1>>2)) >> 11 ) * ((int32_t)Calib_Data.dig_P6);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	109b      	asrs	r3, r3, #2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	1092      	asrs	r2, r2, #2
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	12db      	asrs	r3, r3, #11
 8001a0c:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a0e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	607b      	str	r3, [r7, #4]
   press2 = press2 + ((press1 * ((int32_t)Calib_Data.dig_P5))<<1);
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	fb03 f302 	mul.w	r3, r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	607b      	str	r3, [r7, #4]
   press2 = (press2>>2) + (((int32_t)Calib_Data.dig_P4)<<16);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	109a      	asrs	r2, r3, #2
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a34:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	4413      	add	r3, r2
 8001a3c:	607b      	str	r3, [r7, #4]
   press1 = (((Calib_Data.dig_P3 * (((press1>>2) * (press1>>2)) >> 13 )) >> 3) + ((((int32_t)Calib_Data.dig_P2) * press1)>>1))>>18;
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a44:	4619      	mov	r1, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	109b      	asrs	r3, r3, #2
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	1092      	asrs	r2, r2, #2
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	135b      	asrs	r3, r3, #13
 8001a54:	fb03 f301 	mul.w	r3, r3, r1
 8001a58:	10da      	asrs	r2, r3, #3
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a60:	4619      	mov	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	fb03 f301 	mul.w	r3, r3, r1
 8001a68:	105b      	asrs	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	149b      	asrs	r3, r3, #18
 8001a6e:	60bb      	str	r3, [r7, #8]
   press1 =((((32768 + press1))*((int32_t)Calib_Data.dig_P1))>>15);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a76:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <BME280_PressureComp+0x134>)
 8001a78:	88d2      	ldrh	r2, [r2, #6]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	13db      	asrs	r3, r3, #15
 8001a80:	60bb      	str	r3, [r7, #8]
   if (press1 == 0)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <BME280_PressureComp+0xa0>
   {
      return 0; // division by zero exception
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e042      	b.n	8001b12 <BME280_PressureComp+0x126>
   }
    P = (((uint32_t)(((int32_t)1048576) - adc_p) - (press2>>12))) * 3125;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	131b      	asrs	r3, r3, #12
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <BME280_PressureComp+0x138>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <BME280_PressureComp+0x13c>)
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001aa2:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001aa6:	60fb      	str	r3, [r7, #12]
    if (P < 0x80000000)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db06      	blt.n	8001abc <BME280_PressureComp+0xd0>
    {
    	P = (P << 1) / ((uint32_t)press1);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	005a      	lsls	r2, r3, #1
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e005      	b.n	8001ac8 <BME280_PressureComp+0xdc>
    }
    else
    {
    	P = (P / (uint32_t)press1) * 2;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
    }
   press1 = (((int32_t)Calib_Data.dig_P9) * ((int32_t)(((P>>3) * (P>>3))>>13)))>>12;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <BME280_PressureComp+0x134>)
 8001aca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	08d2      	lsrs	r2, r2, #3
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	0b5b      	lsrs	r3, r3, #13
 8001ade:	fb03 f301 	mul.w	r3, r3, r1
 8001ae2:	131b      	asrs	r3, r3, #12
 8001ae4:	60bb      	str	r3, [r7, #8]
   press2 = (((int32_t)(P>>2)) * ((int32_t)Calib_Data.dig_P8))>>13;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <BME280_PressureComp+0x134>)
 8001aee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001af2:	fb03 f302 	mul.w	r3, r3, r2
 8001af6:	135b      	asrs	r3, r3, #13
 8001af8:	607b      	str	r3, [r7, #4]
   P = (uint32_t)((int32_t)P + ((press1 + press2 + Calib_Data.dig_P7) >> 4));
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <BME280_PressureComp+0x134>)
 8001b02:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001b06:	4413      	add	r3, r2
 8001b08:	111a      	asrs	r2, r3, #4
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

   return P;
 8001b10:	68fb      	ldr	r3, [r7, #12]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000234 	.word	0x20000234
 8001b20:	20000204 	.word	0x20000204
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	fffff3cb 	.word	0xfffff3cb

08001b2c <BME280_HumidityComp>:
/*
 * @brief  Function executes Humidity Compensation Algorithm
 *
 * */
static uint32_t BME280_HumidityComp()
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
   uint32_t H;
   int32_t h1;

   h1 = (t_fine - ((int32_t)76800));
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <BME280_HumidityComp+0xc0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b3a:	607b      	str	r3, [r7, #4]
   h1 = (((((adc_h << 14) - (((int32_t)Calib_Data.dig_H4) << 20) - (((int32_t)Calib_Data.dig_H5) * h1)) +
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <BME280_HumidityComp+0xc4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	039b      	lsls	r3, r3, #14
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001b44:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8001b48:	0512      	lsls	r2, r2, #20
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001b4e:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001b52:	4611      	mov	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	fb02 f201 	mul.w	r2, r2, r1
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
        ((int32_t)16384)) >> 15) * (((((((h1 * ((int32_t)Calib_Data.dig_H6)) >> 10) * (((h1 *
 8001b60:	0bdb      	lsrs	r3, r3, #15
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001b64:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b68:	4611      	mov	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	fb02 f201 	mul.w	r2, r2, r1
 8001b70:	1292      	asrs	r2, r2, #10
        ((int32_t)Calib_Data.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8001b72:	4920      	ldr	r1, [pc, #128]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001b74:	7f09      	ldrb	r1, [r1, #28]
 8001b76:	4608      	mov	r0, r1
        ((int32_t)16384)) >> 15) * (((((((h1 * ((int32_t)Calib_Data.dig_H6)) >> 10) * (((h1 *
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	fb01 f100 	mul.w	r1, r1, r0
        ((int32_t)Calib_Data.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8001b7e:	12c9      	asrs	r1, r1, #11
 8001b80:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
        ((int32_t)16384)) >> 15) * (((((((h1 * ((int32_t)Calib_Data.dig_H6)) >> 10) * (((h1 *
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
        ((int32_t)Calib_Data.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8001b88:	1292      	asrs	r2, r2, #10
 8001b8a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
        ((int32_t)Calib_Data.dig_H2) + 8192) >> 14));
 8001b8e:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001b90:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
        ((int32_t)Calib_Data.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8001b94:	fb01 f202 	mul.w	r2, r1, r2
        ((int32_t)Calib_Data.dig_H2) + 8192) >> 14));
 8001b98:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b9c:	1392      	asrs	r2, r2, #14
        ((int32_t)16384)) >> 15) * (((((((h1 * ((int32_t)Calib_Data.dig_H6)) >> 10) * (((h1 *
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
   h1 = (((((adc_h << 14) - (((int32_t)Calib_Data.dig_H4) << 20) - (((int32_t)Calib_Data.dig_H5) * h1)) +
 8001ba2:	607b      	str	r3, [r7, #4]
   h1 = (h1 - (((((h1 >> 15) * (h1 >> 15)) >> 7) * ((int32_t)Calib_Data.dig_H1)) >> 4));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	13db      	asrs	r3, r3, #15
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	13d2      	asrs	r2, r2, #15
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	11db      	asrs	r3, r3, #7
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <BME280_HumidityComp+0xc8>)
 8001bb4:	7e12      	ldrb	r2, [r2, #24]
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	111b      	asrs	r3, r3, #4
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	607b      	str	r3, [r7, #4]
   h1 = (h1 < 0 ? 0 : h1);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc8:	607b      	str	r3, [r7, #4]
   h1 = (h1 > 419430400 ? 419430400 : h1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bd0:	bfa8      	it	ge
 8001bd2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd6:	607b      	str	r3, [r7, #4]
   H = (uint32_t)(h1>>12);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	131b      	asrs	r3, r3, #12
 8001bdc:	603b      	str	r3, [r7, #0]

   return H;
 8001bde:	683b      	ldr	r3, [r7, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000234 	.word	0x20000234
 8001bf0:	20000230 	.word	0x20000230
 8001bf4:	20000204 	.word	0x20000204

08001bf8 <BME280_GetTemperature>:
/*
 * @brief  Function calculates the temperature in C
 *
 * */
void BME280_GetTemperature(BME280 *device)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
   float Temp;
   int32_t T;
   BME280_ReadSensorData(device);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe5d 	bl	80018c0 <BME280_ReadSensorData>
   T = BME280_TemperatureComp();
 8001c06:	f7ff feb1 	bl	800196c <BME280_TemperatureComp>
 8001c0a:	60f8      	str	r0, [r7, #12]
   Temp = (float)T/100;
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff f885 	bl	8000d1c <__aeabi_i2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <BME280_GetTemperature+0x38>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f988 	bl	8000f2c <__aeabi_fdiv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60bb      	str	r3, [r7, #8]
   device->temp_val = Temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	605a      	str	r2, [r3, #4]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	42c80000 	.word	0x42c80000

08001c34 <BME280_GetPressure>:
/*
 * @brief  Function calculates the Pressure in hPa
 *
 * */
void BME280_GetPressure(BME280 *device)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
   float Press;
   int32_t P;
   BME280_ReadSensorData(device);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe3f 	bl	80018c0 <BME280_ReadSensorData>
   P = BME280_PressureComp();
 8001c42:	f7ff fed3 	bl	80019ec <BME280_PressureComp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	60fb      	str	r3, [r7, #12]
   Press = (float)P/100;
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff f866 	bl	8000d1c <__aeabi_i2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4906      	ldr	r1, [pc, #24]	; (8001c6c <BME280_GetPressure+0x38>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f969 	bl	8000f2c <__aeabi_fdiv>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60bb      	str	r3, [r7, #8]
   device->pressure_val = Press;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	42c80000 	.word	0x42c80000

08001c70 <BME280_GetHumidity>:
/*
 * @brief  Function calculates the Humidity
 *
 * */
void BME280_GetHumidity(BME280 *device)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
   float Hum = 0.0f;
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
   uint32_t H;
   BME280_ReadSensorData(device);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fe1e 	bl	80018c0 <BME280_ReadSensorData>
   H = BME280_HumidityComp();
 8001c84:	f7ff ff52 	bl	8001b2c <BME280_HumidityComp>
 8001c88:	60b8      	str	r0, [r7, #8]
   Hum = (float)H/1024;
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	f7ff f842 	bl	8000d14 <__aeabi_ui2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f948 	bl	8000f2c <__aeabi_fdiv>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60fb      	str	r3, [r7, #12]
   device->humidity_val = Hum;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	60da      	str	r2, [r3, #12]
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <UART_Plot_Data>:
/**
  *  @brief  Send all the data via UART to plot. Data is formated for ploting in Serial Debug Assistant
  *
  */
void UART_Plot_Data(BME280 *device, UART_HandleTypeDef *port)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	char data_send[20] = {0};
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]

	sprintf(data_send, "T=%2.2f,", device->temp_val);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc39 	bl	8000548 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	f107 000c 	add.w	r0, r7, #12
 8001cde:	4923      	ldr	r1, [pc, #140]	; (8001d6c <UART_Plot_Data+0xbc>)
 8001ce0:	f003 fa24 	bl	800512c <siprintf>
	HAL_UART_Transmit(port, (uint8_t*)data_send, strlen(data_send), 20);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fa71 	bl	80001d0 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	f107 010c 	add.w	r1, r7, #12
 8001cf6:	2314      	movs	r3, #20
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f002 fabe 	bl	800427a <HAL_UART_Transmit>

	sprintf(data_send, "P=%4.2f,", device->pressure_val);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc20 	bl	8000548 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	f107 000c 	add.w	r0, r7, #12
 8001d10:	4917      	ldr	r1, [pc, #92]	; (8001d70 <UART_Plot_Data+0xc0>)
 8001d12:	f003 fa0b 	bl	800512c <siprintf>
	HAL_UART_Transmit(port, (uint8_t*)data_send, strlen(data_send), 20);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fa58 	bl	80001d0 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f107 010c 	add.w	r1, r7, #12
 8001d28:	2314      	movs	r3, #20
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f002 faa5 	bl	800427a <HAL_UART_Transmit>

	sprintf(data_send, "H=%2.2f\r\n,", device->humidity_val);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc07 	bl	8000548 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	f107 000c 	add.w	r0, r7, #12
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <UART_Plot_Data+0xc4>)
 8001d44:	f003 f9f2 	bl	800512c <siprintf>
	HAL_UART_Transmit(port, (uint8_t*)data_send, strlen(data_send), 20);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fa3f 	bl	80001d0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f107 010c 	add.w	r1, r7, #12
 8001d5a:	2314      	movs	r3, #20
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f002 fa8c 	bl	800427a <HAL_UART_Transmit>
}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08007598 	.word	0x08007598
 8001d70:	080075a4 	.word	0x080075a4
 8001d74:	080075b0 	.word	0x080075b0

08001d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_GPIO_Init+0x9c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <MX_GPIO_Init+0xa0>)
 8001dea:	f000 fddd 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001dee:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_GPIO_Init+0xa0>)
 8001e08:	f000 fc34 	bl	8002674 <HAL_GPIO_Init>

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40021000 	.word	0x40021000

08001e1c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <MX_I2C2_Init+0x54>)
 8001e24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <MX_I2C2_Init+0x58>)
 8001e2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_I2C2_Init+0x50>)
 8001e5a:	f000 fdbd 	bl	80029d8 <HAL_I2C_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e64:	f000 f8da 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000238 	.word	0x20000238
 8001e70:	40005800 	.word	0x40005800
 8001e74:	000186a0 	.word	0x000186a0

08001e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_I2C_MspInit+0x84>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12c      	bne.n	8001ef4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480c      	ldr	r0, [pc, #48]	; (8001f04 <HAL_I2C_MspInit+0x8c>)
 8001ed4:	f000 fbce 	bl	8002674 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_I2C_MspInit+0x88>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40005800 	.word	0x40005800
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020400 	.word	0x40020400

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0e:	f000 fa3b 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f12:	f000 f825 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f16:	f7ff ff2f 	bl	8001d78 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001f1a:	f7ff ff7f 	bl	8001e1c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001f1e:	f000 f997 	bl	8002250 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BME280 BME280_sensor;
  BME280_Init(&BME280_sensor, &hi2c2);
 8001f22:	463b      	mov	r3, r7
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <main+0x50>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc84 	bl	8001834 <BME280_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	BME280_GetTemperature(&BME280_sensor);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fe62 	bl	8001bf8 <BME280_GetTemperature>
	BME280_GetPressure(&BME280_sensor);
 8001f34:	463b      	mov	r3, r7
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fe7c 	bl	8001c34 <BME280_GetPressure>
	BME280_GetHumidity(&BME280_sensor);
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe96 	bl	8001c70 <BME280_GetHumidity>

	UART_Plot_Data(&BME280_sensor, &huart2);
 8001f44:	463b      	mov	r3, r7
 8001f46:	4905      	ldr	r1, [pc, #20]	; (8001f5c <main+0x54>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff feb1 	bl	8001cb0 <UART_Plot_Data>

	HAL_Delay(200);
 8001f4e:	20c8      	movs	r0, #200	; 0xc8
 8001f50:	f000 fa88 	bl	8002464 <HAL_Delay>
	BME280_GetTemperature(&BME280_sensor);
 8001f54:	e7ea      	b.n	8001f2c <main+0x24>
 8001f56:	bf00      	nop
 8001f58:	20000238 	.word	0x20000238
 8001f5c:	2000028c 	.word	0x2000028c

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	; 0x50
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	2230      	movs	r2, #48	; 0x30
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fc78 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <SystemClock_Config+0xb4>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <SystemClock_Config+0xb4>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <SystemClock_Config+0xb4>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <SystemClock_Config+0xb8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <SystemClock_Config+0xb8>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <SystemClock_Config+0xb8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fcbf 	bl	8003954 <HAL_RCC_OscConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fdc:	f000 f81e 	bl	800201c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ff22 	bl	8003e44 <HAL_RCC_ClockConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002006:	f000 f809 	bl	800201c <Error_Handler>
  }
}
 800200a:	bf00      	nop
 800200c:	3750      	adds	r7, #80	; 0x50
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_MspInit+0x48>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_MspInit+0x48>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_MspInit+0x48>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_MspInit+0x48>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_MspInit+0x48>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_MspInit+0x48>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	40023800 	.word	0x40023800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ba:	f000 f9b7 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
	return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_kill>:

int _kill(int pid, int sig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020da:	f002 fb99 	bl	8004810 <__errno>
 80020de:	4603      	mov	r3, r0
 80020e0:	2216      	movs	r2, #22
 80020e2:	601a      	str	r2, [r3, #0]
	return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_exit>:

void _exit (int status)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002102:	e7fe      	b.n	8002102 <_exit+0x12>

08002104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e00a      	b.n	800212c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002116:	f3af 8000 	nop.w
 800211a:	4601      	mov	r1, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf0      	blt.n	8002116 <_read+0x12>
	}

return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e009      	b.n	8002164 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf1      	blt.n	8002150 <_write+0x12>
	}
	return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
	return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219c:	605a      	str	r2, [r3, #4]
	return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <_isatty>:

int _isatty(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
	return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f002 fb02 	bl	8004810 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	200001f8 	.word	0x200001f8
 8002240:	200002e8 	.word	0x200002e8

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <MX_USART2_UART_Init+0x50>)
 8002258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_USART2_UART_Init+0x4c>)
 800225c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_USART2_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_USART2_UART_Init+0x4c>)
 8002288:	f001 ffaa 	bl	80041e0 <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002292:	f7ff fec3 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000028c 	.word	0x2000028c
 80022a0:	40004400 	.word	0x40004400

080022a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12b      	bne.n	800231e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_UART_MspInit+0x88>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022fe:	2360      	movs	r3, #96	; 0x60
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_UART_MspInit+0x8c>)
 800231a:	f000 f9ab 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40004400 	.word	0x40004400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020c00 	.word	0x40020c00

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233a:	490e      	ldr	r1, [pc, #56]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002350:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800235e:	f7ff ff71 	bl	8002244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f002 fa5b 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff fdcf 	bl	8001f08 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800236c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002378:	080079c4 	.word	0x080079c4
  ldr r2, =_sbss
 800237c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002380:	200002e4 	.word	0x200002e4

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_Init+0x40>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_Init+0x40>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_Init+0x40>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 f92b 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 f808 	bl	80023cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fe34 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x58>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f935 	bl	800265a <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00e      	b.n	8002418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b0f      	cmp	r3, #15
 80023fe:	d80a      	bhi.n	8002416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002400:	2200      	movs	r2, #0
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f000 f90b 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <HAL_InitTick+0x5c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000000 	.word	0x20000000
 8002424:	20000008 	.word	0x20000008
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_IncTick+0x1c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_IncTick+0x20>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <HAL_IncTick+0x20>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000008 	.word	0x20000008
 800244c:	200002d0 	.word	0x200002d0

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b02      	ldr	r3, [pc, #8]	; (8002460 <HAL_GetTick+0x10>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	200002d0 	.word	0x200002d0

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff fff0 	bl	8002450 <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d005      	beq.n	800248a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Delay+0x44>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248a:	bf00      	nop
 800248c:	f7ff ffe0 	bl	8002450 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f7      	bhi.n	800248c <HAL_Delay+0x28>
  {
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000008 	.word	0x20000008

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	; (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
         );
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff90 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff49 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff5e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff90 	bl	8002564 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5f 	bl	8002510 <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffb0 	bl	80025c8 <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e16b      	b.n	8002968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 815a 	bne.w	8002962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d005      	beq.n	80026c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d130      	bne.n	8002728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0201 	and.w	r2, r3, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b03      	cmp	r3, #3
 8002732:	d017      	beq.n	8002764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b4 	beq.w	8002962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <HAL_GPIO_Init+0x308>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a5e      	ldr	r2, [pc, #376]	; (800297c <HAL_GPIO_Init+0x308>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <HAL_GPIO_Init+0x308>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a5a      	ldr	r2, [pc, #360]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a51      	ldr	r2, [pc, #324]	; (8002984 <HAL_GPIO_Init+0x310>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_GPIO_Init+0x314>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4f      	ldr	r2, [pc, #316]	; (800298c <HAL_GPIO_Init+0x318>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4e      	ldr	r2, [pc, #312]	; (8002990 <HAL_GPIO_Init+0x31c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <HAL_GPIO_Init+0x320>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x216>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4c      	ldr	r2, [pc, #304]	; (8002998 <HAL_GPIO_Init+0x324>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4b      	ldr	r2, [pc, #300]	; (800299c <HAL_GPIO_Init+0x328>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4a      	ldr	r2, [pc, #296]	; (80029a0 <HAL_GPIO_Init+0x32c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x20a>
 800287a:	2307      	movs	r3, #7
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x228>
 800287e:	2308      	movs	r3, #8
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x228>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4934      	ldr	r1, [pc, #208]	; (8002980 <HAL_GPIO_Init+0x30c>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_GPIO_Init+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_GPIO_Init+0x330>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x330>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <HAL_GPIO_Init+0x330>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_GPIO_Init+0x330>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_GPIO_Init+0x330>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae90 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40023800 	.word	0x40023800
 8002980:	40013800 	.word	0x40013800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40021400 	.word	0x40021400
 800299c:	40021800 	.word	0x40021800
 80029a0:	40021c00 	.word	0x40021c00
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e12b      	b.n	8002c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fa3a 	bl	8001e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a3c:	f001 fba8 	bl	8004190 <HAL_RCC_GetPCLK1Freq>
 8002a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a81      	ldr	r2, [pc, #516]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d807      	bhi.n	8002a5c <HAL_I2C_Init+0x84>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_I2C_Init+0x278>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e006      	b.n	8002a6a <HAL_I2C_Init+0x92>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a7d      	ldr	r2, [pc, #500]	; (8002c54 <HAL_I2C_Init+0x27c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0e7      	b.n	8002c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a78      	ldr	r2, [pc, #480]	; (8002c58 <HAL_I2C_Init+0x280>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9b      	lsrs	r3, r3, #18
 8002a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a6a      	ldr	r2, [pc, #424]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d802      	bhi.n	8002aac <HAL_I2C_Init+0xd4>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	e009      	b.n	8002ac0 <HAL_I2C_Init+0xe8>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_I2C_Init+0x284>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	3301      	adds	r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	495c      	ldr	r1, [pc, #368]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002adc:	428b      	cmp	r3, r1
 8002ade:	d819      	bhi.n	8002b14 <HAL_I2C_Init+0x13c>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e59      	subs	r1, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aee:	1c59      	adds	r1, r3, #1
 8002af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002af4:	400b      	ands	r3, r1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_I2C_Init+0x138>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e59      	subs	r1, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	e051      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b10:	2304      	movs	r3, #4
 8002b12:	e04f      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d111      	bne.n	8002b40 <HAL_I2C_Init+0x168>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e012      	b.n	8002b66 <HAL_I2C_Init+0x18e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Init+0x196>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10e      	bne.n	8002b94 <HAL_I2C_Init+0x1bc>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e58      	subs	r0, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	440b      	add	r3, r1
 8002b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	e00f      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	0099      	lsls	r1, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	6809      	ldr	r1, [r1, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6911      	ldr	r1, [r2, #16]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	000186a0 	.word	0x000186a0
 8002c50:	001e847f 	.word	0x001e847f
 8002c54:	003d08ff 	.word	0x003d08ff
 8002c58:	431bde83 	.word	0x431bde83
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c7a:	f7ff fbe9 	bl	8002450 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	f040 80d9 	bne.w	8002e40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2319      	movs	r3, #25
 8002c94:	2201      	movs	r2, #1
 8002c96:	496d      	ldr	r1, [pc, #436]	; (8002e4c <HAL_I2C_Mem_Write+0x1ec>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fc7f 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e0cc      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2C_Mem_Write+0x56>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0c5      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d007      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2221      	movs	r2, #33	; 0x21
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a4d      	ldr	r2, [pc, #308]	; (8002e50 <HAL_I2C_Mem_Write+0x1f0>)
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d1e:	88f8      	ldrh	r0, [r7, #6]
 8002d20:	893a      	ldrh	r2, [r7, #8]
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fab6 	bl	80032a0 <I2C_RequestMemoryWrite>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d052      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e081      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fd00 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d107      	bne.n	8002d66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06b      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11b      	bne.n	8002de0 <HAL_I2C_Mem_Write+0x180>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1aa      	bne.n	8002d3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fcec 	bl	80037ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e016      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	00100002 	.word	0x00100002
 8002e50:	ffff0000 	.word	0xffff0000

08002e54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e6e:	f7ff faef 	bl	8002450 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	f040 8208 	bne.w	8003292 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2319      	movs	r3, #25
 8002e88:	2201      	movs	r2, #1
 8002e8a:	497b      	ldr	r1, [pc, #492]	; (8003078 <HAL_I2C_Mem_Read+0x224>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fb85 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e1fb      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Mem_Read+0x56>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e1f4      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d007      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2222      	movs	r2, #34	; 0x22
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a5b      	ldr	r2, [pc, #364]	; (800307c <HAL_I2C_Mem_Read+0x228>)
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f12:	88f8      	ldrh	r0, [r7, #6]
 8002f14:	893a      	ldrh	r2, [r7, #8]
 8002f16:	8979      	ldrh	r1, [r7, #10]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa52 	bl	80033cc <I2C_RequestMemoryRead>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1b0      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d113      	bne.n	8002f62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e184      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d11b      	bne.n	8002fa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e164      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	e144      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ff8:	e138      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	f200 80f1 	bhi.w	80031e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b01      	cmp	r3, #1
 800300a:	d123      	bne.n	8003054 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fc1b 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e139      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003052:	e10b      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	2b02      	cmp	r3, #2
 800305a:	d14e      	bne.n	80030fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	2200      	movs	r2, #0
 8003064:	4906      	ldr	r1, [pc, #24]	; (8003080 <HAL_I2C_Mem_Read+0x22c>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa98 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e10e      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000
 8003080:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f8:	e0b8      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2200      	movs	r2, #0
 8003102:	4966      	ldr	r1, [pc, #408]	; (800329c <HAL_I2C_Mem_Read+0x448>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fa49 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0bf      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2200      	movs	r2, #0
 800315e:	494f      	ldr	r1, [pc, #316]	; (800329c <HAL_I2C_Mem_Read+0x448>)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fa1b 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e091      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e4:	e042      	b.n	800326c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fb2e 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e04c      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d118      	bne.n	800326c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f aec2 	bne.w	8002ffa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	00010004 	.word	0x00010004

080032a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	4608      	mov	r0, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	460b      	mov	r3, r1
 80032b4:	813b      	strh	r3, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f960 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d103      	bne.n	80032fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e05f      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800330c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	492d      	ldr	r1, [pc, #180]	; (80033c8 <I2C_RequestMemoryWrite+0x128>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f998 	bl	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e04c      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fa02 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b04      	cmp	r3, #4
 8003350:	d107      	bne.n	8003362 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e02b      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e021      	b.n	80033bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	b29b      	uxth	r3, r3
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f9dc 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e005      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	00010002 	.word	0x00010002

080033cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	460b      	mov	r3, r1
 80033e0:	813b      	strh	r3, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2200      	movs	r2, #0
 800340e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8c2 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d103      	bne.n	8003436 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0aa      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003448:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	4952      	ldr	r1, [pc, #328]	; (8003598 <I2C_RequestMemoryRead+0x1cc>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f8fa 	bl	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e097      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f964 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e076      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e021      	b.n	80034f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b4:	893b      	ldrh	r3, [r7, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f93e 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e050      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ee:	893b      	ldrh	r3, [r7, #8]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	6a39      	ldr	r1, [r7, #32]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f923 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e035      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f82b 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d103      	bne.n	8003564 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e013      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	6a3a      	ldr	r2, [r7, #32]
 800357c:	4906      	ldr	r1, [pc, #24]	; (8003598 <I2C_RequestMemoryRead+0x1cc>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f863 	bl	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00010002 	.word	0x00010002

0800359c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ac:	e025      	b.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d021      	beq.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe ff4b 	bl	8002450 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e023      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10d      	bne.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	e00c      	b.n	800363a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d0b6      	beq.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003658:	e051      	b.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d123      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003682:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0204 	orr.w	r2, r3, #4
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e046      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d021      	beq.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fec9 	bl	8002450 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e020      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10c      	bne.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	e00b      	b.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	43da      	mvns	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d18d      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	e02d      	b.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8ce 	bl	80038f8 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02d      	b.n	80037c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d021      	beq.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe fe6f 	bl	8002450 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d1ca      	bne.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d6:	e02d      	b.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f88d 	bl	80038f8 <I2C_IsAcknowledgeFailed>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e02d      	b.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d021      	beq.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fe2e 	bl	8002450 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d1ca      	bne.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	e042      	b.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d119      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0210 	mvn.w	r2, #16
 8003870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e029      	b.n	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fdd8 	bl	8002450 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e007      	b.n	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d1b5      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390e:	d11b      	bne.n	8003948 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003918:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e264      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4ba0      	ldr	r3, [pc, #640]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b99      	ldr	r3, [pc, #612]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e23f      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b91      	ldr	r3, [pc, #580]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a90      	ldr	r2, [pc, #576]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a8a      	ldr	r2, [pc, #552]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a87      	ldr	r2, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a83      	ldr	r2, [pc, #524]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fd20 	bl	8002450 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fd1c 	bl	8002450 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e204      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fd0c 	bl	8002450 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fd08 	bl	8002450 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f0      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c4      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4952      	ldr	r1, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fcc1 	bl	8002450 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fcbd 	bl	8002450 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a5      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4940      	ldr	r1, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fca0 	bl	8002450 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc9c 	bl	8002450 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e184      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d030      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fc80 	bl	8002450 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fc7c 	bl	8002450 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e164      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e015      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fc69 	bl	8002450 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fc65 	bl	8002450 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e14d      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a0 	beq.w	8003cee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fc2b 	bl	8002450 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e011      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470000 	.word	0x42470000
 8003c08:	42470e80 	.word	0x42470e80
 8003c0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe fc1e 	bl	8002450 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e106      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x4e4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2f0>
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a80      	ldr	r2, [pc, #512]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e01c      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x312>
 8003c4c:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a7a      	ldr	r2, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a77      	ldr	r2, [pc, #476]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e00b      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c66:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a74      	ldr	r2, [pc, #464]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	4b72      	ldr	r3, [pc, #456]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fe fbe3 	bl	8002450 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fbdf 	bl	8002450 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0c5      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ee      	beq.n	8003c8e <HAL_RCC_OscConfig+0x33a>
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fbcd 	bl	8002450 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fe fbc9 	bl	8002450 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0af      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a55      	ldr	r2, [pc, #340]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 809b 	beq.w	8003e2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d05c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d141      	bne.n	8003d90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe fb9d 	bl	8002450 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe fb99 	bl	8002450 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e081      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	019b      	lsls	r3, r3, #6
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	3b01      	subs	r3, #1
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	4937      	ldr	r1, [pc, #220]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fb72 	bl	8002450 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe fb6e 	bl	8002450 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e056      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x41c>
 8003d8e:	e04e      	b.n	8003e2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fb5b 	bl	8002450 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fb57 	bl	8002450 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e03f      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x44a>
 8003dbc:	e037      	b.n	8003e2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e032      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_RCC_OscConfig+0x4e8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d028      	beq.n	8003e2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d121      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d11a      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d111      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	42470060 	.word	0x42470060

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fe fa8c 	bl	8002450 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fa88 	bl	8002450 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f9ee 	bl	80023cc <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	080075bc 	.word	0x080075bc
 8004008:	20000000 	.word	0x20000000
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b5b0      	push	{r4, r5, r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004016:	2100      	movs	r1, #0
 8004018:	6079      	str	r1, [r7, #4]
 800401a:	2100      	movs	r1, #0
 800401c:	60f9      	str	r1, [r7, #12]
 800401e:	2100      	movs	r1, #0
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004022:	2100      	movs	r1, #0
 8004024:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004026:	4952      	ldr	r1, [pc, #328]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 8004028:	6889      	ldr	r1, [r1, #8]
 800402a:	f001 010c 	and.w	r1, r1, #12
 800402e:	2908      	cmp	r1, #8
 8004030:	d00d      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x3e>
 8004032:	2908      	cmp	r1, #8
 8004034:	f200 8094 	bhi.w	8004160 <HAL_RCC_GetSysClockFreq+0x150>
 8004038:	2900      	cmp	r1, #0
 800403a:	d002      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x32>
 800403c:	2904      	cmp	r1, #4
 800403e:	d003      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x38>
 8004040:	e08e      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCC_GetSysClockFreq+0x164>)
 8004044:	60bb      	str	r3, [r7, #8]
       break;
 8004046:	e08e      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <HAL_RCC_GetSysClockFreq+0x168>)
 800404a:	60bb      	str	r3, [r7, #8]
      break;
 800404c:	e08b      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800404e:	4948      	ldr	r1, [pc, #288]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 8004050:	6849      	ldr	r1, [r1, #4]
 8004052:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004056:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004058:	4945      	ldr	r1, [pc, #276]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 800405a:	6849      	ldr	r1, [r1, #4]
 800405c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004060:	2900      	cmp	r1, #0
 8004062:	d024      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004064:	4942      	ldr	r1, [pc, #264]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 8004066:	6849      	ldr	r1, [r1, #4]
 8004068:	0989      	lsrs	r1, r1, #6
 800406a:	4608      	mov	r0, r1
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004074:	f04f 0500 	mov.w	r5, #0
 8004078:	ea00 0204 	and.w	r2, r0, r4
 800407c:	ea01 0305 	and.w	r3, r1, r5
 8004080:	493d      	ldr	r1, [pc, #244]	; (8004178 <HAL_RCC_GetSysClockFreq+0x168>)
 8004082:	fb01 f003 	mul.w	r0, r1, r3
 8004086:	2100      	movs	r1, #0
 8004088:	fb01 f102 	mul.w	r1, r1, r2
 800408c:	1844      	adds	r4, r0, r1
 800408e:	493a      	ldr	r1, [pc, #232]	; (8004178 <HAL_RCC_GetSysClockFreq+0x168>)
 8004090:	fba2 0101 	umull	r0, r1, r2, r1
 8004094:	1863      	adds	r3, r4, r1
 8004096:	4619      	mov	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	f7fc ffe0 	bl	8001064 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4613      	mov	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e04a      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	461a      	mov	r2, r3
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	ea02 0400 	and.w	r4, r2, r0
 80040c6:	ea03 0501 	and.w	r5, r3, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	014b      	lsls	r3, r1, #5
 80040d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040dc:	0142      	lsls	r2, r0, #5
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	1b00      	subs	r0, r0, r4
 80040e4:	eb61 0105 	sbc.w	r1, r1, r5
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	018b      	lsls	r3, r1, #6
 80040f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040f6:	0182      	lsls	r2, r0, #6
 80040f8:	1a12      	subs	r2, r2, r0
 80040fa:	eb63 0301 	sbc.w	r3, r3, r1
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	00d9      	lsls	r1, r3, #3
 8004108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800410c:	00d0      	lsls	r0, r2, #3
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	1912      	adds	r2, r2, r4
 8004114:	eb45 0303 	adc.w	r3, r5, r3
 8004118:	f04f 0000 	mov.w	r0, #0
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	0299      	lsls	r1, r3, #10
 8004122:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004126:	0290      	lsls	r0, r2, #10
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f7fc ff94 	bl	8001064 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCC_GetSysClockFreq+0x160>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	3301      	adds	r3, #1
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	60bb      	str	r3, [r7, #8]
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_RCC_GetSysClockFreq+0x164>)
 8004162:	60bb      	str	r3, [r7, #8]
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	68bb      	ldr	r3, [r7, #8]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bdb0      	pop	{r4, r5, r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400
 8004178:	017d7840 	.word	0x017d7840

0800417c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <HAL_RCC_GetHCLKFreq+0x10>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	20000000 	.word	0x20000000

08004190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004194:	f7ff fff2 	bl	800417c <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	080075cc 	.word	0x080075cc

080041b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041bc:	f7ff ffde 	bl	800417c <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0b5b      	lsrs	r3, r3, #13
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4903      	ldr	r1, [pc, #12]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	080075cc 	.word	0x080075cc

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e03f      	b.n	8004272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f84c 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f929 	bl	800447c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b08a      	sub	sp, #40	; 0x28
 800427e:	af02      	add	r7, sp, #8
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	d17c      	bne.n	8004394 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_UART_Transmit+0x2c>
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e075      	b.n	8004396 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Transmit+0x3e>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e06e      	b.n	8004396 <HAL_UART_Transmit+0x11c>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2221      	movs	r2, #33	; 0x21
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ce:	f7fe f8bf 	bl	8002450 <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e8:	d108      	bne.n	80042fc <HAL_UART_Transmit+0x82>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e003      	b.n	8004304 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800430c:	e02a      	b.n	8004364 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f840 	bl	800439e <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e036      	b.n	8004396 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	3302      	adds	r3, #2
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e007      	b.n	8004356 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1cf      	bne.n	800430e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f810 	bl	800439e <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b090      	sub	sp, #64	; 0x40
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	e050      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d04c      	beq.n	8004452 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x30>
 80043be:	f7fe f847 	bl	8002450 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d241      	bcs.n	8004452 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ee:	637a      	str	r2, [r7, #52]	; 0x34
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	613b      	str	r3, [r7, #16]
   return(result);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004422:	623a      	str	r2, [r7, #32]
 8004424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	69f9      	ldr	r1, [r7, #28]
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e00f      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	bf0c      	ite	eq
 8004462:	2301      	moveq	r3, #1
 8004464:	2300      	movne	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	429a      	cmp	r2, r3
 800446e:	d09f      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3740      	adds	r7, #64	; 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	b09f      	sub	sp, #124	; 0x7c
 8004482:	af00      	add	r7, sp, #0
 8004484:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	68d9      	ldr	r1, [r3, #12]
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	ea40 0301 	orr.w	r3, r0, r1
 800449c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c0:	f021 010c 	bic.w	r1, r1, #12
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ca:	430b      	orrs	r3, r1
 80044cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	6999      	ldr	r1, [r3, #24]
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	ea40 0301 	orr.w	r3, r0, r1
 80044e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <UART_SetConfig+0x204>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d004      	beq.n	80044fa <UART_SetConfig+0x7e>
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b63      	ldr	r3, [pc, #396]	; (8004684 <UART_SetConfig+0x208>)
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d103      	bne.n	8004502 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044fa:	f7ff fe5d 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 80044fe:	6778      	str	r0, [r7, #116]	; 0x74
 8004500:	e002      	b.n	8004508 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004502:	f7ff fe45 	bl	8004190 <HAL_RCC_GetPCLK1Freq>
 8004506:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004510:	f040 80bc 	bne.w	800468c <UART_SetConfig+0x210>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	461c      	mov	r4, r3
 8004518:	f04f 0500 	mov.w	r5, #0
 800451c:	4622      	mov	r2, r4
 800451e:	462b      	mov	r3, r5
 8004520:	1891      	adds	r1, r2, r2
 8004522:	6439      	str	r1, [r7, #64]	; 0x40
 8004524:	415b      	adcs	r3, r3
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
 8004528:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800452c:	1912      	adds	r2, r2, r4
 800452e:	eb45 0303 	adc.w	r3, r5, r3
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	00d9      	lsls	r1, r3, #3
 800453c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004540:	00d0      	lsls	r0, r2, #3
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	1911      	adds	r1, r2, r4
 8004548:	6639      	str	r1, [r7, #96]	; 0x60
 800454a:	416b      	adcs	r3, r5
 800454c:	667b      	str	r3, [r7, #100]	; 0x64
 800454e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	461a      	mov	r2, r3
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	1891      	adds	r1, r2, r2
 800455a:	63b9      	str	r1, [r7, #56]	; 0x38
 800455c:	415b      	adcs	r3, r3
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004564:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004568:	f7fc fd7c 	bl	8001064 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4b45      	ldr	r3, [pc, #276]	; (8004688 <UART_SetConfig+0x20c>)
 8004572:	fba3 2302 	umull	r2, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	011e      	lsls	r6, r3, #4
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	461c      	mov	r4, r3
 800457e:	f04f 0500 	mov.w	r5, #0
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	1891      	adds	r1, r2, r2
 8004588:	6339      	str	r1, [r7, #48]	; 0x30
 800458a:	415b      	adcs	r3, r3
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004592:	1912      	adds	r2, r2, r4
 8004594:	eb45 0303 	adc.w	r3, r5, r3
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	00d9      	lsls	r1, r3, #3
 80045a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a6:	00d0      	lsls	r0, r2, #3
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	1911      	adds	r1, r2, r4
 80045ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80045b0:	416b      	adcs	r3, r5
 80045b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045c2:	415b      	adcs	r3, r3
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ce:	f7fc fd49 	bl	8001064 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <UART_SetConfig+0x20c>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	3332      	adds	r3, #50	; 0x32
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <UART_SetConfig+0x20c>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f8:	441e      	add	r6, r3
 80045fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045fc:	4618      	mov	r0, r3
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	1894      	adds	r4, r2, r2
 8004608:	623c      	str	r4, [r7, #32]
 800460a:	415b      	adcs	r3, r3
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004612:	1812      	adds	r2, r2, r0
 8004614:	eb41 0303 	adc.w	r3, r1, r3
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	f04f 0500 	mov.w	r5, #0
 8004620:	00dd      	lsls	r5, r3, #3
 8004622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004626:	00d4      	lsls	r4, r2, #3
 8004628:	4622      	mov	r2, r4
 800462a:	462b      	mov	r3, r5
 800462c:	1814      	adds	r4, r2, r0
 800462e:	653c      	str	r4, [r7, #80]	; 0x50
 8004630:	414b      	adcs	r3, r1
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
 8004634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	461a      	mov	r2, r3
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	1891      	adds	r1, r2, r2
 8004640:	61b9      	str	r1, [r7, #24]
 8004642:	415b      	adcs	r3, r3
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800464e:	f7fc fd09 	bl	8001064 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <UART_SetConfig+0x20c>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	; 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3332      	adds	r3, #50	; 0x32
 800466a:	4a07      	ldr	r2, [pc, #28]	; (8004688 <UART_SetConfig+0x20c>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4432      	add	r2, r6
 800467c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800467e:	e0bf      	b.n	8004800 <UART_SetConfig+0x384>
 8004680:	40011000 	.word	0x40011000
 8004684:	40011400 	.word	0x40011400
 8004688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	461c      	mov	r4, r3
 8004690:	f04f 0500 	mov.w	r5, #0
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	1891      	adds	r1, r2, r2
 800469a:	6139      	str	r1, [r7, #16]
 800469c:	415b      	adcs	r3, r3
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046a4:	1912      	adds	r2, r2, r4
 80046a6:	eb45 0303 	adc.w	r3, r5, r3
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	00d9      	lsls	r1, r3, #3
 80046b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b8:	00d0      	lsls	r0, r2, #3
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	eb12 0804 	adds.w	r8, r2, r4
 80046c2:	eb43 0905 	adc.w	r9, r3, r5
 80046c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	008b      	lsls	r3, r1, #2
 80046da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046de:	0082      	lsls	r2, r0, #2
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fc fcbe 	bl	8001064 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b47      	ldr	r3, [pc, #284]	; (800480c <UART_SetConfig+0x390>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011e      	lsls	r6, r3, #4
 80046f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f8:	4618      	mov	r0, r3
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	1894      	adds	r4, r2, r2
 8004704:	60bc      	str	r4, [r7, #8]
 8004706:	415b      	adcs	r3, r3
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470e:	1812      	adds	r2, r2, r0
 8004710:	eb41 0303 	adc.w	r3, r1, r3
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	f04f 0500 	mov.w	r5, #0
 800471c:	00dd      	lsls	r5, r3, #3
 800471e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004722:	00d4      	lsls	r4, r2, #3
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	1814      	adds	r4, r2, r0
 800472a:	64bc      	str	r4, [r7, #72]	; 0x48
 800472c:	414b      	adcs	r3, r1
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004748:	0082      	lsls	r2, r0, #2
 800474a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800474e:	f7fc fc89 	bl	8001064 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <UART_SetConfig+0x390>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	; 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	3332      	adds	r3, #50	; 0x32
 800476a:	4a28      	ldr	r2, [pc, #160]	; (800480c <UART_SetConfig+0x390>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004776:	441e      	add	r6, r3
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	4618      	mov	r0, r3
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	1894      	adds	r4, r2, r2
 8004786:	603c      	str	r4, [r7, #0]
 8004788:	415b      	adcs	r3, r3
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004790:	1812      	adds	r2, r2, r0
 8004792:	eb41 0303 	adc.w	r3, r1, r3
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	f04f 0500 	mov.w	r5, #0
 800479e:	00dd      	lsls	r5, r3, #3
 80047a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047a4:	00d4      	lsls	r4, r2, #3
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	eb12 0a00 	adds.w	sl, r2, r0
 80047ae:	eb43 0b01 	adc.w	fp, r3, r1
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	008b      	lsls	r3, r1, #2
 80047c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ca:	0082      	lsls	r2, r0, #2
 80047cc:	4650      	mov	r0, sl
 80047ce:	4659      	mov	r1, fp
 80047d0:	f7fc fc48 	bl	8001064 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <UART_SetConfig+0x390>)
 80047da:	fba3 1302 	umull	r1, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	; 0x32
 80047ec:	4a07      	ldr	r2, [pc, #28]	; (800480c <UART_SetConfig+0x390>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4432      	add	r2, r6
 80047fe:	609a      	str	r2, [r3, #8]
}
 8004800:	bf00      	nop
 8004802:	377c      	adds	r7, #124	; 0x7c
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	51eb851f 	.word	0x51eb851f

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f002 fea4 	bl	800757c <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	080079bc 	.word	0x080079bc
 8004858:	080079bc 	.word	0x080079bc
 800485c:	080079bc 	.word	0x080079bc
 8004860:	080079c0 	.word	0x080079c0

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <__cvt>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	b088      	sub	sp, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	461f      	mov	r7, r3
 800487e:	4614      	mov	r4, r2
 8004880:	bfb8      	it	lt
 8004882:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004886:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004888:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800488a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800488e:	bfb6      	itet	lt
 8004890:	461f      	movlt	r7, r3
 8004892:	2300      	movge	r3, #0
 8004894:	232d      	movlt	r3, #45	; 0x2d
 8004896:	7013      	strb	r3, [r2, #0]
 8004898:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800489a:	f023 0820 	bic.w	r8, r3, #32
 800489e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048a2:	d005      	beq.n	80048b0 <__cvt+0x3c>
 80048a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048a8:	d100      	bne.n	80048ac <__cvt+0x38>
 80048aa:	3501      	adds	r5, #1
 80048ac:	2302      	movs	r3, #2
 80048ae:	e000      	b.n	80048b2 <__cvt+0x3e>
 80048b0:	2303      	movs	r3, #3
 80048b2:	aa07      	add	r2, sp, #28
 80048b4:	9204      	str	r2, [sp, #16]
 80048b6:	aa06      	add	r2, sp, #24
 80048b8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048bc:	e9cd 3500 	strd	r3, r5, [sp]
 80048c0:	4622      	mov	r2, r4
 80048c2:	463b      	mov	r3, r7
 80048c4:	f000 fce0 	bl	8005288 <_dtoa_r>
 80048c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048cc:	4606      	mov	r6, r0
 80048ce:	d102      	bne.n	80048d6 <__cvt+0x62>
 80048d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048d2:	07db      	lsls	r3, r3, #31
 80048d4:	d522      	bpl.n	800491c <__cvt+0xa8>
 80048d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048da:	eb06 0905 	add.w	r9, r6, r5
 80048de:	d110      	bne.n	8004902 <__cvt+0x8e>
 80048e0:	7833      	ldrb	r3, [r6, #0]
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d10a      	bne.n	80048fc <__cvt+0x88>
 80048e6:	2200      	movs	r2, #0
 80048e8:	2300      	movs	r3, #0
 80048ea:	4620      	mov	r0, r4
 80048ec:	4639      	mov	r1, r7
 80048ee:	f7fc f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80048f2:	b918      	cbnz	r0, 80048fc <__cvt+0x88>
 80048f4:	f1c5 0501 	rsb	r5, r5, #1
 80048f8:	f8ca 5000 	str.w	r5, [sl]
 80048fc:	f8da 3000 	ldr.w	r3, [sl]
 8004900:	4499      	add	r9, r3
 8004902:	2200      	movs	r2, #0
 8004904:	2300      	movs	r3, #0
 8004906:	4620      	mov	r0, r4
 8004908:	4639      	mov	r1, r7
 800490a:	f7fc f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800490e:	b108      	cbz	r0, 8004914 <__cvt+0xa0>
 8004910:	f8cd 901c 	str.w	r9, [sp, #28]
 8004914:	2230      	movs	r2, #48	; 0x30
 8004916:	9b07      	ldr	r3, [sp, #28]
 8004918:	454b      	cmp	r3, r9
 800491a:	d307      	bcc.n	800492c <__cvt+0xb8>
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004920:	1b9b      	subs	r3, r3, r6
 8004922:	4630      	mov	r0, r6
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	b008      	add	sp, #32
 8004928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	9107      	str	r1, [sp, #28]
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e7f0      	b.n	8004916 <__cvt+0xa2>

08004934 <__exponent>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	4603      	mov	r3, r0
 8004938:	2900      	cmp	r1, #0
 800493a:	bfb8      	it	lt
 800493c:	4249      	neglt	r1, r1
 800493e:	f803 2b02 	strb.w	r2, [r3], #2
 8004942:	bfb4      	ite	lt
 8004944:	222d      	movlt	r2, #45	; 0x2d
 8004946:	222b      	movge	r2, #43	; 0x2b
 8004948:	2909      	cmp	r1, #9
 800494a:	7042      	strb	r2, [r0, #1]
 800494c:	dd2a      	ble.n	80049a4 <__exponent+0x70>
 800494e:	f10d 0407 	add.w	r4, sp, #7
 8004952:	46a4      	mov	ip, r4
 8004954:	270a      	movs	r7, #10
 8004956:	46a6      	mov	lr, r4
 8004958:	460a      	mov	r2, r1
 800495a:	fb91 f6f7 	sdiv	r6, r1, r7
 800495e:	fb07 1516 	mls	r5, r7, r6, r1
 8004962:	3530      	adds	r5, #48	; 0x30
 8004964:	2a63      	cmp	r2, #99	; 0x63
 8004966:	f104 34ff 	add.w	r4, r4, #4294967295
 800496a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800496e:	4631      	mov	r1, r6
 8004970:	dcf1      	bgt.n	8004956 <__exponent+0x22>
 8004972:	3130      	adds	r1, #48	; 0x30
 8004974:	f1ae 0502 	sub.w	r5, lr, #2
 8004978:	f804 1c01 	strb.w	r1, [r4, #-1]
 800497c:	1c44      	adds	r4, r0, #1
 800497e:	4629      	mov	r1, r5
 8004980:	4561      	cmp	r1, ip
 8004982:	d30a      	bcc.n	800499a <__exponent+0x66>
 8004984:	f10d 0209 	add.w	r2, sp, #9
 8004988:	eba2 020e 	sub.w	r2, r2, lr
 800498c:	4565      	cmp	r5, ip
 800498e:	bf88      	it	hi
 8004990:	2200      	movhi	r2, #0
 8004992:	4413      	add	r3, r2
 8004994:	1a18      	subs	r0, r3, r0
 8004996:	b003      	add	sp, #12
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800499e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049a2:	e7ed      	b.n	8004980 <__exponent+0x4c>
 80049a4:	2330      	movs	r3, #48	; 0x30
 80049a6:	3130      	adds	r1, #48	; 0x30
 80049a8:	7083      	strb	r3, [r0, #2]
 80049aa:	70c1      	strb	r1, [r0, #3]
 80049ac:	1d03      	adds	r3, r0, #4
 80049ae:	e7f1      	b.n	8004994 <__exponent+0x60>

080049b0 <_printf_float>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	b091      	sub	sp, #68	; 0x44
 80049b6:	460c      	mov	r4, r1
 80049b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049bc:	4616      	mov	r6, r2
 80049be:	461f      	mov	r7, r3
 80049c0:	4605      	mov	r5, r0
 80049c2:	f001 fa4f 	bl	8005e64 <_localeconv_r>
 80049c6:	6803      	ldr	r3, [r0, #0]
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fc00 	bl	80001d0 <strlen>
 80049d0:	2300      	movs	r3, #0
 80049d2:	930e      	str	r3, [sp, #56]	; 0x38
 80049d4:	f8d8 3000 	ldr.w	r3, [r8]
 80049d8:	900a      	str	r0, [sp, #40]	; 0x28
 80049da:	3307      	adds	r3, #7
 80049dc:	f023 0307 	bic.w	r3, r3, #7
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80049e8:	f8d4 b000 	ldr.w	fp, [r4]
 80049ec:	f8c8 2000 	str.w	r2, [r8]
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80049fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a04:	4b9c      	ldr	r3, [pc, #624]	; (8004c78 <_printf_float+0x2c8>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f7fc f88e 	bl	8000b2c <__aeabi_dcmpun>
 8004a10:	bb70      	cbnz	r0, 8004a70 <_printf_float+0xc0>
 8004a12:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <_printf_float+0x2c8>)
 8004a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7fc f868 	bl	8000af0 <__aeabi_dcmple>
 8004a20:	bb30      	cbnz	r0, 8004a70 <_printf_float+0xc0>
 8004a22:	2200      	movs	r2, #0
 8004a24:	2300      	movs	r3, #0
 8004a26:	4640      	mov	r0, r8
 8004a28:	4651      	mov	r1, sl
 8004a2a:	f7fc f857 	bl	8000adc <__aeabi_dcmplt>
 8004a2e:	b110      	cbz	r0, 8004a36 <_printf_float+0x86>
 8004a30:	232d      	movs	r3, #45	; 0x2d
 8004a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a36:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <_printf_float+0x2cc>)
 8004a38:	4891      	ldr	r0, [pc, #580]	; (8004c80 <_printf_float+0x2d0>)
 8004a3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a3e:	bf94      	ite	ls
 8004a40:	4698      	movls	r8, r3
 8004a42:	4680      	movhi	r8, r0
 8004a44:	2303      	movs	r3, #3
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	f02b 0304 	bic.w	r3, fp, #4
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	f04f 0a00 	mov.w	sl, #0
 8004a52:	9700      	str	r7, [sp, #0]
 8004a54:	4633      	mov	r3, r6
 8004a56:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f000 f9d2 	bl	8004e04 <_printf_common>
 8004a60:	3001      	adds	r0, #1
 8004a62:	f040 808f 	bne.w	8004b84 <_printf_float+0x1d4>
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6a:	b011      	add	sp, #68	; 0x44
 8004a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a70:	4642      	mov	r2, r8
 8004a72:	4653      	mov	r3, sl
 8004a74:	4640      	mov	r0, r8
 8004a76:	4651      	mov	r1, sl
 8004a78:	f7fc f858 	bl	8000b2c <__aeabi_dcmpun>
 8004a7c:	b140      	cbz	r0, 8004a90 <_printf_float+0xe0>
 8004a7e:	f1ba 0f00 	cmp.w	sl, #0
 8004a82:	bfbc      	itt	lt
 8004a84:	232d      	movlt	r3, #45	; 0x2d
 8004a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a8a:	487e      	ldr	r0, [pc, #504]	; (8004c84 <_printf_float+0x2d4>)
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	; (8004c88 <_printf_float+0x2d8>)
 8004a8e:	e7d4      	b.n	8004a3a <_printf_float+0x8a>
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a98:	d142      	bne.n	8004b20 <_printf_float+0x170>
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	9206      	str	r2, [sp, #24]
 8004aa2:	aa0e      	add	r2, sp, #56	; 0x38
 8004aa4:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004aa8:	aa0d      	add	r2, sp, #52	; 0x34
 8004aaa:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004aae:	9203      	str	r2, [sp, #12]
 8004ab0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ab4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4642      	mov	r2, r8
 8004ac0:	4653      	mov	r3, sl
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ac6:	f7ff fed5 	bl	8004874 <__cvt>
 8004aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004acc:	2947      	cmp	r1, #71	; 0x47
 8004ace:	4680      	mov	r8, r0
 8004ad0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ad2:	d108      	bne.n	8004ae6 <_printf_float+0x136>
 8004ad4:	1cc8      	adds	r0, r1, #3
 8004ad6:	db02      	blt.n	8004ade <_printf_float+0x12e>
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	4299      	cmp	r1, r3
 8004adc:	dd40      	ble.n	8004b60 <_printf_float+0x1b0>
 8004ade:	f1a9 0902 	sub.w	r9, r9, #2
 8004ae2:	fa5f f989 	uxtb.w	r9, r9
 8004ae6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004aea:	d81f      	bhi.n	8004b2c <_printf_float+0x17c>
 8004aec:	3901      	subs	r1, #1
 8004aee:	464a      	mov	r2, r9
 8004af0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004af4:	910d      	str	r1, [sp, #52]	; 0x34
 8004af6:	f7ff ff1d 	bl	8004934 <__exponent>
 8004afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004afc:	1813      	adds	r3, r2, r0
 8004afe:	2a01      	cmp	r2, #1
 8004b00:	4682      	mov	sl, r0
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	dc02      	bgt.n	8004b0c <_printf_float+0x15c>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	07d2      	lsls	r2, r2, #31
 8004b0a:	d501      	bpl.n	8004b10 <_printf_float+0x160>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d09c      	beq.n	8004a52 <_printf_float+0xa2>
 8004b18:	232d      	movs	r3, #45	; 0x2d
 8004b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1e:	e798      	b.n	8004a52 <_printf_float+0xa2>
 8004b20:	2947      	cmp	r1, #71	; 0x47
 8004b22:	d1bc      	bne.n	8004a9e <_printf_float+0xee>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ba      	bne.n	8004a9e <_printf_float+0xee>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e7b7      	b.n	8004a9c <_printf_float+0xec>
 8004b2c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b30:	d118      	bne.n	8004b64 <_printf_float+0x1b4>
 8004b32:	2900      	cmp	r1, #0
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	dd0b      	ble.n	8004b50 <_printf_float+0x1a0>
 8004b38:	6121      	str	r1, [r4, #16]
 8004b3a:	b913      	cbnz	r3, 8004b42 <_printf_float+0x192>
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	07d0      	lsls	r0, r2, #31
 8004b40:	d502      	bpl.n	8004b48 <_printf_float+0x198>
 8004b42:	3301      	adds	r3, #1
 8004b44:	440b      	add	r3, r1
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b4a:	f04f 0a00 	mov.w	sl, #0
 8004b4e:	e7df      	b.n	8004b10 <_printf_float+0x160>
 8004b50:	b913      	cbnz	r3, 8004b58 <_printf_float+0x1a8>
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	07d2      	lsls	r2, r2, #31
 8004b56:	d501      	bpl.n	8004b5c <_printf_float+0x1ac>
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7f4      	b.n	8004b46 <_printf_float+0x196>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e7f2      	b.n	8004b46 <_printf_float+0x196>
 8004b60:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b66:	4299      	cmp	r1, r3
 8004b68:	db05      	blt.n	8004b76 <_printf_float+0x1c6>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	6121      	str	r1, [r4, #16]
 8004b6e:	07d8      	lsls	r0, r3, #31
 8004b70:	d5ea      	bpl.n	8004b48 <_printf_float+0x198>
 8004b72:	1c4b      	adds	r3, r1, #1
 8004b74:	e7e7      	b.n	8004b46 <_printf_float+0x196>
 8004b76:	2900      	cmp	r1, #0
 8004b78:	bfd4      	ite	le
 8004b7a:	f1c1 0202 	rsble	r2, r1, #2
 8004b7e:	2201      	movgt	r2, #1
 8004b80:	4413      	add	r3, r2
 8004b82:	e7e0      	b.n	8004b46 <_printf_float+0x196>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	055a      	lsls	r2, r3, #21
 8004b88:	d407      	bmi.n	8004b9a <_printf_float+0x1ea>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	d12b      	bne.n	8004bf0 <_printf_float+0x240>
 8004b98:	e765      	b.n	8004a66 <_printf_float+0xb6>
 8004b9a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b9e:	f240 80dc 	bls.w	8004d5a <_printf_float+0x3aa>
 8004ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f7fb ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d033      	beq.n	8004c1a <_printf_float+0x26a>
 8004bb2:	4a36      	ldr	r2, [pc, #216]	; (8004c8c <_printf_float+0x2dc>)
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f43f af52 	beq.w	8004a66 <_printf_float+0xb6>
 8004bc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	db02      	blt.n	8004bd0 <_printf_float+0x220>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	07d8      	lsls	r0, r3, #31
 8004bce:	d50f      	bpl.n	8004bf0 <_printf_float+0x240>
 8004bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af43 	beq.w	8004a66 <_printf_float+0xb6>
 8004be0:	f04f 0800 	mov.w	r8, #0
 8004be4:	f104 091a 	add.w	r9, r4, #26
 8004be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bea:	3b01      	subs	r3, #1
 8004bec:	4543      	cmp	r3, r8
 8004bee:	dc09      	bgt.n	8004c04 <_printf_float+0x254>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	f100 8101 	bmi.w	8004dfa <_printf_float+0x44a>
 8004bf8:	68e0      	ldr	r0, [r4, #12]
 8004bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	bfb8      	it	lt
 8004c00:	4618      	movlt	r0, r3
 8004c02:	e732      	b.n	8004a6a <_printf_float+0xba>
 8004c04:	2301      	movs	r3, #1
 8004c06:	464a      	mov	r2, r9
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f af29 	beq.w	8004a66 <_printf_float+0xb6>
 8004c14:	f108 0801 	add.w	r8, r8, #1
 8004c18:	e7e6      	b.n	8004be8 <_printf_float+0x238>
 8004c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dc37      	bgt.n	8004c90 <_printf_float+0x2e0>
 8004c20:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <_printf_float+0x2dc>)
 8004c22:	2301      	movs	r3, #1
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f af1b 	beq.w	8004a66 <_printf_float+0xb6>
 8004c30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d102      	bne.n	8004c3e <_printf_float+0x28e>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	07d9      	lsls	r1, r3, #31
 8004c3c:	d5d8      	bpl.n	8004bf0 <_printf_float+0x240>
 8004c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f af0c 	beq.w	8004a66 <_printf_float+0xb6>
 8004c4e:	f04f 0900 	mov.w	r9, #0
 8004c52:	f104 0a1a 	add.w	sl, r4, #26
 8004c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c58:	425b      	negs	r3, r3
 8004c5a:	454b      	cmp	r3, r9
 8004c5c:	dc01      	bgt.n	8004c62 <_printf_float+0x2b2>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	e794      	b.n	8004b8c <_printf_float+0x1dc>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4652      	mov	r2, sl
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f43f aefa 	beq.w	8004a66 <_printf_float+0xb6>
 8004c72:	f109 0901 	add.w	r9, r9, #1
 8004c76:	e7ee      	b.n	8004c56 <_printf_float+0x2a6>
 8004c78:	7fefffff 	.word	0x7fefffff
 8004c7c:	080075d8 	.word	0x080075d8
 8004c80:	080075dc 	.word	0x080075dc
 8004c84:	080075e4 	.word	0x080075e4
 8004c88:	080075e0 	.word	0x080075e0
 8004c8c:	080075e8 	.word	0x080075e8
 8004c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c94:	429a      	cmp	r2, r3
 8004c96:	bfa8      	it	ge
 8004c98:	461a      	movge	r2, r3
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	4691      	mov	r9, r2
 8004c9e:	dc37      	bgt.n	8004d10 <_printf_float+0x360>
 8004ca0:	f04f 0b00 	mov.w	fp, #0
 8004ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca8:	f104 021a 	add.w	r2, r4, #26
 8004cac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004cb0:	ebaa 0309 	sub.w	r3, sl, r9
 8004cb4:	455b      	cmp	r3, fp
 8004cb6:	dc33      	bgt.n	8004d20 <_printf_float+0x370>
 8004cb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	db3b      	blt.n	8004d38 <_printf_float+0x388>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	07da      	lsls	r2, r3, #31
 8004cc4:	d438      	bmi.n	8004d38 <_printf_float+0x388>
 8004cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cca:	eba2 030a 	sub.w	r3, r2, sl
 8004cce:	eba2 0901 	sub.w	r9, r2, r1
 8004cd2:	4599      	cmp	r9, r3
 8004cd4:	bfa8      	it	ge
 8004cd6:	4699      	movge	r9, r3
 8004cd8:	f1b9 0f00 	cmp.w	r9, #0
 8004cdc:	dc34      	bgt.n	8004d48 <_printf_float+0x398>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce6:	f104 0a1a 	add.w	sl, r4, #26
 8004cea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	eba3 0309 	sub.w	r3, r3, r9
 8004cf4:	4543      	cmp	r3, r8
 8004cf6:	f77f af7b 	ble.w	8004bf0 <_printf_float+0x240>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f aeae 	beq.w	8004a66 <_printf_float+0xb6>
 8004d0a:	f108 0801 	add.w	r8, r8, #1
 8004d0e:	e7ec      	b.n	8004cea <_printf_float+0x33a>
 8004d10:	4613      	mov	r3, r2
 8004d12:	4631      	mov	r1, r6
 8004d14:	4642      	mov	r2, r8
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d1c0      	bne.n	8004ca0 <_printf_float+0x2f0>
 8004d1e:	e6a2      	b.n	8004a66 <_printf_float+0xb6>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4631      	mov	r1, r6
 8004d24:	4628      	mov	r0, r5
 8004d26:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f ae9b 	beq.w	8004a66 <_printf_float+0xb6>
 8004d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d32:	f10b 0b01 	add.w	fp, fp, #1
 8004d36:	e7b9      	b.n	8004cac <_printf_float+0x2fc>
 8004d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	d1bf      	bne.n	8004cc6 <_printf_float+0x316>
 8004d46:	e68e      	b.n	8004a66 <_printf_float+0xb6>
 8004d48:	464b      	mov	r3, r9
 8004d4a:	eb08 020a 	add.w	r2, r8, sl
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	d1c2      	bne.n	8004cde <_printf_float+0x32e>
 8004d58:	e685      	b.n	8004a66 <_printf_float+0xb6>
 8004d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d5c:	2a01      	cmp	r2, #1
 8004d5e:	dc01      	bgt.n	8004d64 <_printf_float+0x3b4>
 8004d60:	07db      	lsls	r3, r3, #31
 8004d62:	d537      	bpl.n	8004dd4 <_printf_float+0x424>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4642      	mov	r2, r8
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f43f ae79 	beq.w	8004a66 <_printf_float+0xb6>
 8004d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f ae71 	beq.w	8004a66 <_printf_float+0xb6>
 8004d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f7fb fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d90:	b9d8      	cbnz	r0, 8004dca <_printf_float+0x41a>
 8004d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d94:	f108 0201 	add.w	r2, r8, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d10e      	bne.n	8004dc2 <_printf_float+0x412>
 8004da4:	e65f      	b.n	8004a66 <_printf_float+0xb6>
 8004da6:	2301      	movs	r3, #1
 8004da8:	464a      	mov	r2, r9
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f ae58 	beq.w	8004a66 <_printf_float+0xb6>
 8004db6:	f108 0801 	add.w	r8, r8, #1
 8004dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4543      	cmp	r3, r8
 8004dc0:	dcf1      	bgt.n	8004da6 <_printf_float+0x3f6>
 8004dc2:	4653      	mov	r3, sl
 8004dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dc8:	e6e1      	b.n	8004b8e <_printf_float+0x1de>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	f104 091a 	add.w	r9, r4, #26
 8004dd2:	e7f2      	b.n	8004dba <_printf_float+0x40a>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	e7df      	b.n	8004d9a <_printf_float+0x3ea>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	464a      	mov	r2, r9
 8004dde:	4631      	mov	r1, r6
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b8      	blx	r7
 8004de4:	3001      	adds	r0, #1
 8004de6:	f43f ae3e 	beq.w	8004a66 <_printf_float+0xb6>
 8004dea:	f108 0801 	add.w	r8, r8, #1
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004df2:	1a5b      	subs	r3, r3, r1
 8004df4:	4543      	cmp	r3, r8
 8004df6:	dcf0      	bgt.n	8004dda <_printf_float+0x42a>
 8004df8:	e6fe      	b.n	8004bf8 <_printf_float+0x248>
 8004dfa:	f04f 0800 	mov.w	r8, #0
 8004dfe:	f104 0919 	add.w	r9, r4, #25
 8004e02:	e7f4      	b.n	8004dee <_printf_float+0x43e>

08004e04 <_printf_common>:
 8004e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	4616      	mov	r6, r2
 8004e0a:	4699      	mov	r9, r3
 8004e0c:	688a      	ldr	r2, [r1, #8]
 8004e0e:	690b      	ldr	r3, [r1, #16]
 8004e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bfb8      	it	lt
 8004e18:	4613      	movlt	r3, r2
 8004e1a:	6033      	str	r3, [r6, #0]
 8004e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e20:	4607      	mov	r7, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	b10a      	cbz	r2, 8004e2a <_printf_common+0x26>
 8004e26:	3301      	adds	r3, #1
 8004e28:	6033      	str	r3, [r6, #0]
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	0699      	lsls	r1, r3, #26
 8004e2e:	bf42      	ittt	mi
 8004e30:	6833      	ldrmi	r3, [r6, #0]
 8004e32:	3302      	addmi	r3, #2
 8004e34:	6033      	strmi	r3, [r6, #0]
 8004e36:	6825      	ldr	r5, [r4, #0]
 8004e38:	f015 0506 	ands.w	r5, r5, #6
 8004e3c:	d106      	bne.n	8004e4c <_printf_common+0x48>
 8004e3e:	f104 0a19 	add.w	sl, r4, #25
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	6832      	ldr	r2, [r6, #0]
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	dc26      	bgt.n	8004e9a <_printf_common+0x96>
 8004e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e50:	1e13      	subs	r3, r2, #0
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	bf18      	it	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	0692      	lsls	r2, r2, #26
 8004e5a:	d42b      	bmi.n	8004eb4 <_printf_common+0xb0>
 8004e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e60:	4649      	mov	r1, r9
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c0      	blx	r8
 8004e66:	3001      	adds	r0, #1
 8004e68:	d01e      	beq.n	8004ea8 <_printf_common+0xa4>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	68e5      	ldr	r5, [r4, #12]
 8004e6e:	6832      	ldr	r2, [r6, #0]
 8004e70:	f003 0306 	and.w	r3, r3, #6
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	bf08      	it	eq
 8004e78:	1aad      	subeq	r5, r5, r2
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	bf0c      	ite	eq
 8004e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e84:	2500      	movne	r5, #0
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bfc4      	itt	gt
 8004e8a:	1a9b      	subgt	r3, r3, r2
 8004e8c:	18ed      	addgt	r5, r5, r3
 8004e8e:	2600      	movs	r6, #0
 8004e90:	341a      	adds	r4, #26
 8004e92:	42b5      	cmp	r5, r6
 8004e94:	d11a      	bne.n	8004ecc <_printf_common+0xc8>
 8004e96:	2000      	movs	r0, #0
 8004e98:	e008      	b.n	8004eac <_printf_common+0xa8>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	47c0      	blx	r8
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d103      	bne.n	8004eb0 <_printf_common+0xac>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	e7c6      	b.n	8004e42 <_printf_common+0x3e>
 8004eb4:	18e1      	adds	r1, r4, r3
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	2030      	movs	r0, #48	; 0x30
 8004eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ebe:	4422      	add	r2, r4
 8004ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec8:	3302      	adds	r3, #2
 8004eca:	e7c7      	b.n	8004e5c <_printf_common+0x58>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d0e6      	beq.n	8004ea8 <_printf_common+0xa4>
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7d9      	b.n	8004e92 <_printf_common+0x8e>
	...

08004ee0 <_printf_i>:
 8004ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	7e27      	ldrb	r7, [r4, #24]
 8004eea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eec:	2f78      	cmp	r7, #120	; 0x78
 8004eee:	4680      	mov	r8, r0
 8004ef0:	469a      	mov	sl, r3
 8004ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef6:	d807      	bhi.n	8004f08 <_printf_i+0x28>
 8004ef8:	2f62      	cmp	r7, #98	; 0x62
 8004efa:	d80a      	bhi.n	8004f12 <_printf_i+0x32>
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	f000 80d8 	beq.w	80050b2 <_printf_i+0x1d2>
 8004f02:	2f58      	cmp	r7, #88	; 0x58
 8004f04:	f000 80a3 	beq.w	800504e <_printf_i+0x16e>
 8004f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f10:	e03a      	b.n	8004f88 <_printf_i+0xa8>
 8004f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f16:	2b15      	cmp	r3, #21
 8004f18:	d8f6      	bhi.n	8004f08 <_printf_i+0x28>
 8004f1a:	a001      	add	r0, pc, #4	; (adr r0, 8004f20 <_printf_i+0x40>)
 8004f1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f09 	.word	0x08004f09
 8004f2c:	08004f09 	.word	0x08004f09
 8004f30:	08004f09 	.word	0x08004f09
 8004f34:	08004f09 	.word	0x08004f09
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f09 	.word	0x08004f09
 8004f40:	08004f09 	.word	0x08004f09
 8004f44:	08004f09 	.word	0x08004f09
 8004f48:	08004f09 	.word	0x08004f09
 8004f4c:	08005099 	.word	0x08005099
 8004f50:	08004fbd 	.word	0x08004fbd
 8004f54:	0800507b 	.word	0x0800507b
 8004f58:	08004f09 	.word	0x08004f09
 8004f5c:	08004f09 	.word	0x08004f09
 8004f60:	080050bb 	.word	0x080050bb
 8004f64:	08004f09 	.word	0x08004f09
 8004f68:	08004fbd 	.word	0x08004fbd
 8004f6c:	08004f09 	.word	0x08004f09
 8004f70:	08004f09 	.word	0x08004f09
 8004f74:	08005083 	.word	0x08005083
 8004f78:	680b      	ldr	r3, [r1, #0]
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	600a      	str	r2, [r1, #0]
 8004f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0a3      	b.n	80050d4 <_printf_i+0x1f4>
 8004f8c:	6825      	ldr	r5, [r4, #0]
 8004f8e:	6808      	ldr	r0, [r1, #0]
 8004f90:	062e      	lsls	r6, r5, #24
 8004f92:	f100 0304 	add.w	r3, r0, #4
 8004f96:	d50a      	bpl.n	8004fae <_printf_i+0xce>
 8004f98:	6805      	ldr	r5, [r0, #0]
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	da03      	bge.n	8004fa8 <_printf_i+0xc8>
 8004fa0:	232d      	movs	r3, #45	; 0x2d
 8004fa2:	426d      	negs	r5, r5
 8004fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa8:	485e      	ldr	r0, [pc, #376]	; (8005124 <_printf_i+0x244>)
 8004faa:	230a      	movs	r3, #10
 8004fac:	e019      	b.n	8004fe2 <_printf_i+0x102>
 8004fae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fb2:	6805      	ldr	r5, [r0, #0]
 8004fb4:	600b      	str	r3, [r1, #0]
 8004fb6:	bf18      	it	ne
 8004fb8:	b22d      	sxthne	r5, r5
 8004fba:	e7ef      	b.n	8004f9c <_printf_i+0xbc>
 8004fbc:	680b      	ldr	r3, [r1, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	1d18      	adds	r0, r3, #4
 8004fc2:	6008      	str	r0, [r1, #0]
 8004fc4:	0628      	lsls	r0, r5, #24
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0xec>
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0xf2>
 8004fcc:	0669      	lsls	r1, r5, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0xe8>
 8004fd0:	881d      	ldrh	r5, [r3, #0]
 8004fd2:	4854      	ldr	r0, [pc, #336]	; (8005124 <_printf_i+0x244>)
 8004fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2308      	moveq	r3, #8
 8004fda:	230a      	movne	r3, #10
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fe2:	6866      	ldr	r6, [r4, #4]
 8004fe4:	60a6      	str	r6, [r4, #8]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	bfa2      	ittt	ge
 8004fea:	6821      	ldrge	r1, [r4, #0]
 8004fec:	f021 0104 	bicge.w	r1, r1, #4
 8004ff0:	6021      	strge	r1, [r4, #0]
 8004ff2:	b90d      	cbnz	r5, 8004ff8 <_printf_i+0x118>
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	d04d      	beq.n	8005094 <_printf_i+0x1b4>
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8005002:	5dc7      	ldrb	r7, [r0, r7]
 8005004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005008:	462f      	mov	r7, r5
 800500a:	42bb      	cmp	r3, r7
 800500c:	460d      	mov	r5, r1
 800500e:	d9f4      	bls.n	8004ffa <_printf_i+0x11a>
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10b      	bne.n	800502c <_printf_i+0x14c>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	07df      	lsls	r7, r3, #31
 8005018:	d508      	bpl.n	800502c <_printf_i+0x14c>
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	6861      	ldr	r1, [r4, #4]
 800501e:	4299      	cmp	r1, r3
 8005020:	bfde      	ittt	le
 8005022:	2330      	movle	r3, #48	; 0x30
 8005024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502c:	1b92      	subs	r2, r2, r6
 800502e:	6122      	str	r2, [r4, #16]
 8005030:	f8cd a000 	str.w	sl, [sp]
 8005034:	464b      	mov	r3, r9
 8005036:	aa03      	add	r2, sp, #12
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f7ff fee2 	bl	8004e04 <_printf_common>
 8005040:	3001      	adds	r0, #1
 8005042:	d14c      	bne.n	80050de <_printf_i+0x1fe>
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	b004      	add	sp, #16
 800504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504e:	4835      	ldr	r0, [pc, #212]	; (8005124 <_printf_i+0x244>)
 8005050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	680e      	ldr	r6, [r1, #0]
 8005058:	061f      	lsls	r7, r3, #24
 800505a:	f856 5b04 	ldr.w	r5, [r6], #4
 800505e:	600e      	str	r6, [r1, #0]
 8005060:	d514      	bpl.n	800508c <_printf_i+0x1ac>
 8005062:	07d9      	lsls	r1, r3, #31
 8005064:	bf44      	itt	mi
 8005066:	f043 0320 	orrmi.w	r3, r3, #32
 800506a:	6023      	strmi	r3, [r4, #0]
 800506c:	b91d      	cbnz	r5, 8005076 <_printf_i+0x196>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	f023 0320 	bic.w	r3, r3, #32
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	2310      	movs	r3, #16
 8005078:	e7b0      	b.n	8004fdc <_printf_i+0xfc>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	f043 0320 	orr.w	r3, r3, #32
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2378      	movs	r3, #120	; 0x78
 8005084:	4828      	ldr	r0, [pc, #160]	; (8005128 <_printf_i+0x248>)
 8005086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800508a:	e7e3      	b.n	8005054 <_printf_i+0x174>
 800508c:	065e      	lsls	r6, r3, #25
 800508e:	bf48      	it	mi
 8005090:	b2ad      	uxthmi	r5, r5
 8005092:	e7e6      	b.n	8005062 <_printf_i+0x182>
 8005094:	4616      	mov	r6, r2
 8005096:	e7bb      	b.n	8005010 <_printf_i+0x130>
 8005098:	680b      	ldr	r3, [r1, #0]
 800509a:	6826      	ldr	r6, [r4, #0]
 800509c:	6960      	ldr	r0, [r4, #20]
 800509e:	1d1d      	adds	r5, r3, #4
 80050a0:	600d      	str	r5, [r1, #0]
 80050a2:	0635      	lsls	r5, r6, #24
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0x1cc>
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0x1d2>
 80050ac:	0671      	lsls	r1, r6, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0x1c8>
 80050b0:	8018      	strh	r0, [r3, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	4616      	mov	r6, r2
 80050b8:	e7ba      	b.n	8005030 <_printf_i+0x150>
 80050ba:	680b      	ldr	r3, [r1, #0]
 80050bc:	1d1a      	adds	r2, r3, #4
 80050be:	600a      	str	r2, [r1, #0]
 80050c0:	681e      	ldr	r6, [r3, #0]
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	2100      	movs	r1, #0
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7fb f88a 	bl	80001e0 <memchr>
 80050cc:	b108      	cbz	r0, 80050d2 <_printf_i+0x1f2>
 80050ce:	1b80      	subs	r0, r0, r6
 80050d0:	6060      	str	r0, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	2300      	movs	r3, #0
 80050d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050dc:	e7a8      	b.n	8005030 <_printf_i+0x150>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	47d0      	blx	sl
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0ab      	beq.n	8005044 <_printf_i+0x164>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d413      	bmi.n	800511a <_printf_i+0x23a>
 80050f2:	68e0      	ldr	r0, [r4, #12]
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	4298      	cmp	r0, r3
 80050f8:	bfb8      	it	lt
 80050fa:	4618      	movlt	r0, r3
 80050fc:	e7a4      	b.n	8005048 <_printf_i+0x168>
 80050fe:	2301      	movs	r3, #1
 8005100:	4632      	mov	r2, r6
 8005102:	4649      	mov	r1, r9
 8005104:	4640      	mov	r0, r8
 8005106:	47d0      	blx	sl
 8005108:	3001      	adds	r0, #1
 800510a:	d09b      	beq.n	8005044 <_printf_i+0x164>
 800510c:	3501      	adds	r5, #1
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	9903      	ldr	r1, [sp, #12]
 8005112:	1a5b      	subs	r3, r3, r1
 8005114:	42ab      	cmp	r3, r5
 8005116:	dcf2      	bgt.n	80050fe <_printf_i+0x21e>
 8005118:	e7eb      	b.n	80050f2 <_printf_i+0x212>
 800511a:	2500      	movs	r5, #0
 800511c:	f104 0619 	add.w	r6, r4, #25
 8005120:	e7f5      	b.n	800510e <_printf_i+0x22e>
 8005122:	bf00      	nop
 8005124:	080075ea 	.word	0x080075ea
 8005128:	080075fb 	.word	0x080075fb

0800512c <siprintf>:
 800512c:	b40e      	push	{r1, r2, r3}
 800512e:	b500      	push	{lr}
 8005130:	b09c      	sub	sp, #112	; 0x70
 8005132:	ab1d      	add	r3, sp, #116	; 0x74
 8005134:	9002      	str	r0, [sp, #8]
 8005136:	9006      	str	r0, [sp, #24]
 8005138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800513c:	4809      	ldr	r0, [pc, #36]	; (8005164 <siprintf+0x38>)
 800513e:	9107      	str	r1, [sp, #28]
 8005140:	9104      	str	r1, [sp, #16]
 8005142:	4909      	ldr	r1, [pc, #36]	; (8005168 <siprintf+0x3c>)
 8005144:	f853 2b04 	ldr.w	r2, [r3], #4
 8005148:	9105      	str	r1, [sp, #20]
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	a902      	add	r1, sp, #8
 8005150:	f001 fb32 	bl	80067b8 <_svfiprintf_r>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	b01c      	add	sp, #112	; 0x70
 800515c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005160:	b003      	add	sp, #12
 8005162:	4770      	bx	lr
 8005164:	2000000c 	.word	0x2000000c
 8005168:	ffff0208 	.word	0xffff0208

0800516c <quorem>:
 800516c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	6903      	ldr	r3, [r0, #16]
 8005172:	690c      	ldr	r4, [r1, #16]
 8005174:	42a3      	cmp	r3, r4
 8005176:	4607      	mov	r7, r0
 8005178:	f2c0 8081 	blt.w	800527e <quorem+0x112>
 800517c:	3c01      	subs	r4, #1
 800517e:	f101 0814 	add.w	r8, r1, #20
 8005182:	f100 0514 	add.w	r5, r0, #20
 8005186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005194:	3301      	adds	r3, #1
 8005196:	429a      	cmp	r2, r3
 8005198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800519c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051a4:	d331      	bcc.n	800520a <quorem+0x9e>
 80051a6:	f04f 0e00 	mov.w	lr, #0
 80051aa:	4640      	mov	r0, r8
 80051ac:	46ac      	mov	ip, r5
 80051ae:	46f2      	mov	sl, lr
 80051b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051b4:	b293      	uxth	r3, r2
 80051b6:	fb06 e303 	mla	r3, r6, r3, lr
 80051ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051be:	b29b      	uxth	r3, r3
 80051c0:	ebaa 0303 	sub.w	r3, sl, r3
 80051c4:	0c12      	lsrs	r2, r2, #16
 80051c6:	f8dc a000 	ldr.w	sl, [ip]
 80051ca:	fb06 e202 	mla	r2, r6, r2, lr
 80051ce:	fa13 f38a 	uxtah	r3, r3, sl
 80051d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051d6:	fa1f fa82 	uxth.w	sl, r2
 80051da:	f8dc 2000 	ldr.w	r2, [ip]
 80051de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80051e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051ec:	4581      	cmp	r9, r0
 80051ee:	f84c 3b04 	str.w	r3, [ip], #4
 80051f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051f6:	d2db      	bcs.n	80051b0 <quorem+0x44>
 80051f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80051fc:	b92b      	cbnz	r3, 800520a <quorem+0x9e>
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	3b04      	subs	r3, #4
 8005202:	429d      	cmp	r5, r3
 8005204:	461a      	mov	r2, r3
 8005206:	d32e      	bcc.n	8005266 <quorem+0xfa>
 8005208:	613c      	str	r4, [r7, #16]
 800520a:	4638      	mov	r0, r7
 800520c:	f001 f8c0 	bl	8006390 <__mcmp>
 8005210:	2800      	cmp	r0, #0
 8005212:	db24      	blt.n	800525e <quorem+0xf2>
 8005214:	3601      	adds	r6, #1
 8005216:	4628      	mov	r0, r5
 8005218:	f04f 0c00 	mov.w	ip, #0
 800521c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005220:	f8d0 e000 	ldr.w	lr, [r0]
 8005224:	b293      	uxth	r3, r2
 8005226:	ebac 0303 	sub.w	r3, ip, r3
 800522a:	0c12      	lsrs	r2, r2, #16
 800522c:	fa13 f38e 	uxtah	r3, r3, lr
 8005230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005238:	b29b      	uxth	r3, r3
 800523a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800523e:	45c1      	cmp	r9, r8
 8005240:	f840 3b04 	str.w	r3, [r0], #4
 8005244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005248:	d2e8      	bcs.n	800521c <quorem+0xb0>
 800524a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800524e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005252:	b922      	cbnz	r2, 800525e <quorem+0xf2>
 8005254:	3b04      	subs	r3, #4
 8005256:	429d      	cmp	r5, r3
 8005258:	461a      	mov	r2, r3
 800525a:	d30a      	bcc.n	8005272 <quorem+0x106>
 800525c:	613c      	str	r4, [r7, #16]
 800525e:	4630      	mov	r0, r6
 8005260:	b003      	add	sp, #12
 8005262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	3b04      	subs	r3, #4
 800526a:	2a00      	cmp	r2, #0
 800526c:	d1cc      	bne.n	8005208 <quorem+0x9c>
 800526e:	3c01      	subs	r4, #1
 8005270:	e7c7      	b.n	8005202 <quorem+0x96>
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	3b04      	subs	r3, #4
 8005276:	2a00      	cmp	r2, #0
 8005278:	d1f0      	bne.n	800525c <quorem+0xf0>
 800527a:	3c01      	subs	r4, #1
 800527c:	e7eb      	b.n	8005256 <quorem+0xea>
 800527e:	2000      	movs	r0, #0
 8005280:	e7ee      	b.n	8005260 <quorem+0xf4>
 8005282:	0000      	movs	r0, r0
 8005284:	0000      	movs	r0, r0
	...

08005288 <_dtoa_r>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800528e:	b099      	sub	sp, #100	; 0x64
 8005290:	4616      	mov	r6, r2
 8005292:	461f      	mov	r7, r3
 8005294:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005298:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800529c:	4605      	mov	r5, r0
 800529e:	b974      	cbnz	r4, 80052be <_dtoa_r+0x36>
 80052a0:	2010      	movs	r0, #16
 80052a2:	f000 fde3 	bl	8005e6c <malloc>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6268      	str	r0, [r5, #36]	; 0x24
 80052aa:	b920      	cbnz	r0, 80052b6 <_dtoa_r+0x2e>
 80052ac:	4ba8      	ldr	r3, [pc, #672]	; (8005550 <_dtoa_r+0x2c8>)
 80052ae:	21ea      	movs	r1, #234	; 0xea
 80052b0:	48a8      	ldr	r0, [pc, #672]	; (8005554 <_dtoa_r+0x2cc>)
 80052b2:	f001 fb91 	bl	80069d8 <__assert_func>
 80052b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ba:	6004      	str	r4, [r0, #0]
 80052bc:	60c4      	str	r4, [r0, #12]
 80052be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	b151      	cbz	r1, 80052da <_dtoa_r+0x52>
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	604a      	str	r2, [r1, #4]
 80052c8:	2301      	movs	r3, #1
 80052ca:	4093      	lsls	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 fe22 	bl	8005f18 <_Bfree>
 80052d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	1e3b      	subs	r3, r7, #0
 80052dc:	bfb9      	ittee	lt
 80052de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052e2:	9305      	strlt	r3, [sp, #20]
 80052e4:	2300      	movge	r3, #0
 80052e6:	f8c8 3000 	strge.w	r3, [r8]
 80052ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052ee:	4b9a      	ldr	r3, [pc, #616]	; (8005558 <_dtoa_r+0x2d0>)
 80052f0:	bfbc      	itt	lt
 80052f2:	2201      	movlt	r2, #1
 80052f4:	f8c8 2000 	strlt.w	r2, [r8]
 80052f8:	ea33 0309 	bics.w	r3, r3, r9
 80052fc:	d119      	bne.n	8005332 <_dtoa_r+0xaa>
 80052fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005300:	f242 730f 	movw	r3, #9999	; 0x270f
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800530a:	4333      	orrs	r3, r6
 800530c:	f000 8581 	beq.w	8005e12 <_dtoa_r+0xb8a>
 8005310:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005312:	b953      	cbnz	r3, 800532a <_dtoa_r+0xa2>
 8005314:	4b91      	ldr	r3, [pc, #580]	; (800555c <_dtoa_r+0x2d4>)
 8005316:	e022      	b.n	800535e <_dtoa_r+0xd6>
 8005318:	4b91      	ldr	r3, [pc, #580]	; (8005560 <_dtoa_r+0x2d8>)
 800531a:	9308      	str	r3, [sp, #32]
 800531c:	3308      	adds	r3, #8
 800531e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	9808      	ldr	r0, [sp, #32]
 8005324:	b019      	add	sp, #100	; 0x64
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	4b8c      	ldr	r3, [pc, #560]	; (800555c <_dtoa_r+0x2d4>)
 800532c:	9308      	str	r3, [sp, #32]
 800532e:	3303      	adds	r3, #3
 8005330:	e7f5      	b.n	800531e <_dtoa_r+0x96>
 8005332:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005336:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800533a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	f7fb fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005346:	4680      	mov	r8, r0
 8005348:	b158      	cbz	r0, 8005362 <_dtoa_r+0xda>
 800534a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800534c:	2301      	movs	r3, #1
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 855a 	beq.w	8005e0c <_dtoa_r+0xb84>
 8005358:	4882      	ldr	r0, [pc, #520]	; (8005564 <_dtoa_r+0x2dc>)
 800535a:	6018      	str	r0, [r3, #0]
 800535c:	1e43      	subs	r3, r0, #1
 800535e:	9308      	str	r3, [sp, #32]
 8005360:	e7df      	b.n	8005322 <_dtoa_r+0x9a>
 8005362:	ab16      	add	r3, sp, #88	; 0x58
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	ab17      	add	r3, sp, #92	; 0x5c
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	4628      	mov	r0, r5
 800536c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005370:	f001 f8b4 	bl	80064dc <__d2b>
 8005374:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005378:	4682      	mov	sl, r0
 800537a:	2c00      	cmp	r4, #0
 800537c:	d07e      	beq.n	800547c <_dtoa_r+0x1f4>
 800537e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005380:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800538c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005390:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005394:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005398:	4b73      	ldr	r3, [pc, #460]	; (8005568 <_dtoa_r+0x2e0>)
 800539a:	2200      	movs	r2, #0
 800539c:	f7fa ff74 	bl	8000288 <__aeabi_dsub>
 80053a0:	a365      	add	r3, pc, #404	; (adr r3, 8005538 <_dtoa_r+0x2b0>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f927 	bl	80005f8 <__aeabi_dmul>
 80053aa:	a365      	add	r3, pc, #404	; (adr r3, 8005540 <_dtoa_r+0x2b8>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fa ff6c 	bl	800028c <__adddf3>
 80053b4:	4606      	mov	r6, r0
 80053b6:	4620      	mov	r0, r4
 80053b8:	460f      	mov	r7, r1
 80053ba:	f7fb f8b3 	bl	8000524 <__aeabi_i2d>
 80053be:	a362      	add	r3, pc, #392	; (adr r3, 8005548 <_dtoa_r+0x2c0>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fb f918 	bl	80005f8 <__aeabi_dmul>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fa ff5c 	bl	800028c <__adddf3>
 80053d4:	4606      	mov	r6, r0
 80053d6:	460f      	mov	r7, r1
 80053d8:	f7fb fbbe 	bl	8000b58 <__aeabi_d2iz>
 80053dc:	2200      	movs	r2, #0
 80053de:	4681      	mov	r9, r0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4630      	mov	r0, r6
 80053e4:	4639      	mov	r1, r7
 80053e6:	f7fb fb79 	bl	8000adc <__aeabi_dcmplt>
 80053ea:	b148      	cbz	r0, 8005400 <_dtoa_r+0x178>
 80053ec:	4648      	mov	r0, r9
 80053ee:	f7fb f899 	bl	8000524 <__aeabi_i2d>
 80053f2:	4632      	mov	r2, r6
 80053f4:	463b      	mov	r3, r7
 80053f6:	f7fb fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80053fa:	b908      	cbnz	r0, 8005400 <_dtoa_r+0x178>
 80053fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8005400:	f1b9 0f16 	cmp.w	r9, #22
 8005404:	d857      	bhi.n	80054b6 <_dtoa_r+0x22e>
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <_dtoa_r+0x2e4>)
 8005408:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005414:	f7fb fb62 	bl	8000adc <__aeabi_dcmplt>
 8005418:	2800      	cmp	r0, #0
 800541a:	d04e      	beq.n	80054ba <_dtoa_r+0x232>
 800541c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005420:	2300      	movs	r3, #0
 8005422:	930f      	str	r3, [sp, #60]	; 0x3c
 8005424:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005426:	1b1c      	subs	r4, r3, r4
 8005428:	1e63      	subs	r3, r4, #1
 800542a:	9309      	str	r3, [sp, #36]	; 0x24
 800542c:	bf45      	ittet	mi
 800542e:	f1c4 0301 	rsbmi	r3, r4, #1
 8005432:	9306      	strmi	r3, [sp, #24]
 8005434:	2300      	movpl	r3, #0
 8005436:	2300      	movmi	r3, #0
 8005438:	bf4c      	ite	mi
 800543a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800543c:	9306      	strpl	r3, [sp, #24]
 800543e:	f1b9 0f00 	cmp.w	r9, #0
 8005442:	db3c      	blt.n	80054be <_dtoa_r+0x236>
 8005444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005446:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800544a:	444b      	add	r3, r9
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	2300      	movs	r3, #0
 8005450:	930a      	str	r3, [sp, #40]	; 0x28
 8005452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005454:	2b09      	cmp	r3, #9
 8005456:	f200 808d 	bhi.w	8005574 <_dtoa_r+0x2ec>
 800545a:	2b05      	cmp	r3, #5
 800545c:	bfc4      	itt	gt
 800545e:	3b04      	subgt	r3, #4
 8005460:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005464:	f1a3 0302 	sub.w	r3, r3, #2
 8005468:	bfcc      	ite	gt
 800546a:	2400      	movgt	r4, #0
 800546c:	2401      	movle	r4, #1
 800546e:	2b03      	cmp	r3, #3
 8005470:	f200 808c 	bhi.w	800558c <_dtoa_r+0x304>
 8005474:	e8df f003 	tbb	[pc, r3]
 8005478:	5b4d4f2d 	.word	0x5b4d4f2d
 800547c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005480:	441c      	add	r4, r3
 8005482:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005486:	2b20      	cmp	r3, #32
 8005488:	bfc3      	ittte	gt
 800548a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800548e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005492:	fa09 f303 	lslgt.w	r3, r9, r3
 8005496:	f1c3 0320 	rsble	r3, r3, #32
 800549a:	bfc6      	itte	gt
 800549c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054a0:	4318      	orrgt	r0, r3
 80054a2:	fa06 f003 	lslle.w	r0, r6, r3
 80054a6:	f7fb f82d 	bl	8000504 <__aeabi_ui2d>
 80054aa:	2301      	movs	r3, #1
 80054ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054b0:	3c01      	subs	r4, #1
 80054b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80054b4:	e770      	b.n	8005398 <_dtoa_r+0x110>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e7b3      	b.n	8005422 <_dtoa_r+0x19a>
 80054ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80054bc:	e7b2      	b.n	8005424 <_dtoa_r+0x19c>
 80054be:	9b06      	ldr	r3, [sp, #24]
 80054c0:	eba3 0309 	sub.w	r3, r3, r9
 80054c4:	9306      	str	r3, [sp, #24]
 80054c6:	f1c9 0300 	rsb	r3, r9, #0
 80054ca:	930a      	str	r3, [sp, #40]	; 0x28
 80054cc:	2300      	movs	r3, #0
 80054ce:	930e      	str	r3, [sp, #56]	; 0x38
 80054d0:	e7bf      	b.n	8005452 <_dtoa_r+0x1ca>
 80054d2:	2300      	movs	r3, #0
 80054d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dc5a      	bgt.n	8005592 <_dtoa_r+0x30a>
 80054dc:	f04f 0b01 	mov.w	fp, #1
 80054e0:	f8cd b008 	str.w	fp, [sp, #8]
 80054e4:	465b      	mov	r3, fp
 80054e6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80054ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054ec:	2200      	movs	r2, #0
 80054ee:	6042      	str	r2, [r0, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	f102 0614 	add.w	r6, r2, #20
 80054f6:	429e      	cmp	r6, r3
 80054f8:	6841      	ldr	r1, [r0, #4]
 80054fa:	d950      	bls.n	800559e <_dtoa_r+0x316>
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fccb 	bl	8005e98 <_Balloc>
 8005502:	9008      	str	r0, [sp, #32]
 8005504:	2800      	cmp	r0, #0
 8005506:	d14e      	bne.n	80055a6 <_dtoa_r+0x31e>
 8005508:	4b19      	ldr	r3, [pc, #100]	; (8005570 <_dtoa_r+0x2e8>)
 800550a:	4602      	mov	r2, r0
 800550c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005510:	e6ce      	b.n	80052b0 <_dtoa_r+0x28>
 8005512:	2301      	movs	r3, #1
 8005514:	e7de      	b.n	80054d4 <_dtoa_r+0x24c>
 8005516:	2300      	movs	r3, #0
 8005518:	930b      	str	r3, [sp, #44]	; 0x2c
 800551a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800551c:	eb09 0b03 	add.w	fp, r9, r3
 8005520:	f10b 0301 	add.w	r3, fp, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	bfb8      	it	lt
 800552a:	2301      	movlt	r3, #1
 800552c:	e7dd      	b.n	80054ea <_dtoa_r+0x262>
 800552e:	2301      	movs	r3, #1
 8005530:	e7f2      	b.n	8005518 <_dtoa_r+0x290>
 8005532:	bf00      	nop
 8005534:	f3af 8000 	nop.w
 8005538:	636f4361 	.word	0x636f4361
 800553c:	3fd287a7 	.word	0x3fd287a7
 8005540:	8b60c8b3 	.word	0x8b60c8b3
 8005544:	3fc68a28 	.word	0x3fc68a28
 8005548:	509f79fb 	.word	0x509f79fb
 800554c:	3fd34413 	.word	0x3fd34413
 8005550:	08007619 	.word	0x08007619
 8005554:	08007630 	.word	0x08007630
 8005558:	7ff00000 	.word	0x7ff00000
 800555c:	08007615 	.word	0x08007615
 8005560:	0800760c 	.word	0x0800760c
 8005564:	080075e9 	.word	0x080075e9
 8005568:	3ff80000 	.word	0x3ff80000
 800556c:	08007728 	.word	0x08007728
 8005570:	0800768f 	.word	0x0800768f
 8005574:	2401      	movs	r4, #1
 8005576:	2300      	movs	r3, #0
 8005578:	9322      	str	r3, [sp, #136]	; 0x88
 800557a:	940b      	str	r4, [sp, #44]	; 0x2c
 800557c:	f04f 3bff 	mov.w	fp, #4294967295
 8005580:	2200      	movs	r2, #0
 8005582:	f8cd b008 	str.w	fp, [sp, #8]
 8005586:	2312      	movs	r3, #18
 8005588:	9223      	str	r2, [sp, #140]	; 0x8c
 800558a:	e7ae      	b.n	80054ea <_dtoa_r+0x262>
 800558c:	2301      	movs	r3, #1
 800558e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005590:	e7f4      	b.n	800557c <_dtoa_r+0x2f4>
 8005592:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005596:	f8cd b008 	str.w	fp, [sp, #8]
 800559a:	465b      	mov	r3, fp
 800559c:	e7a5      	b.n	80054ea <_dtoa_r+0x262>
 800559e:	3101      	adds	r1, #1
 80055a0:	6041      	str	r1, [r0, #4]
 80055a2:	0052      	lsls	r2, r2, #1
 80055a4:	e7a5      	b.n	80054f2 <_dtoa_r+0x26a>
 80055a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055a8:	9a08      	ldr	r2, [sp, #32]
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	2b0e      	cmp	r3, #14
 80055b0:	f200 80a8 	bhi.w	8005704 <_dtoa_r+0x47c>
 80055b4:	2c00      	cmp	r4, #0
 80055b6:	f000 80a5 	beq.w	8005704 <_dtoa_r+0x47c>
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	dd34      	ble.n	800562a <_dtoa_r+0x3a2>
 80055c0:	4a9a      	ldr	r2, [pc, #616]	; (800582c <_dtoa_r+0x5a4>)
 80055c2:	f009 030f 	and.w	r3, r9, #15
 80055c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ce:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80055da:	d016      	beq.n	800560a <_dtoa_r+0x382>
 80055dc:	4b94      	ldr	r3, [pc, #592]	; (8005830 <_dtoa_r+0x5a8>)
 80055de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055e6:	f7fb f931 	bl	800084c <__aeabi_ddiv>
 80055ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055ee:	f004 040f 	and.w	r4, r4, #15
 80055f2:	2703      	movs	r7, #3
 80055f4:	4e8e      	ldr	r6, [pc, #568]	; (8005830 <_dtoa_r+0x5a8>)
 80055f6:	b954      	cbnz	r4, 800560e <_dtoa_r+0x386>
 80055f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005600:	f7fb f924 	bl	800084c <__aeabi_ddiv>
 8005604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005608:	e029      	b.n	800565e <_dtoa_r+0x3d6>
 800560a:	2702      	movs	r7, #2
 800560c:	e7f2      	b.n	80055f4 <_dtoa_r+0x36c>
 800560e:	07e1      	lsls	r1, r4, #31
 8005610:	d508      	bpl.n	8005624 <_dtoa_r+0x39c>
 8005612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005616:	e9d6 2300 	ldrd	r2, r3, [r6]
 800561a:	f7fa ffed 	bl	80005f8 <__aeabi_dmul>
 800561e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005622:	3701      	adds	r7, #1
 8005624:	1064      	asrs	r4, r4, #1
 8005626:	3608      	adds	r6, #8
 8005628:	e7e5      	b.n	80055f6 <_dtoa_r+0x36e>
 800562a:	f000 80a5 	beq.w	8005778 <_dtoa_r+0x4f0>
 800562e:	f1c9 0400 	rsb	r4, r9, #0
 8005632:	4b7e      	ldr	r3, [pc, #504]	; (800582c <_dtoa_r+0x5a4>)
 8005634:	4e7e      	ldr	r6, [pc, #504]	; (8005830 <_dtoa_r+0x5a8>)
 8005636:	f004 020f 	and.w	r2, r4, #15
 800563a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005646:	f7fa ffd7 	bl	80005f8 <__aeabi_dmul>
 800564a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800564e:	1124      	asrs	r4, r4, #4
 8005650:	2300      	movs	r3, #0
 8005652:	2702      	movs	r7, #2
 8005654:	2c00      	cmp	r4, #0
 8005656:	f040 8084 	bne.w	8005762 <_dtoa_r+0x4da>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1d2      	bne.n	8005604 <_dtoa_r+0x37c>
 800565e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 808b 	beq.w	800577c <_dtoa_r+0x4f4>
 8005666:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800566a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800566e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005672:	4b70      	ldr	r3, [pc, #448]	; (8005834 <_dtoa_r+0x5ac>)
 8005674:	2200      	movs	r2, #0
 8005676:	f7fb fa31 	bl	8000adc <__aeabi_dcmplt>
 800567a:	2800      	cmp	r0, #0
 800567c:	d07e      	beq.n	800577c <_dtoa_r+0x4f4>
 800567e:	9b02      	ldr	r3, [sp, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d07b      	beq.n	800577c <_dtoa_r+0x4f4>
 8005684:	f1bb 0f00 	cmp.w	fp, #0
 8005688:	dd38      	ble.n	80056fc <_dtoa_r+0x474>
 800568a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800568e:	4b6a      	ldr	r3, [pc, #424]	; (8005838 <_dtoa_r+0x5b0>)
 8005690:	2200      	movs	r2, #0
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800569a:	f109 38ff 	add.w	r8, r9, #4294967295
 800569e:	3701      	adds	r7, #1
 80056a0:	465c      	mov	r4, fp
 80056a2:	4638      	mov	r0, r7
 80056a4:	f7fa ff3e 	bl	8000524 <__aeabi_i2d>
 80056a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ac:	f7fa ffa4 	bl	80005f8 <__aeabi_dmul>
 80056b0:	4b62      	ldr	r3, [pc, #392]	; (800583c <_dtoa_r+0x5b4>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	f7fa fdea 	bl	800028c <__adddf3>
 80056b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056c0:	9611      	str	r6, [sp, #68]	; 0x44
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d15d      	bne.n	8005782 <_dtoa_r+0x4fa>
 80056c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ca:	4b5d      	ldr	r3, [pc, #372]	; (8005840 <_dtoa_r+0x5b8>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	f7fa fddb 	bl	8000288 <__aeabi_dsub>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056dc:	4633      	mov	r3, r6
 80056de:	f7fb fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f040 829e 	bne.w	8005c24 <_dtoa_r+0x99c>
 80056e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056f2:	f7fb f9f3 	bl	8000adc <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f040 8292 	bne.w	8005c20 <_dtoa_r+0x998>
 80056fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005700:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005706:	2b00      	cmp	r3, #0
 8005708:	f2c0 8153 	blt.w	80059b2 <_dtoa_r+0x72a>
 800570c:	f1b9 0f0e 	cmp.w	r9, #14
 8005710:	f300 814f 	bgt.w	80059b2 <_dtoa_r+0x72a>
 8005714:	4b45      	ldr	r3, [pc, #276]	; (800582c <_dtoa_r+0x5a4>)
 8005716:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800571a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800571e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005724:	2b00      	cmp	r3, #0
 8005726:	f280 80db 	bge.w	80058e0 <_dtoa_r+0x658>
 800572a:	9b02      	ldr	r3, [sp, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f300 80d7 	bgt.w	80058e0 <_dtoa_r+0x658>
 8005732:	f040 8274 	bne.w	8005c1e <_dtoa_r+0x996>
 8005736:	4b42      	ldr	r3, [pc, #264]	; (8005840 <_dtoa_r+0x5b8>)
 8005738:	2200      	movs	r2, #0
 800573a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005746:	f7fb f9dd 	bl	8000b04 <__aeabi_dcmpge>
 800574a:	9c02      	ldr	r4, [sp, #8]
 800574c:	4626      	mov	r6, r4
 800574e:	2800      	cmp	r0, #0
 8005750:	f040 824a 	bne.w	8005be8 <_dtoa_r+0x960>
 8005754:	9f08      	ldr	r7, [sp, #32]
 8005756:	2331      	movs	r3, #49	; 0x31
 8005758:	f807 3b01 	strb.w	r3, [r7], #1
 800575c:	f109 0901 	add.w	r9, r9, #1
 8005760:	e246      	b.n	8005bf0 <_dtoa_r+0x968>
 8005762:	07e2      	lsls	r2, r4, #31
 8005764:	d505      	bpl.n	8005772 <_dtoa_r+0x4ea>
 8005766:	e9d6 2300 	ldrd	r2, r3, [r6]
 800576a:	f7fa ff45 	bl	80005f8 <__aeabi_dmul>
 800576e:	3701      	adds	r7, #1
 8005770:	2301      	movs	r3, #1
 8005772:	1064      	asrs	r4, r4, #1
 8005774:	3608      	adds	r6, #8
 8005776:	e76d      	b.n	8005654 <_dtoa_r+0x3cc>
 8005778:	2702      	movs	r7, #2
 800577a:	e770      	b.n	800565e <_dtoa_r+0x3d6>
 800577c:	9c02      	ldr	r4, [sp, #8]
 800577e:	46c8      	mov	r8, r9
 8005780:	e78f      	b.n	80056a2 <_dtoa_r+0x41a>
 8005782:	9908      	ldr	r1, [sp, #32]
 8005784:	4b29      	ldr	r3, [pc, #164]	; (800582c <_dtoa_r+0x5a4>)
 8005786:	4421      	add	r1, r4
 8005788:	9112      	str	r1, [sp, #72]	; 0x48
 800578a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800578c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005790:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005794:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005798:	2900      	cmp	r1, #0
 800579a:	d055      	beq.n	8005848 <_dtoa_r+0x5c0>
 800579c:	4929      	ldr	r1, [pc, #164]	; (8005844 <_dtoa_r+0x5bc>)
 800579e:	2000      	movs	r0, #0
 80057a0:	f7fb f854 	bl	800084c <__aeabi_ddiv>
 80057a4:	463b      	mov	r3, r7
 80057a6:	4632      	mov	r2, r6
 80057a8:	f7fa fd6e 	bl	8000288 <__aeabi_dsub>
 80057ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057b0:	9f08      	ldr	r7, [sp, #32]
 80057b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b6:	f7fb f9cf 	bl	8000b58 <__aeabi_d2iz>
 80057ba:	4604      	mov	r4, r0
 80057bc:	f7fa feb2 	bl	8000524 <__aeabi_i2d>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c8:	f7fa fd5e 	bl	8000288 <__aeabi_dsub>
 80057cc:	3430      	adds	r4, #48	; 0x30
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057d6:	f807 4b01 	strb.w	r4, [r7], #1
 80057da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057de:	f7fb f97d 	bl	8000adc <__aeabi_dcmplt>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d174      	bne.n	80058d0 <_dtoa_r+0x648>
 80057e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ea:	4912      	ldr	r1, [pc, #72]	; (8005834 <_dtoa_r+0x5ac>)
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fa fd4b 	bl	8000288 <__aeabi_dsub>
 80057f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057f6:	f7fb f971 	bl	8000adc <__aeabi_dcmplt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 80b6 	bne.w	800596c <_dtoa_r+0x6e4>
 8005800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005802:	429f      	cmp	r7, r3
 8005804:	f43f af7a 	beq.w	80056fc <_dtoa_r+0x474>
 8005808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <_dtoa_r+0x5b0>)
 800580e:	2200      	movs	r2, #0
 8005810:	f7fa fef2 	bl	80005f8 <__aeabi_dmul>
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <_dtoa_r+0x5b0>)
 8005816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800581a:	2200      	movs	r2, #0
 800581c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005820:	f7fa feea 	bl	80005f8 <__aeabi_dmul>
 8005824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005828:	e7c3      	b.n	80057b2 <_dtoa_r+0x52a>
 800582a:	bf00      	nop
 800582c:	08007728 	.word	0x08007728
 8005830:	08007700 	.word	0x08007700
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	40240000 	.word	0x40240000
 800583c:	401c0000 	.word	0x401c0000
 8005840:	40140000 	.word	0x40140000
 8005844:	3fe00000 	.word	0x3fe00000
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f7fa fed4 	bl	80005f8 <__aeabi_dmul>
 8005850:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005856:	9c08      	ldr	r4, [sp, #32]
 8005858:	9314      	str	r3, [sp, #80]	; 0x50
 800585a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585e:	f7fb f97b 	bl	8000b58 <__aeabi_d2iz>
 8005862:	9015      	str	r0, [sp, #84]	; 0x54
 8005864:	f7fa fe5e 	bl	8000524 <__aeabi_i2d>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005870:	f7fa fd0a 	bl	8000288 <__aeabi_dsub>
 8005874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005876:	3330      	adds	r3, #48	; 0x30
 8005878:	f804 3b01 	strb.w	r3, [r4], #1
 800587c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587e:	429c      	cmp	r4, r3
 8005880:	4606      	mov	r6, r0
 8005882:	460f      	mov	r7, r1
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	d124      	bne.n	80058d4 <_dtoa_r+0x64c>
 800588a:	4bb2      	ldr	r3, [pc, #712]	; (8005b54 <_dtoa_r+0x8cc>)
 800588c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005890:	f7fa fcfc 	bl	800028c <__adddf3>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fb f93c 	bl	8000b18 <__aeabi_dcmpgt>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d162      	bne.n	800596a <_dtoa_r+0x6e2>
 80058a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058a8:	49aa      	ldr	r1, [pc, #680]	; (8005b54 <_dtoa_r+0x8cc>)
 80058aa:	2000      	movs	r0, #0
 80058ac:	f7fa fcec 	bl	8000288 <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fb f910 	bl	8000adc <__aeabi_dcmplt>
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f af1d 	beq.w	80056fc <_dtoa_r+0x474>
 80058c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058c4:	1e7b      	subs	r3, r7, #1
 80058c6:	9314      	str	r3, [sp, #80]	; 0x50
 80058c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d0f8      	beq.n	80058c2 <_dtoa_r+0x63a>
 80058d0:	46c1      	mov	r9, r8
 80058d2:	e03a      	b.n	800594a <_dtoa_r+0x6c2>
 80058d4:	4ba0      	ldr	r3, [pc, #640]	; (8005b58 <_dtoa_r+0x8d0>)
 80058d6:	f7fa fe8f 	bl	80005f8 <__aeabi_dmul>
 80058da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058de:	e7bc      	b.n	800585a <_dtoa_r+0x5d2>
 80058e0:	9f08      	ldr	r7, [sp, #32]
 80058e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ea:	f7fa ffaf 	bl	800084c <__aeabi_ddiv>
 80058ee:	f7fb f933 	bl	8000b58 <__aeabi_d2iz>
 80058f2:	4604      	mov	r4, r0
 80058f4:	f7fa fe16 	bl	8000524 <__aeabi_i2d>
 80058f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058fc:	f7fa fe7c 	bl	80005f8 <__aeabi_dmul>
 8005900:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005904:	460b      	mov	r3, r1
 8005906:	4602      	mov	r2, r0
 8005908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590c:	f7fa fcbc 	bl	8000288 <__aeabi_dsub>
 8005910:	f807 6b01 	strb.w	r6, [r7], #1
 8005914:	9e08      	ldr	r6, [sp, #32]
 8005916:	9b02      	ldr	r3, [sp, #8]
 8005918:	1bbe      	subs	r6, r7, r6
 800591a:	42b3      	cmp	r3, r6
 800591c:	d13a      	bne.n	8005994 <_dtoa_r+0x70c>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	f7fa fcb3 	bl	800028c <__adddf3>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800592e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005932:	f7fb f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 8005936:	bb58      	cbnz	r0, 8005990 <_dtoa_r+0x708>
 8005938:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800593c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005940:	f7fb f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005944:	b108      	cbz	r0, 800594a <_dtoa_r+0x6c2>
 8005946:	07e1      	lsls	r1, r4, #31
 8005948:	d422      	bmi.n	8005990 <_dtoa_r+0x708>
 800594a:	4628      	mov	r0, r5
 800594c:	4651      	mov	r1, sl
 800594e:	f000 fae3 	bl	8005f18 <_Bfree>
 8005952:	2300      	movs	r3, #0
 8005954:	703b      	strb	r3, [r7, #0]
 8005956:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005958:	f109 0001 	add.w	r0, r9, #1
 800595c:	6018      	str	r0, [r3, #0]
 800595e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005960:	2b00      	cmp	r3, #0
 8005962:	f43f acde 	beq.w	8005322 <_dtoa_r+0x9a>
 8005966:	601f      	str	r7, [r3, #0]
 8005968:	e4db      	b.n	8005322 <_dtoa_r+0x9a>
 800596a:	4627      	mov	r7, r4
 800596c:	463b      	mov	r3, r7
 800596e:	461f      	mov	r7, r3
 8005970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005974:	2a39      	cmp	r2, #57	; 0x39
 8005976:	d107      	bne.n	8005988 <_dtoa_r+0x700>
 8005978:	9a08      	ldr	r2, [sp, #32]
 800597a:	429a      	cmp	r2, r3
 800597c:	d1f7      	bne.n	800596e <_dtoa_r+0x6e6>
 800597e:	9908      	ldr	r1, [sp, #32]
 8005980:	2230      	movs	r2, #48	; 0x30
 8005982:	f108 0801 	add.w	r8, r8, #1
 8005986:	700a      	strb	r2, [r1, #0]
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	3201      	adds	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e79f      	b.n	80058d0 <_dtoa_r+0x648>
 8005990:	46c8      	mov	r8, r9
 8005992:	e7eb      	b.n	800596c <_dtoa_r+0x6e4>
 8005994:	4b70      	ldr	r3, [pc, #448]	; (8005b58 <_dtoa_r+0x8d0>)
 8005996:	2200      	movs	r2, #0
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	f7fb f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d098      	beq.n	80058e2 <_dtoa_r+0x65a>
 80059b0:	e7cb      	b.n	800594a <_dtoa_r+0x6c2>
 80059b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	f000 80d1 	beq.w	8005b5c <_dtoa_r+0x8d4>
 80059ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059bc:	2a01      	cmp	r2, #1
 80059be:	f300 80af 	bgt.w	8005b20 <_dtoa_r+0x898>
 80059c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 80a7 	beq.w	8005b18 <_dtoa_r+0x890>
 80059ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059d0:	9f06      	ldr	r7, [sp, #24]
 80059d2:	9a06      	ldr	r2, [sp, #24]
 80059d4:	441a      	add	r2, r3
 80059d6:	9206      	str	r2, [sp, #24]
 80059d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059da:	2101      	movs	r1, #1
 80059dc:	441a      	add	r2, r3
 80059de:	4628      	mov	r0, r5
 80059e0:	9209      	str	r2, [sp, #36]	; 0x24
 80059e2:	f000 fb53 	bl	800608c <__i2b>
 80059e6:	4606      	mov	r6, r0
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	dd0c      	ble.n	8005a06 <_dtoa_r+0x77e>
 80059ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd09      	ble.n	8005a06 <_dtoa_r+0x77e>
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	9a06      	ldr	r2, [sp, #24]
 80059f6:	bfa8      	it	ge
 80059f8:	463b      	movge	r3, r7
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	9206      	str	r2, [sp, #24]
 80059fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a00:	1aff      	subs	r7, r7, r3
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a08:	b1f3      	cbz	r3, 8005a48 <_dtoa_r+0x7c0>
 8005a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80a9 	beq.w	8005b64 <_dtoa_r+0x8dc>
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	dd10      	ble.n	8005a38 <_dtoa_r+0x7b0>
 8005a16:	4631      	mov	r1, r6
 8005a18:	4622      	mov	r2, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 fbf2 	bl	8006204 <__pow5mult>
 8005a20:	4652      	mov	r2, sl
 8005a22:	4601      	mov	r1, r0
 8005a24:	4606      	mov	r6, r0
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 fb46 	bl	80060b8 <__multiply>
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	4680      	mov	r8, r0
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fa71 	bl	8005f18 <_Bfree>
 8005a36:	46c2      	mov	sl, r8
 8005a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3a:	1b1a      	subs	r2, r3, r4
 8005a3c:	d004      	beq.n	8005a48 <_dtoa_r+0x7c0>
 8005a3e:	4651      	mov	r1, sl
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 fbdf 	bl	8006204 <__pow5mult>
 8005a46:	4682      	mov	sl, r0
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fb1e 	bl	800608c <__i2b>
 8005a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	4604      	mov	r4, r0
 8005a56:	f340 8087 	ble.w	8005b68 <_dtoa_r+0x8e0>
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 fbd0 	bl	8006204 <__pow5mult>
 8005a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	f340 8080 	ble.w	8005b6e <_dtoa_r+0x8e6>
 8005a6e:	f04f 0800 	mov.w	r8, #0
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a78:	6918      	ldr	r0, [r3, #16]
 8005a7a:	f000 fab9 	bl	8005ff0 <__hi0bits>
 8005a7e:	f1c0 0020 	rsb	r0, r0, #32
 8005a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a84:	4418      	add	r0, r3
 8005a86:	f010 001f 	ands.w	r0, r0, #31
 8005a8a:	f000 8092 	beq.w	8005bb2 <_dtoa_r+0x92a>
 8005a8e:	f1c0 0320 	rsb	r3, r0, #32
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	f340 808a 	ble.w	8005bac <_dtoa_r+0x924>
 8005a98:	f1c0 001c 	rsb	r0, r0, #28
 8005a9c:	9b06      	ldr	r3, [sp, #24]
 8005a9e:	4403      	add	r3, r0
 8005aa0:	9306      	str	r3, [sp, #24]
 8005aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa4:	4403      	add	r3, r0
 8005aa6:	4407      	add	r7, r0
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	9b06      	ldr	r3, [sp, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd05      	ble.n	8005abc <_dtoa_r+0x834>
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fbff 	bl	80062b8 <__lshift>
 8005aba:	4682      	mov	sl, r0
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dd05      	ble.n	8005ace <_dtoa_r+0x846>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fbf6 	bl	80062b8 <__lshift>
 8005acc:	4604      	mov	r4, r0
 8005ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d070      	beq.n	8005bb6 <_dtoa_r+0x92e>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	f000 fc5a 	bl	8006390 <__mcmp>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	da6a      	bge.n	8005bb6 <_dtoa_r+0x92e>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4651      	mov	r1, sl
 8005ae4:	220a      	movs	r2, #10
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fa38 	bl	8005f5c <__multadd>
 8005aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aee:	f109 39ff 	add.w	r9, r9, #4294967295
 8005af2:	4682      	mov	sl, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8193 	beq.w	8005e20 <_dtoa_r+0xb98>
 8005afa:	4631      	mov	r1, r6
 8005afc:	2300      	movs	r3, #0
 8005afe:	220a      	movs	r2, #10
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 fa2b 	bl	8005f5c <__multadd>
 8005b06:	f1bb 0f00 	cmp.w	fp, #0
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	f300 8093 	bgt.w	8005c36 <_dtoa_r+0x9ae>
 8005b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	dc57      	bgt.n	8005bc6 <_dtoa_r+0x93e>
 8005b16:	e08e      	b.n	8005c36 <_dtoa_r+0x9ae>
 8005b18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b1e:	e756      	b.n	80059ce <_dtoa_r+0x746>
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	1e5c      	subs	r4, r3, #1
 8005b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	bfbf      	itttt	lt
 8005b2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b2e:	1ae2      	sublt	r2, r4, r3
 8005b30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b32:	bfb6      	itet	lt
 8005b34:	189b      	addlt	r3, r3, r2
 8005b36:	1b1c      	subge	r4, r3, r4
 8005b38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b3a:	9b02      	ldr	r3, [sp, #8]
 8005b3c:	bfb8      	it	lt
 8005b3e:	2400      	movlt	r4, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bfb9      	ittee	lt
 8005b44:	9b06      	ldrlt	r3, [sp, #24]
 8005b46:	9a02      	ldrlt	r2, [sp, #8]
 8005b48:	9f06      	ldrge	r7, [sp, #24]
 8005b4a:	9b02      	ldrge	r3, [sp, #8]
 8005b4c:	bfbc      	itt	lt
 8005b4e:	1a9f      	sublt	r7, r3, r2
 8005b50:	2300      	movlt	r3, #0
 8005b52:	e73e      	b.n	80059d2 <_dtoa_r+0x74a>
 8005b54:	3fe00000 	.word	0x3fe00000
 8005b58:	40240000 	.word	0x40240000
 8005b5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b5e:	9f06      	ldr	r7, [sp, #24]
 8005b60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b62:	e741      	b.n	80059e8 <_dtoa_r+0x760>
 8005b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b66:	e76a      	b.n	8005a3e <_dtoa_r+0x7b6>
 8005b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	dc19      	bgt.n	8005ba2 <_dtoa_r+0x91a>
 8005b6e:	9b04      	ldr	r3, [sp, #16]
 8005b70:	b9bb      	cbnz	r3, 8005ba2 <_dtoa_r+0x91a>
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b78:	b99b      	cbnz	r3, 8005ba2 <_dtoa_r+0x91a>
 8005b7a:	9b05      	ldr	r3, [sp, #20]
 8005b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	0d1b      	lsrs	r3, r3, #20
 8005b82:	051b      	lsls	r3, r3, #20
 8005b84:	b183      	cbz	r3, 8005ba8 <_dtoa_r+0x920>
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	9306      	str	r3, [sp, #24]
 8005b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	9309      	str	r3, [sp, #36]	; 0x24
 8005b92:	f04f 0801 	mov.w	r8, #1
 8005b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af6a 	bne.w	8005a72 <_dtoa_r+0x7ea>
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	e76f      	b.n	8005a82 <_dtoa_r+0x7fa>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	e7f6      	b.n	8005b96 <_dtoa_r+0x90e>
 8005ba8:	4698      	mov	r8, r3
 8005baa:	e7f4      	b.n	8005b96 <_dtoa_r+0x90e>
 8005bac:	f43f af7d 	beq.w	8005aaa <_dtoa_r+0x822>
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	301c      	adds	r0, #28
 8005bb4:	e772      	b.n	8005a9c <_dtoa_r+0x814>
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc36      	bgt.n	8005c2a <_dtoa_r+0x9a2>
 8005bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	dd33      	ble.n	8005c2a <_dtoa_r+0x9a2>
 8005bc2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bc6:	f1bb 0f00 	cmp.w	fp, #0
 8005bca:	d10d      	bne.n	8005be8 <_dtoa_r+0x960>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	465b      	mov	r3, fp
 8005bd0:	2205      	movs	r2, #5
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f9c2 	bl	8005f5c <__multadd>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4650      	mov	r0, sl
 8005bde:	f000 fbd7 	bl	8006390 <__mcmp>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f73f adb6 	bgt.w	8005754 <_dtoa_r+0x4cc>
 8005be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bea:	9f08      	ldr	r7, [sp, #32]
 8005bec:	ea6f 0903 	mvn.w	r9, r3
 8005bf0:	f04f 0800 	mov.w	r8, #0
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f98e 	bl	8005f18 <_Bfree>
 8005bfc:	2e00      	cmp	r6, #0
 8005bfe:	f43f aea4 	beq.w	800594a <_dtoa_r+0x6c2>
 8005c02:	f1b8 0f00 	cmp.w	r8, #0
 8005c06:	d005      	beq.n	8005c14 <_dtoa_r+0x98c>
 8005c08:	45b0      	cmp	r8, r6
 8005c0a:	d003      	beq.n	8005c14 <_dtoa_r+0x98c>
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f982 	bl	8005f18 <_Bfree>
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 f97e 	bl	8005f18 <_Bfree>
 8005c1c:	e695      	b.n	800594a <_dtoa_r+0x6c2>
 8005c1e:	2400      	movs	r4, #0
 8005c20:	4626      	mov	r6, r4
 8005c22:	e7e1      	b.n	8005be8 <_dtoa_r+0x960>
 8005c24:	46c1      	mov	r9, r8
 8005c26:	4626      	mov	r6, r4
 8005c28:	e594      	b.n	8005754 <_dtoa_r+0x4cc>
 8005c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80fc 	beq.w	8005e2e <_dtoa_r+0xba6>
 8005c36:	2f00      	cmp	r7, #0
 8005c38:	dd05      	ble.n	8005c46 <_dtoa_r+0x9be>
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fb3a 	bl	80062b8 <__lshift>
 8005c44:	4606      	mov	r6, r0
 8005c46:	f1b8 0f00 	cmp.w	r8, #0
 8005c4a:	d05c      	beq.n	8005d06 <_dtoa_r+0xa7e>
 8005c4c:	6871      	ldr	r1, [r6, #4]
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f922 	bl	8005e98 <_Balloc>
 8005c54:	4607      	mov	r7, r0
 8005c56:	b928      	cbnz	r0, 8005c64 <_dtoa_r+0x9dc>
 8005c58:	4b7f      	ldr	r3, [pc, #508]	; (8005e58 <_dtoa_r+0xbd0>)
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c60:	f7ff bb26 	b.w	80052b0 <_dtoa_r+0x28>
 8005c64:	6932      	ldr	r2, [r6, #16]
 8005c66:	3202      	adds	r2, #2
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	f106 010c 	add.w	r1, r6, #12
 8005c6e:	300c      	adds	r0, #12
 8005c70:	f000 f904 	bl	8005e7c <memcpy>
 8005c74:	2201      	movs	r2, #1
 8005c76:	4639      	mov	r1, r7
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 fb1d 	bl	80062b8 <__lshift>
 8005c7e:	9b08      	ldr	r3, [sp, #32]
 8005c80:	3301      	adds	r3, #1
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	445b      	add	r3, fp
 8005c88:	930a      	str	r3, [sp, #40]	; 0x28
 8005c8a:	9b04      	ldr	r3, [sp, #16]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	46b0      	mov	r8, r6
 8005c92:	9309      	str	r3, [sp, #36]	; 0x24
 8005c94:	4606      	mov	r6, r0
 8005c96:	9b02      	ldr	r3, [sp, #8]
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005ca0:	f7ff fa64 	bl	800516c <quorem>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	3330      	adds	r3, #48	; 0x30
 8005ca8:	9004      	str	r0, [sp, #16]
 8005caa:	4641      	mov	r1, r8
 8005cac:	4650      	mov	r0, sl
 8005cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb0:	f000 fb6e 	bl	8006390 <__mcmp>
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	9006      	str	r0, [sp, #24]
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fb84 	bl	80063c8 <__mdiff>
 8005cc0:	68c2      	ldr	r2, [r0, #12]
 8005cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	bb02      	cbnz	r2, 8005d0a <_dtoa_r+0xa82>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4650      	mov	r0, sl
 8005ccc:	f000 fb60 	bl	8006390 <__mcmp>
 8005cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005cdc:	f000 f91c 	bl	8005f18 <_Bfree>
 8005ce0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce4:	9f02      	ldr	r7, [sp, #8]
 8005ce6:	ea43 0102 	orr.w	r1, r3, r2
 8005cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cec:	430b      	orrs	r3, r1
 8005cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf0:	d10d      	bne.n	8005d0e <_dtoa_r+0xa86>
 8005cf2:	2b39      	cmp	r3, #57	; 0x39
 8005cf4:	d027      	beq.n	8005d46 <_dtoa_r+0xabe>
 8005cf6:	9a06      	ldr	r2, [sp, #24]
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	dd01      	ble.n	8005d00 <_dtoa_r+0xa78>
 8005cfc:	9b04      	ldr	r3, [sp, #16]
 8005cfe:	3331      	adds	r3, #49	; 0x31
 8005d00:	f88b 3000 	strb.w	r3, [fp]
 8005d04:	e776      	b.n	8005bf4 <_dtoa_r+0x96c>
 8005d06:	4630      	mov	r0, r6
 8005d08:	e7b9      	b.n	8005c7e <_dtoa_r+0x9f6>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	e7e2      	b.n	8005cd4 <_dtoa_r+0xa4c>
 8005d0e:	9906      	ldr	r1, [sp, #24]
 8005d10:	2900      	cmp	r1, #0
 8005d12:	db04      	blt.n	8005d1e <_dtoa_r+0xa96>
 8005d14:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d16:	4301      	orrs	r1, r0
 8005d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d1a:	4301      	orrs	r1, r0
 8005d1c:	d120      	bne.n	8005d60 <_dtoa_r+0xad8>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	ddee      	ble.n	8005d00 <_dtoa_r+0xa78>
 8005d22:	4651      	mov	r1, sl
 8005d24:	2201      	movs	r2, #1
 8005d26:	4628      	mov	r0, r5
 8005d28:	9302      	str	r3, [sp, #8]
 8005d2a:	f000 fac5 	bl	80062b8 <__lshift>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4682      	mov	sl, r0
 8005d32:	f000 fb2d 	bl	8006390 <__mcmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	dc02      	bgt.n	8005d42 <_dtoa_r+0xaba>
 8005d3c:	d1e0      	bne.n	8005d00 <_dtoa_r+0xa78>
 8005d3e:	07da      	lsls	r2, r3, #31
 8005d40:	d5de      	bpl.n	8005d00 <_dtoa_r+0xa78>
 8005d42:	2b39      	cmp	r3, #57	; 0x39
 8005d44:	d1da      	bne.n	8005cfc <_dtoa_r+0xa74>
 8005d46:	2339      	movs	r3, #57	; 0x39
 8005d48:	f88b 3000 	strb.w	r3, [fp]
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	461f      	mov	r7, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d56:	2a39      	cmp	r2, #57	; 0x39
 8005d58:	d050      	beq.n	8005dfc <_dtoa_r+0xb74>
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e749      	b.n	8005bf4 <_dtoa_r+0x96c>
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	dd03      	ble.n	8005d6c <_dtoa_r+0xae4>
 8005d64:	2b39      	cmp	r3, #57	; 0x39
 8005d66:	d0ee      	beq.n	8005d46 <_dtoa_r+0xabe>
 8005d68:	3301      	adds	r3, #1
 8005d6a:	e7c9      	b.n	8005d00 <_dtoa_r+0xa78>
 8005d6c:	9a02      	ldr	r2, [sp, #8]
 8005d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d74:	428a      	cmp	r2, r1
 8005d76:	d02a      	beq.n	8005dce <_dtoa_r+0xb46>
 8005d78:	4651      	mov	r1, sl
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f8ec 	bl	8005f5c <__multadd>
 8005d84:	45b0      	cmp	r8, r6
 8005d86:	4682      	mov	sl, r0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	f04f 020a 	mov.w	r2, #10
 8005d90:	4641      	mov	r1, r8
 8005d92:	4628      	mov	r0, r5
 8005d94:	d107      	bne.n	8005da6 <_dtoa_r+0xb1e>
 8005d96:	f000 f8e1 	bl	8005f5c <__multadd>
 8005d9a:	4680      	mov	r8, r0
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	3301      	adds	r3, #1
 8005da2:	9302      	str	r3, [sp, #8]
 8005da4:	e777      	b.n	8005c96 <_dtoa_r+0xa0e>
 8005da6:	f000 f8d9 	bl	8005f5c <__multadd>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4680      	mov	r8, r0
 8005dae:	2300      	movs	r3, #0
 8005db0:	220a      	movs	r2, #10
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 f8d2 	bl	8005f5c <__multadd>
 8005db8:	4606      	mov	r6, r0
 8005dba:	e7f0      	b.n	8005d9e <_dtoa_r+0xb16>
 8005dbc:	f1bb 0f00 	cmp.w	fp, #0
 8005dc0:	9a08      	ldr	r2, [sp, #32]
 8005dc2:	bfcc      	ite	gt
 8005dc4:	465f      	movgt	r7, fp
 8005dc6:	2701      	movle	r7, #1
 8005dc8:	4417      	add	r7, r2
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	4651      	mov	r1, sl
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	9302      	str	r3, [sp, #8]
 8005dd6:	f000 fa6f 	bl	80062b8 <__lshift>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4682      	mov	sl, r0
 8005dde:	f000 fad7 	bl	8006390 <__mcmp>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	dcb2      	bgt.n	8005d4c <_dtoa_r+0xac4>
 8005de6:	d102      	bne.n	8005dee <_dtoa_r+0xb66>
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	07db      	lsls	r3, r3, #31
 8005dec:	d4ae      	bmi.n	8005d4c <_dtoa_r+0xac4>
 8005dee:	463b      	mov	r3, r7
 8005df0:	461f      	mov	r7, r3
 8005df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005df6:	2a30      	cmp	r2, #48	; 0x30
 8005df8:	d0fa      	beq.n	8005df0 <_dtoa_r+0xb68>
 8005dfa:	e6fb      	b.n	8005bf4 <_dtoa_r+0x96c>
 8005dfc:	9a08      	ldr	r2, [sp, #32]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d1a5      	bne.n	8005d4e <_dtoa_r+0xac6>
 8005e02:	2331      	movs	r3, #49	; 0x31
 8005e04:	f109 0901 	add.w	r9, r9, #1
 8005e08:	7013      	strb	r3, [r2, #0]
 8005e0a:	e6f3      	b.n	8005bf4 <_dtoa_r+0x96c>
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <_dtoa_r+0xbd4>)
 8005e0e:	f7ff baa6 	b.w	800535e <_dtoa_r+0xd6>
 8005e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f aa7f 	bne.w	8005318 <_dtoa_r+0x90>
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <_dtoa_r+0xbd8>)
 8005e1c:	f7ff ba9f 	b.w	800535e <_dtoa_r+0xd6>
 8005e20:	f1bb 0f00 	cmp.w	fp, #0
 8005e24:	dc03      	bgt.n	8005e2e <_dtoa_r+0xba6>
 8005e26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f73f aecc 	bgt.w	8005bc6 <_dtoa_r+0x93e>
 8005e2e:	9f08      	ldr	r7, [sp, #32]
 8005e30:	4621      	mov	r1, r4
 8005e32:	4650      	mov	r0, sl
 8005e34:	f7ff f99a 	bl	800516c <quorem>
 8005e38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e3c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e40:	9a08      	ldr	r2, [sp, #32]
 8005e42:	1aba      	subs	r2, r7, r2
 8005e44:	4593      	cmp	fp, r2
 8005e46:	ddb9      	ble.n	8005dbc <_dtoa_r+0xb34>
 8005e48:	4651      	mov	r1, sl
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f884 	bl	8005f5c <__multadd>
 8005e54:	4682      	mov	sl, r0
 8005e56:	e7eb      	b.n	8005e30 <_dtoa_r+0xba8>
 8005e58:	0800768f 	.word	0x0800768f
 8005e5c:	080075e8 	.word	0x080075e8
 8005e60:	0800760c 	.word	0x0800760c

08005e64 <_localeconv_r>:
 8005e64:	4800      	ldr	r0, [pc, #0]	; (8005e68 <_localeconv_r+0x4>)
 8005e66:	4770      	bx	lr
 8005e68:	20000160 	.word	0x20000160

08005e6c <malloc>:
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <malloc+0xc>)
 8005e6e:	4601      	mov	r1, r0
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	f000 bbeb 	b.w	800664c <_malloc_r>
 8005e76:	bf00      	nop
 8005e78:	2000000c 	.word	0x2000000c

08005e7c <memcpy>:
 8005e7c:	440a      	add	r2, r1
 8005e7e:	4291      	cmp	r1, r2
 8005e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e84:	d100      	bne.n	8005e88 <memcpy+0xc>
 8005e86:	4770      	bx	lr
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e92:	4291      	cmp	r1, r2
 8005e94:	d1f9      	bne.n	8005e8a <memcpy+0xe>
 8005e96:	bd10      	pop	{r4, pc}

08005e98 <_Balloc>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	b976      	cbnz	r6, 8005ec0 <_Balloc+0x28>
 8005ea2:	2010      	movs	r0, #16
 8005ea4:	f7ff ffe2 	bl	8005e6c <malloc>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8005eac:	b920      	cbnz	r0, 8005eb8 <_Balloc+0x20>
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <_Balloc+0x78>)
 8005eb0:	4818      	ldr	r0, [pc, #96]	; (8005f14 <_Balloc+0x7c>)
 8005eb2:	2166      	movs	r1, #102	; 0x66
 8005eb4:	f000 fd90 	bl	80069d8 <__assert_func>
 8005eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ebc:	6006      	str	r6, [r0, #0]
 8005ebe:	60c6      	str	r6, [r0, #12]
 8005ec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ec2:	68f3      	ldr	r3, [r6, #12]
 8005ec4:	b183      	cbz	r3, 8005ee8 <_Balloc+0x50>
 8005ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ece:	b9b8      	cbnz	r0, 8005f00 <_Balloc+0x68>
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ed6:	1d72      	adds	r2, r6, #5
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fb5a 	bl	8006594 <_calloc_r>
 8005ee0:	b160      	cbz	r0, 8005efc <_Balloc+0x64>
 8005ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ee6:	e00e      	b.n	8005f06 <_Balloc+0x6e>
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	2104      	movs	r1, #4
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fb51 	bl	8006594 <_calloc_r>
 8005ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef4:	60f0      	str	r0, [r6, #12]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e4      	bne.n	8005ec6 <_Balloc+0x2e>
 8005efc:	2000      	movs	r0, #0
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	6802      	ldr	r2, [r0, #0]
 8005f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f06:	2300      	movs	r3, #0
 8005f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f0c:	e7f7      	b.n	8005efe <_Balloc+0x66>
 8005f0e:	bf00      	nop
 8005f10:	08007619 	.word	0x08007619
 8005f14:	080076a0 	.word	0x080076a0

08005f18 <_Bfree>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b976      	cbnz	r6, 8005f40 <_Bfree+0x28>
 8005f22:	2010      	movs	r0, #16
 8005f24:	f7ff ffa2 	bl	8005e6c <malloc>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6268      	str	r0, [r5, #36]	; 0x24
 8005f2c:	b920      	cbnz	r0, 8005f38 <_Bfree+0x20>
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <_Bfree+0x3c>)
 8005f30:	4809      	ldr	r0, [pc, #36]	; (8005f58 <_Bfree+0x40>)
 8005f32:	218a      	movs	r1, #138	; 0x8a
 8005f34:	f000 fd50 	bl	80069d8 <__assert_func>
 8005f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f3c:	6006      	str	r6, [r0, #0]
 8005f3e:	60c6      	str	r6, [r0, #12]
 8005f40:	b13c      	cbz	r4, 8005f52 <_Bfree+0x3a>
 8005f42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f44:	6862      	ldr	r2, [r4, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f4c:	6021      	str	r1, [r4, #0]
 8005f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	08007619 	.word	0x08007619
 8005f58:	080076a0 	.word	0x080076a0

08005f5c <__multadd>:
 8005f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	690e      	ldr	r6, [r1, #16]
 8005f62:	4607      	mov	r7, r0
 8005f64:	4698      	mov	r8, r3
 8005f66:	460c      	mov	r4, r1
 8005f68:	f101 0014 	add.w	r0, r1, #20
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6805      	ldr	r5, [r0, #0]
 8005f70:	b2a9      	uxth	r1, r5
 8005f72:	fb02 8101 	mla	r1, r2, r1, r8
 8005f76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005f7a:	0c2d      	lsrs	r5, r5, #16
 8005f7c:	fb02 c505 	mla	r5, r2, r5, ip
 8005f80:	b289      	uxth	r1, r1
 8005f82:	3301      	adds	r3, #1
 8005f84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005f88:	429e      	cmp	r6, r3
 8005f8a:	f840 1b04 	str.w	r1, [r0], #4
 8005f8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005f92:	dcec      	bgt.n	8005f6e <__multadd+0x12>
 8005f94:	f1b8 0f00 	cmp.w	r8, #0
 8005f98:	d022      	beq.n	8005fe0 <__multadd+0x84>
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	42b3      	cmp	r3, r6
 8005f9e:	dc19      	bgt.n	8005fd4 <__multadd+0x78>
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	3101      	adds	r1, #1
 8005fa6:	f7ff ff77 	bl	8005e98 <_Balloc>
 8005faa:	4605      	mov	r5, r0
 8005fac:	b928      	cbnz	r0, 8005fba <__multadd+0x5e>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <__multadd+0x8c>)
 8005fb2:	480e      	ldr	r0, [pc, #56]	; (8005fec <__multadd+0x90>)
 8005fb4:	21b5      	movs	r1, #181	; 0xb5
 8005fb6:	f000 fd0f 	bl	80069d8 <__assert_func>
 8005fba:	6922      	ldr	r2, [r4, #16]
 8005fbc:	3202      	adds	r2, #2
 8005fbe:	f104 010c 	add.w	r1, r4, #12
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	300c      	adds	r0, #12
 8005fc6:	f7ff ff59 	bl	8005e7c <memcpy>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff ffa3 	bl	8005f18 <_Bfree>
 8005fd2:	462c      	mov	r4, r5
 8005fd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005fd8:	3601      	adds	r6, #1
 8005fda:	f8c3 8014 	str.w	r8, [r3, #20]
 8005fde:	6126      	str	r6, [r4, #16]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800768f 	.word	0x0800768f
 8005fec:	080076a0 	.word	0x080076a0

08005ff0 <__hi0bits>:
 8005ff0:	0c02      	lsrs	r2, r0, #16
 8005ff2:	0412      	lsls	r2, r2, #16
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	b9ca      	cbnz	r2, 800602c <__hi0bits+0x3c>
 8005ff8:	0403      	lsls	r3, r0, #16
 8005ffa:	2010      	movs	r0, #16
 8005ffc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006000:	bf04      	itt	eq
 8006002:	021b      	lsleq	r3, r3, #8
 8006004:	3008      	addeq	r0, #8
 8006006:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800600a:	bf04      	itt	eq
 800600c:	011b      	lsleq	r3, r3, #4
 800600e:	3004      	addeq	r0, #4
 8006010:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006014:	bf04      	itt	eq
 8006016:	009b      	lsleq	r3, r3, #2
 8006018:	3002      	addeq	r0, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	db05      	blt.n	800602a <__hi0bits+0x3a>
 800601e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006022:	f100 0001 	add.w	r0, r0, #1
 8006026:	bf08      	it	eq
 8006028:	2020      	moveq	r0, #32
 800602a:	4770      	bx	lr
 800602c:	2000      	movs	r0, #0
 800602e:	e7e5      	b.n	8005ffc <__hi0bits+0xc>

08006030 <__lo0bits>:
 8006030:	6803      	ldr	r3, [r0, #0]
 8006032:	4602      	mov	r2, r0
 8006034:	f013 0007 	ands.w	r0, r3, #7
 8006038:	d00b      	beq.n	8006052 <__lo0bits+0x22>
 800603a:	07d9      	lsls	r1, r3, #31
 800603c:	d422      	bmi.n	8006084 <__lo0bits+0x54>
 800603e:	0798      	lsls	r0, r3, #30
 8006040:	bf49      	itett	mi
 8006042:	085b      	lsrmi	r3, r3, #1
 8006044:	089b      	lsrpl	r3, r3, #2
 8006046:	2001      	movmi	r0, #1
 8006048:	6013      	strmi	r3, [r2, #0]
 800604a:	bf5c      	itt	pl
 800604c:	6013      	strpl	r3, [r2, #0]
 800604e:	2002      	movpl	r0, #2
 8006050:	4770      	bx	lr
 8006052:	b299      	uxth	r1, r3
 8006054:	b909      	cbnz	r1, 800605a <__lo0bits+0x2a>
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	2010      	movs	r0, #16
 800605a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800605e:	bf04      	itt	eq
 8006060:	0a1b      	lsreq	r3, r3, #8
 8006062:	3008      	addeq	r0, #8
 8006064:	0719      	lsls	r1, r3, #28
 8006066:	bf04      	itt	eq
 8006068:	091b      	lsreq	r3, r3, #4
 800606a:	3004      	addeq	r0, #4
 800606c:	0799      	lsls	r1, r3, #30
 800606e:	bf04      	itt	eq
 8006070:	089b      	lsreq	r3, r3, #2
 8006072:	3002      	addeq	r0, #2
 8006074:	07d9      	lsls	r1, r3, #31
 8006076:	d403      	bmi.n	8006080 <__lo0bits+0x50>
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	f100 0001 	add.w	r0, r0, #1
 800607e:	d003      	beq.n	8006088 <__lo0bits+0x58>
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4770      	bx	lr
 8006084:	2000      	movs	r0, #0
 8006086:	4770      	bx	lr
 8006088:	2020      	movs	r0, #32
 800608a:	4770      	bx	lr

0800608c <__i2b>:
 800608c:	b510      	push	{r4, lr}
 800608e:	460c      	mov	r4, r1
 8006090:	2101      	movs	r1, #1
 8006092:	f7ff ff01 	bl	8005e98 <_Balloc>
 8006096:	4602      	mov	r2, r0
 8006098:	b928      	cbnz	r0, 80060a6 <__i2b+0x1a>
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <__i2b+0x24>)
 800609c:	4805      	ldr	r0, [pc, #20]	; (80060b4 <__i2b+0x28>)
 800609e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060a2:	f000 fc99 	bl	80069d8 <__assert_func>
 80060a6:	2301      	movs	r3, #1
 80060a8:	6144      	str	r4, [r0, #20]
 80060aa:	6103      	str	r3, [r0, #16]
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	0800768f 	.word	0x0800768f
 80060b4:	080076a0 	.word	0x080076a0

080060b8 <__multiply>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	4614      	mov	r4, r2
 80060be:	690a      	ldr	r2, [r1, #16]
 80060c0:	6923      	ldr	r3, [r4, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	bfb8      	it	lt
 80060c6:	460b      	movlt	r3, r1
 80060c8:	460d      	mov	r5, r1
 80060ca:	bfbc      	itt	lt
 80060cc:	4625      	movlt	r5, r4
 80060ce:	461c      	movlt	r4, r3
 80060d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80060d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060d8:	68ab      	ldr	r3, [r5, #8]
 80060da:	6869      	ldr	r1, [r5, #4]
 80060dc:	eb0a 0709 	add.w	r7, sl, r9
 80060e0:	42bb      	cmp	r3, r7
 80060e2:	b085      	sub	sp, #20
 80060e4:	bfb8      	it	lt
 80060e6:	3101      	addlt	r1, #1
 80060e8:	f7ff fed6 	bl	8005e98 <_Balloc>
 80060ec:	b930      	cbnz	r0, 80060fc <__multiply+0x44>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b42      	ldr	r3, [pc, #264]	; (80061fc <__multiply+0x144>)
 80060f2:	4843      	ldr	r0, [pc, #268]	; (8006200 <__multiply+0x148>)
 80060f4:	f240 115d 	movw	r1, #349	; 0x15d
 80060f8:	f000 fc6e 	bl	80069d8 <__assert_func>
 80060fc:	f100 0614 	add.w	r6, r0, #20
 8006100:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006104:	4633      	mov	r3, r6
 8006106:	2200      	movs	r2, #0
 8006108:	4543      	cmp	r3, r8
 800610a:	d31e      	bcc.n	800614a <__multiply+0x92>
 800610c:	f105 0c14 	add.w	ip, r5, #20
 8006110:	f104 0314 	add.w	r3, r4, #20
 8006114:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006118:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800611c:	9202      	str	r2, [sp, #8]
 800611e:	ebac 0205 	sub.w	r2, ip, r5
 8006122:	3a15      	subs	r2, #21
 8006124:	f022 0203 	bic.w	r2, r2, #3
 8006128:	3204      	adds	r2, #4
 800612a:	f105 0115 	add.w	r1, r5, #21
 800612e:	458c      	cmp	ip, r1
 8006130:	bf38      	it	cc
 8006132:	2204      	movcc	r2, #4
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	9a02      	ldr	r2, [sp, #8]
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	429a      	cmp	r2, r3
 800613c:	d808      	bhi.n	8006150 <__multiply+0x98>
 800613e:	2f00      	cmp	r7, #0
 8006140:	dc55      	bgt.n	80061ee <__multiply+0x136>
 8006142:	6107      	str	r7, [r0, #16]
 8006144:	b005      	add	sp, #20
 8006146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614a:	f843 2b04 	str.w	r2, [r3], #4
 800614e:	e7db      	b.n	8006108 <__multiply+0x50>
 8006150:	f8b3 a000 	ldrh.w	sl, [r3]
 8006154:	f1ba 0f00 	cmp.w	sl, #0
 8006158:	d020      	beq.n	800619c <__multiply+0xe4>
 800615a:	f105 0e14 	add.w	lr, r5, #20
 800615e:	46b1      	mov	r9, r6
 8006160:	2200      	movs	r2, #0
 8006162:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006166:	f8d9 b000 	ldr.w	fp, [r9]
 800616a:	b2a1      	uxth	r1, r4
 800616c:	fa1f fb8b 	uxth.w	fp, fp
 8006170:	fb0a b101 	mla	r1, sl, r1, fp
 8006174:	4411      	add	r1, r2
 8006176:	f8d9 2000 	ldr.w	r2, [r9]
 800617a:	0c24      	lsrs	r4, r4, #16
 800617c:	0c12      	lsrs	r2, r2, #16
 800617e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006182:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006186:	b289      	uxth	r1, r1
 8006188:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800618c:	45f4      	cmp	ip, lr
 800618e:	f849 1b04 	str.w	r1, [r9], #4
 8006192:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006196:	d8e4      	bhi.n	8006162 <__multiply+0xaa>
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	5072      	str	r2, [r6, r1]
 800619c:	9a03      	ldr	r2, [sp, #12]
 800619e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061a2:	3304      	adds	r3, #4
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	d01f      	beq.n	80061ea <__multiply+0x132>
 80061aa:	6834      	ldr	r4, [r6, #0]
 80061ac:	f105 0114 	add.w	r1, r5, #20
 80061b0:	46b6      	mov	lr, r6
 80061b2:	f04f 0a00 	mov.w	sl, #0
 80061b6:	880a      	ldrh	r2, [r1, #0]
 80061b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061bc:	fb09 b202 	mla	r2, r9, r2, fp
 80061c0:	4492      	add	sl, r2
 80061c2:	b2a4      	uxth	r4, r4
 80061c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80061c8:	f84e 4b04 	str.w	r4, [lr], #4
 80061cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80061d0:	f8be 2000 	ldrh.w	r2, [lr]
 80061d4:	0c24      	lsrs	r4, r4, #16
 80061d6:	fb09 2404 	mla	r4, r9, r4, r2
 80061da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80061de:	458c      	cmp	ip, r1
 80061e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061e4:	d8e7      	bhi.n	80061b6 <__multiply+0xfe>
 80061e6:	9a01      	ldr	r2, [sp, #4]
 80061e8:	50b4      	str	r4, [r6, r2]
 80061ea:	3604      	adds	r6, #4
 80061ec:	e7a3      	b.n	8006136 <__multiply+0x7e>
 80061ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1a5      	bne.n	8006142 <__multiply+0x8a>
 80061f6:	3f01      	subs	r7, #1
 80061f8:	e7a1      	b.n	800613e <__multiply+0x86>
 80061fa:	bf00      	nop
 80061fc:	0800768f 	.word	0x0800768f
 8006200:	080076a0 	.word	0x080076a0

08006204 <__pow5mult>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	4615      	mov	r5, r2
 800620a:	f012 0203 	ands.w	r2, r2, #3
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	d007      	beq.n	8006224 <__pow5mult+0x20>
 8006214:	4c25      	ldr	r4, [pc, #148]	; (80062ac <__pow5mult+0xa8>)
 8006216:	3a01      	subs	r2, #1
 8006218:	2300      	movs	r3, #0
 800621a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800621e:	f7ff fe9d 	bl	8005f5c <__multadd>
 8006222:	4607      	mov	r7, r0
 8006224:	10ad      	asrs	r5, r5, #2
 8006226:	d03d      	beq.n	80062a4 <__pow5mult+0xa0>
 8006228:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800622a:	b97c      	cbnz	r4, 800624c <__pow5mult+0x48>
 800622c:	2010      	movs	r0, #16
 800622e:	f7ff fe1d 	bl	8005e6c <malloc>
 8006232:	4602      	mov	r2, r0
 8006234:	6270      	str	r0, [r6, #36]	; 0x24
 8006236:	b928      	cbnz	r0, 8006244 <__pow5mult+0x40>
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <__pow5mult+0xac>)
 800623a:	481e      	ldr	r0, [pc, #120]	; (80062b4 <__pow5mult+0xb0>)
 800623c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006240:	f000 fbca 	bl	80069d8 <__assert_func>
 8006244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006248:	6004      	str	r4, [r0, #0]
 800624a:	60c4      	str	r4, [r0, #12]
 800624c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006254:	b94c      	cbnz	r4, 800626a <__pow5mult+0x66>
 8006256:	f240 2171 	movw	r1, #625	; 0x271
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ff16 	bl	800608c <__i2b>
 8006260:	2300      	movs	r3, #0
 8006262:	f8c8 0008 	str.w	r0, [r8, #8]
 8006266:	4604      	mov	r4, r0
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	07eb      	lsls	r3, r5, #31
 8006270:	d50a      	bpl.n	8006288 <__pow5mult+0x84>
 8006272:	4639      	mov	r1, r7
 8006274:	4622      	mov	r2, r4
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ff1e 	bl	80060b8 <__multiply>
 800627c:	4639      	mov	r1, r7
 800627e:	4680      	mov	r8, r0
 8006280:	4630      	mov	r0, r6
 8006282:	f7ff fe49 	bl	8005f18 <_Bfree>
 8006286:	4647      	mov	r7, r8
 8006288:	106d      	asrs	r5, r5, #1
 800628a:	d00b      	beq.n	80062a4 <__pow5mult+0xa0>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	b938      	cbnz	r0, 80062a0 <__pow5mult+0x9c>
 8006290:	4622      	mov	r2, r4
 8006292:	4621      	mov	r1, r4
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ff0f 	bl	80060b8 <__multiply>
 800629a:	6020      	str	r0, [r4, #0]
 800629c:	f8c0 9000 	str.w	r9, [r0]
 80062a0:	4604      	mov	r4, r0
 80062a2:	e7e4      	b.n	800626e <__pow5mult+0x6a>
 80062a4:	4638      	mov	r0, r7
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	bf00      	nop
 80062ac:	080077f0 	.word	0x080077f0
 80062b0:	08007619 	.word	0x08007619
 80062b4:	080076a0 	.word	0x080076a0

080062b8 <__lshift>:
 80062b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	6849      	ldr	r1, [r1, #4]
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	4607      	mov	r7, r0
 80062ca:	4691      	mov	r9, r2
 80062cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062d0:	f108 0601 	add.w	r6, r8, #1
 80062d4:	42b3      	cmp	r3, r6
 80062d6:	db0b      	blt.n	80062f0 <__lshift+0x38>
 80062d8:	4638      	mov	r0, r7
 80062da:	f7ff fddd 	bl	8005e98 <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b948      	cbnz	r0, 80062f6 <__lshift+0x3e>
 80062e2:	4602      	mov	r2, r0
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <__lshift+0xd0>)
 80062e6:	4829      	ldr	r0, [pc, #164]	; (800638c <__lshift+0xd4>)
 80062e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062ec:	f000 fb74 	bl	80069d8 <__assert_func>
 80062f0:	3101      	adds	r1, #1
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	e7ee      	b.n	80062d4 <__lshift+0x1c>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f100 0114 	add.w	r1, r0, #20
 80062fc:	f100 0210 	add.w	r2, r0, #16
 8006300:	4618      	mov	r0, r3
 8006302:	4553      	cmp	r3, sl
 8006304:	db33      	blt.n	800636e <__lshift+0xb6>
 8006306:	6920      	ldr	r0, [r4, #16]
 8006308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800630c:	f104 0314 	add.w	r3, r4, #20
 8006310:	f019 091f 	ands.w	r9, r9, #31
 8006314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800631c:	d02b      	beq.n	8006376 <__lshift+0xbe>
 800631e:	f1c9 0e20 	rsb	lr, r9, #32
 8006322:	468a      	mov	sl, r1
 8006324:	2200      	movs	r2, #0
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	fa00 f009 	lsl.w	r0, r0, r9
 800632c:	4302      	orrs	r2, r0
 800632e:	f84a 2b04 	str.w	r2, [sl], #4
 8006332:	f853 2b04 	ldr.w	r2, [r3], #4
 8006336:	459c      	cmp	ip, r3
 8006338:	fa22 f20e 	lsr.w	r2, r2, lr
 800633c:	d8f3      	bhi.n	8006326 <__lshift+0x6e>
 800633e:	ebac 0304 	sub.w	r3, ip, r4
 8006342:	3b15      	subs	r3, #21
 8006344:	f023 0303 	bic.w	r3, r3, #3
 8006348:	3304      	adds	r3, #4
 800634a:	f104 0015 	add.w	r0, r4, #21
 800634e:	4584      	cmp	ip, r0
 8006350:	bf38      	it	cc
 8006352:	2304      	movcc	r3, #4
 8006354:	50ca      	str	r2, [r1, r3]
 8006356:	b10a      	cbz	r2, 800635c <__lshift+0xa4>
 8006358:	f108 0602 	add.w	r6, r8, #2
 800635c:	3e01      	subs	r6, #1
 800635e:	4638      	mov	r0, r7
 8006360:	612e      	str	r6, [r5, #16]
 8006362:	4621      	mov	r1, r4
 8006364:	f7ff fdd8 	bl	8005f18 <_Bfree>
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006372:	3301      	adds	r3, #1
 8006374:	e7c5      	b.n	8006302 <__lshift+0x4a>
 8006376:	3904      	subs	r1, #4
 8006378:	f853 2b04 	ldr.w	r2, [r3], #4
 800637c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006380:	459c      	cmp	ip, r3
 8006382:	d8f9      	bhi.n	8006378 <__lshift+0xc0>
 8006384:	e7ea      	b.n	800635c <__lshift+0xa4>
 8006386:	bf00      	nop
 8006388:	0800768f 	.word	0x0800768f
 800638c:	080076a0 	.word	0x080076a0

08006390 <__mcmp>:
 8006390:	690a      	ldr	r2, [r1, #16]
 8006392:	4603      	mov	r3, r0
 8006394:	6900      	ldr	r0, [r0, #16]
 8006396:	1a80      	subs	r0, r0, r2
 8006398:	b530      	push	{r4, r5, lr}
 800639a:	d10d      	bne.n	80063b8 <__mcmp+0x28>
 800639c:	3314      	adds	r3, #20
 800639e:	3114      	adds	r1, #20
 80063a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063b0:	4295      	cmp	r5, r2
 80063b2:	d002      	beq.n	80063ba <__mcmp+0x2a>
 80063b4:	d304      	bcc.n	80063c0 <__mcmp+0x30>
 80063b6:	2001      	movs	r0, #1
 80063b8:	bd30      	pop	{r4, r5, pc}
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	d3f4      	bcc.n	80063a8 <__mcmp+0x18>
 80063be:	e7fb      	b.n	80063b8 <__mcmp+0x28>
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	e7f8      	b.n	80063b8 <__mcmp+0x28>
	...

080063c8 <__mdiff>:
 80063c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	4606      	mov	r6, r0
 80063d0:	4611      	mov	r1, r2
 80063d2:	4620      	mov	r0, r4
 80063d4:	4617      	mov	r7, r2
 80063d6:	f7ff ffdb 	bl	8006390 <__mcmp>
 80063da:	1e05      	subs	r5, r0, #0
 80063dc:	d111      	bne.n	8006402 <__mdiff+0x3a>
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff fd59 	bl	8005e98 <_Balloc>
 80063e6:	4602      	mov	r2, r0
 80063e8:	b928      	cbnz	r0, 80063f6 <__mdiff+0x2e>
 80063ea:	4b3a      	ldr	r3, [pc, #232]	; (80064d4 <__mdiff+0x10c>)
 80063ec:	f240 2132 	movw	r1, #562	; 0x232
 80063f0:	4839      	ldr	r0, [pc, #228]	; (80064d8 <__mdiff+0x110>)
 80063f2:	f000 faf1 	bl	80069d8 <__assert_func>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063fc:	4610      	mov	r0, r2
 80063fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	bfa4      	itt	ge
 8006404:	463b      	movge	r3, r7
 8006406:	4627      	movge	r7, r4
 8006408:	4630      	mov	r0, r6
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	bfa6      	itte	ge
 800640e:	461c      	movge	r4, r3
 8006410:	2500      	movge	r5, #0
 8006412:	2501      	movlt	r5, #1
 8006414:	f7ff fd40 	bl	8005e98 <_Balloc>
 8006418:	4602      	mov	r2, r0
 800641a:	b918      	cbnz	r0, 8006424 <__mdiff+0x5c>
 800641c:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <__mdiff+0x10c>)
 800641e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006422:	e7e5      	b.n	80063f0 <__mdiff+0x28>
 8006424:	693e      	ldr	r6, [r7, #16]
 8006426:	60c5      	str	r5, [r0, #12]
 8006428:	6925      	ldr	r5, [r4, #16]
 800642a:	f107 0114 	add.w	r1, r7, #20
 800642e:	f100 0e14 	add.w	lr, r0, #20
 8006432:	f104 0914 	add.w	r9, r4, #20
 8006436:	f107 0010 	add.w	r0, r7, #16
 800643a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800643e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006442:	46f2      	mov	sl, lr
 8006444:	2700      	movs	r7, #0
 8006446:	f859 3b04 	ldr.w	r3, [r9], #4
 800644a:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800644e:	fa1f f883 	uxth.w	r8, r3
 8006452:	fa17 f78b 	uxtah	r7, r7, fp
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	eba7 0808 	sub.w	r8, r7, r8
 800645c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006460:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006464:	fa1f f888 	uxth.w	r8, r8
 8006468:	141f      	asrs	r7, r3, #16
 800646a:	454d      	cmp	r5, r9
 800646c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006470:	f84a 3b04 	str.w	r3, [sl], #4
 8006474:	d8e7      	bhi.n	8006446 <__mdiff+0x7e>
 8006476:	1b2b      	subs	r3, r5, r4
 8006478:	3b15      	subs	r3, #21
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	3304      	adds	r3, #4
 8006480:	3415      	adds	r4, #21
 8006482:	42a5      	cmp	r5, r4
 8006484:	bf38      	it	cc
 8006486:	2304      	movcc	r3, #4
 8006488:	4419      	add	r1, r3
 800648a:	4473      	add	r3, lr
 800648c:	469e      	mov	lr, r3
 800648e:	460d      	mov	r5, r1
 8006490:	4565      	cmp	r5, ip
 8006492:	d30e      	bcc.n	80064b2 <__mdiff+0xea>
 8006494:	f10c 0003 	add.w	r0, ip, #3
 8006498:	1a40      	subs	r0, r0, r1
 800649a:	f020 0003 	bic.w	r0, r0, #3
 800649e:	3903      	subs	r1, #3
 80064a0:	458c      	cmp	ip, r1
 80064a2:	bf38      	it	cc
 80064a4:	2000      	movcc	r0, #0
 80064a6:	4418      	add	r0, r3
 80064a8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80064ac:	b17b      	cbz	r3, 80064ce <__mdiff+0x106>
 80064ae:	6116      	str	r6, [r2, #16]
 80064b0:	e7a4      	b.n	80063fc <__mdiff+0x34>
 80064b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80064b6:	fa17 f488 	uxtah	r4, r7, r8
 80064ba:	1420      	asrs	r0, r4, #16
 80064bc:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80064c0:	b2a4      	uxth	r4, r4
 80064c2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80064c6:	f84e 4b04 	str.w	r4, [lr], #4
 80064ca:	1407      	asrs	r7, r0, #16
 80064cc:	e7e0      	b.n	8006490 <__mdiff+0xc8>
 80064ce:	3e01      	subs	r6, #1
 80064d0:	e7ea      	b.n	80064a8 <__mdiff+0xe0>
 80064d2:	bf00      	nop
 80064d4:	0800768f 	.word	0x0800768f
 80064d8:	080076a0 	.word	0x080076a0

080064dc <__d2b>:
 80064dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064e0:	2101      	movs	r1, #1
 80064e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80064e6:	4690      	mov	r8, r2
 80064e8:	461d      	mov	r5, r3
 80064ea:	f7ff fcd5 	bl	8005e98 <_Balloc>
 80064ee:	4604      	mov	r4, r0
 80064f0:	b930      	cbnz	r0, 8006500 <__d2b+0x24>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <__d2b+0xb0>)
 80064f6:	4826      	ldr	r0, [pc, #152]	; (8006590 <__d2b+0xb4>)
 80064f8:	f240 310a 	movw	r1, #778	; 0x30a
 80064fc:	f000 fa6c 	bl	80069d8 <__assert_func>
 8006500:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006504:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006508:	bb2d      	cbnz	r5, 8006556 <__d2b+0x7a>
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f1b8 0300 	subs.w	r3, r8, #0
 8006510:	d026      	beq.n	8006560 <__d2b+0x84>
 8006512:	4668      	mov	r0, sp
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	f7ff fd8b 	bl	8006030 <__lo0bits>
 800651a:	9900      	ldr	r1, [sp, #0]
 800651c:	b1f0      	cbz	r0, 800655c <__d2b+0x80>
 800651e:	9a01      	ldr	r2, [sp, #4]
 8006520:	f1c0 0320 	rsb	r3, r0, #32
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	430b      	orrs	r3, r1
 800652a:	40c2      	lsrs	r2, r0
 800652c:	6163      	str	r3, [r4, #20]
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	9b01      	ldr	r3, [sp, #4]
 8006532:	61a3      	str	r3, [r4, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2102      	movne	r1, #2
 800653a:	2101      	moveq	r1, #1
 800653c:	6121      	str	r1, [r4, #16]
 800653e:	b1c5      	cbz	r5, 8006572 <__d2b+0x96>
 8006540:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006544:	4405      	add	r5, r0
 8006546:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800654a:	603d      	str	r5, [r7, #0]
 800654c:	6030      	str	r0, [r6, #0]
 800654e:	4620      	mov	r0, r4
 8006550:	b002      	add	sp, #8
 8006552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800655a:	e7d6      	b.n	800650a <__d2b+0x2e>
 800655c:	6161      	str	r1, [r4, #20]
 800655e:	e7e7      	b.n	8006530 <__d2b+0x54>
 8006560:	a801      	add	r0, sp, #4
 8006562:	f7ff fd65 	bl	8006030 <__lo0bits>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	6163      	str	r3, [r4, #20]
 800656a:	2101      	movs	r1, #1
 800656c:	6121      	str	r1, [r4, #16]
 800656e:	3020      	adds	r0, #32
 8006570:	e7e5      	b.n	800653e <__d2b+0x62>
 8006572:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006576:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800657a:	6038      	str	r0, [r7, #0]
 800657c:	6918      	ldr	r0, [r3, #16]
 800657e:	f7ff fd37 	bl	8005ff0 <__hi0bits>
 8006582:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	e7e1      	b.n	800654e <__d2b+0x72>
 800658a:	bf00      	nop
 800658c:	0800768f 	.word	0x0800768f
 8006590:	080076a0 	.word	0x080076a0

08006594 <_calloc_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	fb02 f501 	mul.w	r5, r2, r1
 800659a:	4629      	mov	r1, r5
 800659c:	f000 f856 	bl	800664c <_malloc_r>
 80065a0:	4604      	mov	r4, r0
 80065a2:	b118      	cbz	r0, 80065ac <_calloc_r+0x18>
 80065a4:	462a      	mov	r2, r5
 80065a6:	2100      	movs	r1, #0
 80065a8:	f7fe f95c 	bl	8004864 <memset>
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd38      	pop	{r3, r4, r5, pc}

080065b0 <_free_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d045      	beq.n	8006644 <_free_r+0x94>
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f0c      	subs	r4, r1, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfb8      	it	lt
 80065c2:	18e4      	addlt	r4, r4, r3
 80065c4:	f000 fa64 	bl	8006a90 <__malloc_lock>
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <_free_r+0x98>)
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	4610      	mov	r0, r2
 80065ce:	b933      	cbnz	r3, 80065de <_free_r+0x2e>
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6014      	str	r4, [r2, #0]
 80065d4:	4628      	mov	r0, r5
 80065d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065da:	f000 ba5f 	b.w	8006a9c <__malloc_unlock>
 80065de:	42a3      	cmp	r3, r4
 80065e0:	d90b      	bls.n	80065fa <_free_r+0x4a>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	1862      	adds	r2, r4, r1
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bf04      	itt	eq
 80065ea:	681a      	ldreq	r2, [r3, #0]
 80065ec:	685b      	ldreq	r3, [r3, #4]
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	bf04      	itt	eq
 80065f2:	1852      	addeq	r2, r2, r1
 80065f4:	6022      	streq	r2, [r4, #0]
 80065f6:	6004      	str	r4, [r0, #0]
 80065f8:	e7ec      	b.n	80065d4 <_free_r+0x24>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x54>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x4a>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1850      	adds	r0, r2, r1
 8006608:	42a0      	cmp	r0, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x74>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	4401      	add	r1, r0
 8006610:	1850      	adds	r0, r2, r1
 8006612:	4283      	cmp	r3, r0
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1dd      	bne.n	80065d4 <_free_r+0x24>
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4401      	add	r1, r0
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	e7d7      	b.n	80065d4 <_free_r+0x24>
 8006624:	d902      	bls.n	800662c <_free_r+0x7c>
 8006626:	230c      	movs	r3, #12
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	e7d3      	b.n	80065d4 <_free_r+0x24>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	1821      	adds	r1, r4, r0
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7c7      	b.n	80065d4 <_free_r+0x24>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	200001fc 	.word	0x200001fc

0800664c <_malloc_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	1ccd      	adds	r5, r1, #3
 8006650:	f025 0503 	bic.w	r5, r5, #3
 8006654:	3508      	adds	r5, #8
 8006656:	2d0c      	cmp	r5, #12
 8006658:	bf38      	it	cc
 800665a:	250c      	movcc	r5, #12
 800665c:	2d00      	cmp	r5, #0
 800665e:	4606      	mov	r6, r0
 8006660:	db01      	blt.n	8006666 <_malloc_r+0x1a>
 8006662:	42a9      	cmp	r1, r5
 8006664:	d903      	bls.n	800666e <_malloc_r+0x22>
 8006666:	230c      	movs	r3, #12
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	2000      	movs	r0, #0
 800666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666e:	f000 fa0f 	bl	8006a90 <__malloc_lock>
 8006672:	4921      	ldr	r1, [pc, #132]	; (80066f8 <_malloc_r+0xac>)
 8006674:	680a      	ldr	r2, [r1, #0]
 8006676:	4614      	mov	r4, r2
 8006678:	b99c      	cbnz	r4, 80066a2 <_malloc_r+0x56>
 800667a:	4f20      	ldr	r7, [pc, #128]	; (80066fc <_malloc_r+0xb0>)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	b923      	cbnz	r3, 800668a <_malloc_r+0x3e>
 8006680:	4621      	mov	r1, r4
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f998 	bl	80069b8 <_sbrk_r>
 8006688:	6038      	str	r0, [r7, #0]
 800668a:	4629      	mov	r1, r5
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f993 	bl	80069b8 <_sbrk_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d123      	bne.n	80066de <_malloc_r+0x92>
 8006696:	230c      	movs	r3, #12
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	4630      	mov	r0, r6
 800669c:	f000 f9fe 	bl	8006a9c <__malloc_unlock>
 80066a0:	e7e3      	b.n	800666a <_malloc_r+0x1e>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	1b5b      	subs	r3, r3, r5
 80066a6:	d417      	bmi.n	80066d8 <_malloc_r+0x8c>
 80066a8:	2b0b      	cmp	r3, #11
 80066aa:	d903      	bls.n	80066b4 <_malloc_r+0x68>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	441c      	add	r4, r3
 80066b0:	6025      	str	r5, [r4, #0]
 80066b2:	e004      	b.n	80066be <_malloc_r+0x72>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	42a2      	cmp	r2, r4
 80066b8:	bf0c      	ite	eq
 80066ba:	600b      	streq	r3, [r1, #0]
 80066bc:	6053      	strne	r3, [r2, #4]
 80066be:	4630      	mov	r0, r6
 80066c0:	f000 f9ec 	bl	8006a9c <__malloc_unlock>
 80066c4:	f104 000b 	add.w	r0, r4, #11
 80066c8:	1d23      	adds	r3, r4, #4
 80066ca:	f020 0007 	bic.w	r0, r0, #7
 80066ce:	1ac2      	subs	r2, r0, r3
 80066d0:	d0cc      	beq.n	800666c <_malloc_r+0x20>
 80066d2:	1a1b      	subs	r3, r3, r0
 80066d4:	50a3      	str	r3, [r4, r2]
 80066d6:	e7c9      	b.n	800666c <_malloc_r+0x20>
 80066d8:	4622      	mov	r2, r4
 80066da:	6864      	ldr	r4, [r4, #4]
 80066dc:	e7cc      	b.n	8006678 <_malloc_r+0x2c>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d0e3      	beq.n	80066b0 <_malloc_r+0x64>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f964 	bl	80069b8 <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d1dd      	bne.n	80066b0 <_malloc_r+0x64>
 80066f4:	e7cf      	b.n	8006696 <_malloc_r+0x4a>
 80066f6:	bf00      	nop
 80066f8:	200001fc 	.word	0x200001fc
 80066fc:	20000200 	.word	0x20000200

08006700 <__ssputs_r>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	688e      	ldr	r6, [r1, #8]
 8006706:	429e      	cmp	r6, r3
 8006708:	4682      	mov	sl, r0
 800670a:	460c      	mov	r4, r1
 800670c:	4690      	mov	r8, r2
 800670e:	461f      	mov	r7, r3
 8006710:	d838      	bhi.n	8006784 <__ssputs_r+0x84>
 8006712:	898a      	ldrh	r2, [r1, #12]
 8006714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006718:	d032      	beq.n	8006780 <__ssputs_r+0x80>
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	6909      	ldr	r1, [r1, #16]
 800671e:	eba5 0901 	sub.w	r9, r5, r1
 8006722:	6965      	ldr	r5, [r4, #20]
 8006724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800672c:	3301      	adds	r3, #1
 800672e:	444b      	add	r3, r9
 8006730:	106d      	asrs	r5, r5, #1
 8006732:	429d      	cmp	r5, r3
 8006734:	bf38      	it	cc
 8006736:	461d      	movcc	r5, r3
 8006738:	0553      	lsls	r3, r2, #21
 800673a:	d531      	bpl.n	80067a0 <__ssputs_r+0xa0>
 800673c:	4629      	mov	r1, r5
 800673e:	f7ff ff85 	bl	800664c <_malloc_r>
 8006742:	4606      	mov	r6, r0
 8006744:	b950      	cbnz	r0, 800675c <__ssputs_r+0x5c>
 8006746:	230c      	movs	r3, #12
 8006748:	f8ca 3000 	str.w	r3, [sl]
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	6921      	ldr	r1, [r4, #16]
 800675e:	464a      	mov	r2, r9
 8006760:	f7ff fb8c 	bl	8005e7c <memcpy>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800676a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	6126      	str	r6, [r4, #16]
 8006772:	6165      	str	r5, [r4, #20]
 8006774:	444e      	add	r6, r9
 8006776:	eba5 0509 	sub.w	r5, r5, r9
 800677a:	6026      	str	r6, [r4, #0]
 800677c:	60a5      	str	r5, [r4, #8]
 800677e:	463e      	mov	r6, r7
 8006780:	42be      	cmp	r6, r7
 8006782:	d900      	bls.n	8006786 <__ssputs_r+0x86>
 8006784:	463e      	mov	r6, r7
 8006786:	4632      	mov	r2, r6
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	4641      	mov	r1, r8
 800678c:	f000 f966 	bl	8006a5c <memmove>
 8006790:	68a3      	ldr	r3, [r4, #8]
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	1b9b      	subs	r3, r3, r6
 8006796:	4432      	add	r2, r6
 8006798:	60a3      	str	r3, [r4, #8]
 800679a:	6022      	str	r2, [r4, #0]
 800679c:	2000      	movs	r0, #0
 800679e:	e7db      	b.n	8006758 <__ssputs_r+0x58>
 80067a0:	462a      	mov	r2, r5
 80067a2:	f000 f981 	bl	8006aa8 <_realloc_r>
 80067a6:	4606      	mov	r6, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1e1      	bne.n	8006770 <__ssputs_r+0x70>
 80067ac:	6921      	ldr	r1, [r4, #16]
 80067ae:	4650      	mov	r0, sl
 80067b0:	f7ff fefe 	bl	80065b0 <_free_r>
 80067b4:	e7c7      	b.n	8006746 <__ssputs_r+0x46>
	...

080067b8 <_svfiprintf_r>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	4698      	mov	r8, r3
 80067be:	898b      	ldrh	r3, [r1, #12]
 80067c0:	061b      	lsls	r3, r3, #24
 80067c2:	b09d      	sub	sp, #116	; 0x74
 80067c4:	4607      	mov	r7, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	d50e      	bpl.n	80067ea <_svfiprintf_r+0x32>
 80067cc:	690b      	ldr	r3, [r1, #16]
 80067ce:	b963      	cbnz	r3, 80067ea <_svfiprintf_r+0x32>
 80067d0:	2140      	movs	r1, #64	; 0x40
 80067d2:	f7ff ff3b 	bl	800664c <_malloc_r>
 80067d6:	6028      	str	r0, [r5, #0]
 80067d8:	6128      	str	r0, [r5, #16]
 80067da:	b920      	cbnz	r0, 80067e6 <_svfiprintf_r+0x2e>
 80067dc:	230c      	movs	r3, #12
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	e0d1      	b.n	800698a <_svfiprintf_r+0x1d2>
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	616b      	str	r3, [r5, #20]
 80067ea:	2300      	movs	r3, #0
 80067ec:	9309      	str	r3, [sp, #36]	; 0x24
 80067ee:	2320      	movs	r3, #32
 80067f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f8:	2330      	movs	r3, #48	; 0x30
 80067fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069a4 <_svfiprintf_r+0x1ec>
 80067fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006802:	f04f 0901 	mov.w	r9, #1
 8006806:	4623      	mov	r3, r4
 8006808:	469a      	mov	sl, r3
 800680a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680e:	b10a      	cbz	r2, 8006814 <_svfiprintf_r+0x5c>
 8006810:	2a25      	cmp	r2, #37	; 0x25
 8006812:	d1f9      	bne.n	8006808 <_svfiprintf_r+0x50>
 8006814:	ebba 0b04 	subs.w	fp, sl, r4
 8006818:	d00b      	beq.n	8006832 <_svfiprintf_r+0x7a>
 800681a:	465b      	mov	r3, fp
 800681c:	4622      	mov	r2, r4
 800681e:	4629      	mov	r1, r5
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ff6d 	bl	8006700 <__ssputs_r>
 8006826:	3001      	adds	r0, #1
 8006828:	f000 80aa 	beq.w	8006980 <_svfiprintf_r+0x1c8>
 800682c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800682e:	445a      	add	r2, fp
 8006830:	9209      	str	r2, [sp, #36]	; 0x24
 8006832:	f89a 3000 	ldrb.w	r3, [sl]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80a2 	beq.w	8006980 <_svfiprintf_r+0x1c8>
 800683c:	2300      	movs	r3, #0
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006846:	f10a 0a01 	add.w	sl, sl, #1
 800684a:	9304      	str	r3, [sp, #16]
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006852:	931a      	str	r3, [sp, #104]	; 0x68
 8006854:	4654      	mov	r4, sl
 8006856:	2205      	movs	r2, #5
 8006858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685c:	4851      	ldr	r0, [pc, #324]	; (80069a4 <_svfiprintf_r+0x1ec>)
 800685e:	f7f9 fcbf 	bl	80001e0 <memchr>
 8006862:	9a04      	ldr	r2, [sp, #16]
 8006864:	b9d8      	cbnz	r0, 800689e <_svfiprintf_r+0xe6>
 8006866:	06d0      	lsls	r0, r2, #27
 8006868:	bf44      	itt	mi
 800686a:	2320      	movmi	r3, #32
 800686c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006870:	0711      	lsls	r1, r2, #28
 8006872:	bf44      	itt	mi
 8006874:	232b      	movmi	r3, #43	; 0x2b
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687a:	f89a 3000 	ldrb.w	r3, [sl]
 800687e:	2b2a      	cmp	r3, #42	; 0x2a
 8006880:	d015      	beq.n	80068ae <_svfiprintf_r+0xf6>
 8006882:	9a07      	ldr	r2, [sp, #28]
 8006884:	4654      	mov	r4, sl
 8006886:	2000      	movs	r0, #0
 8006888:	f04f 0c0a 	mov.w	ip, #10
 800688c:	4621      	mov	r1, r4
 800688e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006892:	3b30      	subs	r3, #48	; 0x30
 8006894:	2b09      	cmp	r3, #9
 8006896:	d94e      	bls.n	8006936 <_svfiprintf_r+0x17e>
 8006898:	b1b0      	cbz	r0, 80068c8 <_svfiprintf_r+0x110>
 800689a:	9207      	str	r2, [sp, #28]
 800689c:	e014      	b.n	80068c8 <_svfiprintf_r+0x110>
 800689e:	eba0 0308 	sub.w	r3, r0, r8
 80068a2:	fa09 f303 	lsl.w	r3, r9, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	46a2      	mov	sl, r4
 80068ac:	e7d2      	b.n	8006854 <_svfiprintf_r+0x9c>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	1d19      	adds	r1, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	9103      	str	r1, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfbb      	ittet	lt
 80068ba:	425b      	neglt	r3, r3
 80068bc:	f042 0202 	orrlt.w	r2, r2, #2
 80068c0:	9307      	strge	r3, [sp, #28]
 80068c2:	9307      	strlt	r3, [sp, #28]
 80068c4:	bfb8      	it	lt
 80068c6:	9204      	strlt	r2, [sp, #16]
 80068c8:	7823      	ldrb	r3, [r4, #0]
 80068ca:	2b2e      	cmp	r3, #46	; 0x2e
 80068cc:	d10c      	bne.n	80068e8 <_svfiprintf_r+0x130>
 80068ce:	7863      	ldrb	r3, [r4, #1]
 80068d0:	2b2a      	cmp	r3, #42	; 0x2a
 80068d2:	d135      	bne.n	8006940 <_svfiprintf_r+0x188>
 80068d4:	9b03      	ldr	r3, [sp, #12]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	9203      	str	r2, [sp, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bfb8      	it	lt
 80068e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80068e4:	3402      	adds	r4, #2
 80068e6:	9305      	str	r3, [sp, #20]
 80068e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069b4 <_svfiprintf_r+0x1fc>
 80068ec:	7821      	ldrb	r1, [r4, #0]
 80068ee:	2203      	movs	r2, #3
 80068f0:	4650      	mov	r0, sl
 80068f2:	f7f9 fc75 	bl	80001e0 <memchr>
 80068f6:	b140      	cbz	r0, 800690a <_svfiprintf_r+0x152>
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	eba0 000a 	sub.w	r0, r0, sl
 80068fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	4303      	orrs	r3, r0
 8006906:	3401      	adds	r4, #1
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690e:	4826      	ldr	r0, [pc, #152]	; (80069a8 <_svfiprintf_r+0x1f0>)
 8006910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006914:	2206      	movs	r2, #6
 8006916:	f7f9 fc63 	bl	80001e0 <memchr>
 800691a:	2800      	cmp	r0, #0
 800691c:	d038      	beq.n	8006990 <_svfiprintf_r+0x1d8>
 800691e:	4b23      	ldr	r3, [pc, #140]	; (80069ac <_svfiprintf_r+0x1f4>)
 8006920:	bb1b      	cbnz	r3, 800696a <_svfiprintf_r+0x1b2>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	3307      	adds	r3, #7
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	3308      	adds	r3, #8
 800692c:	9303      	str	r3, [sp, #12]
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	4433      	add	r3, r6
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	e767      	b.n	8006806 <_svfiprintf_r+0x4e>
 8006936:	fb0c 3202 	mla	r2, ip, r2, r3
 800693a:	460c      	mov	r4, r1
 800693c:	2001      	movs	r0, #1
 800693e:	e7a5      	b.n	800688c <_svfiprintf_r+0xd4>
 8006940:	2300      	movs	r3, #0
 8006942:	3401      	adds	r4, #1
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	4619      	mov	r1, r3
 8006948:	f04f 0c0a 	mov.w	ip, #10
 800694c:	4620      	mov	r0, r4
 800694e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006952:	3a30      	subs	r2, #48	; 0x30
 8006954:	2a09      	cmp	r2, #9
 8006956:	d903      	bls.n	8006960 <_svfiprintf_r+0x1a8>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0c5      	beq.n	80068e8 <_svfiprintf_r+0x130>
 800695c:	9105      	str	r1, [sp, #20]
 800695e:	e7c3      	b.n	80068e8 <_svfiprintf_r+0x130>
 8006960:	fb0c 2101 	mla	r1, ip, r1, r2
 8006964:	4604      	mov	r4, r0
 8006966:	2301      	movs	r3, #1
 8006968:	e7f0      	b.n	800694c <_svfiprintf_r+0x194>
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	462a      	mov	r2, r5
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <_svfiprintf_r+0x1f8>)
 8006972:	a904      	add	r1, sp, #16
 8006974:	4638      	mov	r0, r7
 8006976:	f7fe f81b 	bl	80049b0 <_printf_float>
 800697a:	1c42      	adds	r2, r0, #1
 800697c:	4606      	mov	r6, r0
 800697e:	d1d6      	bne.n	800692e <_svfiprintf_r+0x176>
 8006980:	89ab      	ldrh	r3, [r5, #12]
 8006982:	065b      	lsls	r3, r3, #25
 8006984:	f53f af2c 	bmi.w	80067e0 <_svfiprintf_r+0x28>
 8006988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698a:	b01d      	add	sp, #116	; 0x74
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	ab03      	add	r3, sp, #12
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	462a      	mov	r2, r5
 8006996:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <_svfiprintf_r+0x1f8>)
 8006998:	a904      	add	r1, sp, #16
 800699a:	4638      	mov	r0, r7
 800699c:	f7fe faa0 	bl	8004ee0 <_printf_i>
 80069a0:	e7eb      	b.n	800697a <_svfiprintf_r+0x1c2>
 80069a2:	bf00      	nop
 80069a4:	080077fc 	.word	0x080077fc
 80069a8:	08007806 	.word	0x08007806
 80069ac:	080049b1 	.word	0x080049b1
 80069b0:	08006701 	.word	0x08006701
 80069b4:	08007802 	.word	0x08007802

080069b8 <_sbrk_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d06      	ldr	r5, [pc, #24]	; (80069d4 <_sbrk_r+0x1c>)
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fb fc08 	bl	80021d8 <_sbrk>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_sbrk_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_sbrk_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	200002d4 	.word	0x200002d4

080069d8 <__assert_func>:
 80069d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069da:	4614      	mov	r4, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <__assert_func+0x2c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4605      	mov	r5, r0
 80069e4:	68d8      	ldr	r0, [r3, #12]
 80069e6:	b14c      	cbz	r4, 80069fc <__assert_func+0x24>
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <__assert_func+0x30>)
 80069ea:	9100      	str	r1, [sp, #0]
 80069ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069f0:	4906      	ldr	r1, [pc, #24]	; (8006a0c <__assert_func+0x34>)
 80069f2:	462b      	mov	r3, r5
 80069f4:	f000 f80e 	bl	8006a14 <fiprintf>
 80069f8:	f000 faa2 	bl	8006f40 <abort>
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <__assert_func+0x38>)
 80069fe:	461c      	mov	r4, r3
 8006a00:	e7f3      	b.n	80069ea <__assert_func+0x12>
 8006a02:	bf00      	nop
 8006a04:	2000000c 	.word	0x2000000c
 8006a08:	0800780d 	.word	0x0800780d
 8006a0c:	0800781a 	.word	0x0800781a
 8006a10:	08007848 	.word	0x08007848

08006a14 <fiprintf>:
 8006a14:	b40e      	push	{r1, r2, r3}
 8006a16:	b503      	push	{r0, r1, lr}
 8006a18:	4601      	mov	r1, r0
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	4805      	ldr	r0, [pc, #20]	; (8006a34 <fiprintf+0x20>)
 8006a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	f000 f88d 	bl	8006b44 <_vfiprintf_r>
 8006a2a:	b002      	add	sp, #8
 8006a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a30:	b003      	add	sp, #12
 8006a32:	4770      	bx	lr
 8006a34:	2000000c 	.word	0x2000000c

08006a38 <__ascii_mbtowc>:
 8006a38:	b082      	sub	sp, #8
 8006a3a:	b901      	cbnz	r1, 8006a3e <__ascii_mbtowc+0x6>
 8006a3c:	a901      	add	r1, sp, #4
 8006a3e:	b142      	cbz	r2, 8006a52 <__ascii_mbtowc+0x1a>
 8006a40:	b14b      	cbz	r3, 8006a56 <__ascii_mbtowc+0x1e>
 8006a42:	7813      	ldrb	r3, [r2, #0]
 8006a44:	600b      	str	r3, [r1, #0]
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	1e10      	subs	r0, r2, #0
 8006a4a:	bf18      	it	ne
 8006a4c:	2001      	movne	r0, #1
 8006a4e:	b002      	add	sp, #8
 8006a50:	4770      	bx	lr
 8006a52:	4610      	mov	r0, r2
 8006a54:	e7fb      	b.n	8006a4e <__ascii_mbtowc+0x16>
 8006a56:	f06f 0001 	mvn.w	r0, #1
 8006a5a:	e7f8      	b.n	8006a4e <__ascii_mbtowc+0x16>

08006a5c <memmove>:
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	eb01 0402 	add.w	r4, r1, r2
 8006a64:	d902      	bls.n	8006a6c <memmove+0x10>
 8006a66:	4284      	cmp	r4, r0
 8006a68:	4623      	mov	r3, r4
 8006a6a:	d807      	bhi.n	8006a7c <memmove+0x20>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	42a1      	cmp	r1, r4
 8006a70:	d008      	beq.n	8006a84 <memmove+0x28>
 8006a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7a:	e7f8      	b.n	8006a6e <memmove+0x12>
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4601      	mov	r1, r0
 8006a80:	428a      	cmp	r2, r1
 8006a82:	d100      	bne.n	8006a86 <memmove+0x2a>
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8e:	e7f7      	b.n	8006a80 <memmove+0x24>

08006a90 <__malloc_lock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__malloc_lock+0x8>)
 8006a92:	f000 bc15 	b.w	80072c0 <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	200002dc 	.word	0x200002dc

08006a9c <__malloc_unlock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__malloc_unlock+0x8>)
 8006a9e:	f000 bc10 	b.w	80072c2 <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	200002dc 	.word	0x200002dc

08006aa8 <_realloc_r>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4614      	mov	r4, r2
 8006aae:	460e      	mov	r6, r1
 8006ab0:	b921      	cbnz	r1, 8006abc <_realloc_r+0x14>
 8006ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	f7ff bdc8 	b.w	800664c <_malloc_r>
 8006abc:	b922      	cbnz	r2, 8006ac8 <_realloc_r+0x20>
 8006abe:	f7ff fd77 	bl	80065b0 <_free_r>
 8006ac2:	4625      	mov	r5, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac8:	f000 fc60 	bl	800738c <_malloc_usable_size_r>
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d20f      	bcs.n	8006af0 <_realloc_r+0x48>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7ff fdba 	bl	800664c <_malloc_r>
 8006ad8:	4605      	mov	r5, r0
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0f2      	beq.n	8006ac4 <_realloc_r+0x1c>
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	f7ff f9cb 	bl	8005e7c <memcpy>
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff fd61 	bl	80065b0 <_free_r>
 8006aee:	e7e9      	b.n	8006ac4 <_realloc_r+0x1c>
 8006af0:	4635      	mov	r5, r6
 8006af2:	e7e7      	b.n	8006ac4 <_realloc_r+0x1c>

08006af4 <__sfputc_r>:
 8006af4:	6893      	ldr	r3, [r2, #8]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	b410      	push	{r4}
 8006afc:	6093      	str	r3, [r2, #8]
 8006afe:	da07      	bge.n	8006b10 <__sfputc_r+0x1c>
 8006b00:	6994      	ldr	r4, [r2, #24]
 8006b02:	42a3      	cmp	r3, r4
 8006b04:	db01      	blt.n	8006b0a <__sfputc_r+0x16>
 8006b06:	290a      	cmp	r1, #10
 8006b08:	d102      	bne.n	8006b10 <__sfputc_r+0x1c>
 8006b0a:	bc10      	pop	{r4}
 8006b0c:	f000 b94a 	b.w	8006da4 <__swbuf_r>
 8006b10:	6813      	ldr	r3, [r2, #0]
 8006b12:	1c58      	adds	r0, r3, #1
 8006b14:	6010      	str	r0, [r2, #0]
 8006b16:	7019      	strb	r1, [r3, #0]
 8006b18:	4608      	mov	r0, r1
 8006b1a:	bc10      	pop	{r4}
 8006b1c:	4770      	bx	lr

08006b1e <__sfputs_r>:
 8006b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	18d5      	adds	r5, r2, r3
 8006b28:	42ac      	cmp	r4, r5
 8006b2a:	d101      	bne.n	8006b30 <__sfputs_r+0x12>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e007      	b.n	8006b40 <__sfputs_r+0x22>
 8006b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b34:	463a      	mov	r2, r7
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7ff ffdc 	bl	8006af4 <__sfputc_r>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d1f3      	bne.n	8006b28 <__sfputs_r+0xa>
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b44 <_vfiprintf_r>:
 8006b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b48:	460d      	mov	r5, r1
 8006b4a:	b09d      	sub	sp, #116	; 0x74
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	4698      	mov	r8, r3
 8006b50:	4606      	mov	r6, r0
 8006b52:	b118      	cbz	r0, 8006b5c <_vfiprintf_r+0x18>
 8006b54:	6983      	ldr	r3, [r0, #24]
 8006b56:	b90b      	cbnz	r3, 8006b5c <_vfiprintf_r+0x18>
 8006b58:	f000 fb14 	bl	8007184 <__sinit>
 8006b5c:	4b89      	ldr	r3, [pc, #548]	; (8006d84 <_vfiprintf_r+0x240>)
 8006b5e:	429d      	cmp	r5, r3
 8006b60:	d11b      	bne.n	8006b9a <_vfiprintf_r+0x56>
 8006b62:	6875      	ldr	r5, [r6, #4]
 8006b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	d405      	bmi.n	8006b76 <_vfiprintf_r+0x32>
 8006b6a:	89ab      	ldrh	r3, [r5, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d402      	bmi.n	8006b76 <_vfiprintf_r+0x32>
 8006b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b72:	f000 fba5 	bl	80072c0 <__retarget_lock_acquire_recursive>
 8006b76:	89ab      	ldrh	r3, [r5, #12]
 8006b78:	071b      	lsls	r3, r3, #28
 8006b7a:	d501      	bpl.n	8006b80 <_vfiprintf_r+0x3c>
 8006b7c:	692b      	ldr	r3, [r5, #16]
 8006b7e:	b9eb      	cbnz	r3, 8006bbc <_vfiprintf_r+0x78>
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 f96e 	bl	8006e64 <__swsetup_r>
 8006b88:	b1c0      	cbz	r0, 8006bbc <_vfiprintf_r+0x78>
 8006b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b8c:	07dc      	lsls	r4, r3, #31
 8006b8e:	d50e      	bpl.n	8006bae <_vfiprintf_r+0x6a>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	b01d      	add	sp, #116	; 0x74
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	4b7b      	ldr	r3, [pc, #492]	; (8006d88 <_vfiprintf_r+0x244>)
 8006b9c:	429d      	cmp	r5, r3
 8006b9e:	d101      	bne.n	8006ba4 <_vfiprintf_r+0x60>
 8006ba0:	68b5      	ldr	r5, [r6, #8]
 8006ba2:	e7df      	b.n	8006b64 <_vfiprintf_r+0x20>
 8006ba4:	4b79      	ldr	r3, [pc, #484]	; (8006d8c <_vfiprintf_r+0x248>)
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	bf08      	it	eq
 8006baa:	68f5      	ldreq	r5, [r6, #12]
 8006bac:	e7da      	b.n	8006b64 <_vfiprintf_r+0x20>
 8006bae:	89ab      	ldrh	r3, [r5, #12]
 8006bb0:	0598      	lsls	r0, r3, #22
 8006bb2:	d4ed      	bmi.n	8006b90 <_vfiprintf_r+0x4c>
 8006bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bb6:	f000 fb84 	bl	80072c2 <__retarget_lock_release_recursive>
 8006bba:	e7e9      	b.n	8006b90 <_vfiprintf_r+0x4c>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bca:	2330      	movs	r3, #48	; 0x30
 8006bcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d90 <_vfiprintf_r+0x24c>
 8006bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bd4:	f04f 0901 	mov.w	r9, #1
 8006bd8:	4623      	mov	r3, r4
 8006bda:	469a      	mov	sl, r3
 8006bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006be0:	b10a      	cbz	r2, 8006be6 <_vfiprintf_r+0xa2>
 8006be2:	2a25      	cmp	r2, #37	; 0x25
 8006be4:	d1f9      	bne.n	8006bda <_vfiprintf_r+0x96>
 8006be6:	ebba 0b04 	subs.w	fp, sl, r4
 8006bea:	d00b      	beq.n	8006c04 <_vfiprintf_r+0xc0>
 8006bec:	465b      	mov	r3, fp
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7ff ff93 	bl	8006b1e <__sfputs_r>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f000 80aa 	beq.w	8006d52 <_vfiprintf_r+0x20e>
 8006bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c00:	445a      	add	r2, fp
 8006c02:	9209      	str	r2, [sp, #36]	; 0x24
 8006c04:	f89a 3000 	ldrb.w	r3, [sl]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80a2 	beq.w	8006d52 <_vfiprintf_r+0x20e>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c18:	f10a 0a01 	add.w	sl, sl, #1
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	9307      	str	r3, [sp, #28]
 8006c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c24:	931a      	str	r3, [sp, #104]	; 0x68
 8006c26:	4654      	mov	r4, sl
 8006c28:	2205      	movs	r2, #5
 8006c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2e:	4858      	ldr	r0, [pc, #352]	; (8006d90 <_vfiprintf_r+0x24c>)
 8006c30:	f7f9 fad6 	bl	80001e0 <memchr>
 8006c34:	9a04      	ldr	r2, [sp, #16]
 8006c36:	b9d8      	cbnz	r0, 8006c70 <_vfiprintf_r+0x12c>
 8006c38:	06d1      	lsls	r1, r2, #27
 8006c3a:	bf44      	itt	mi
 8006c3c:	2320      	movmi	r3, #32
 8006c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c42:	0713      	lsls	r3, r2, #28
 8006c44:	bf44      	itt	mi
 8006c46:	232b      	movmi	r3, #43	; 0x2b
 8006c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b2a      	cmp	r3, #42	; 0x2a
 8006c52:	d015      	beq.n	8006c80 <_vfiprintf_r+0x13c>
 8006c54:	9a07      	ldr	r2, [sp, #28]
 8006c56:	4654      	mov	r4, sl
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f04f 0c0a 	mov.w	ip, #10
 8006c5e:	4621      	mov	r1, r4
 8006c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c64:	3b30      	subs	r3, #48	; 0x30
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	d94e      	bls.n	8006d08 <_vfiprintf_r+0x1c4>
 8006c6a:	b1b0      	cbz	r0, 8006c9a <_vfiprintf_r+0x156>
 8006c6c:	9207      	str	r2, [sp, #28]
 8006c6e:	e014      	b.n	8006c9a <_vfiprintf_r+0x156>
 8006c70:	eba0 0308 	sub.w	r3, r0, r8
 8006c74:	fa09 f303 	lsl.w	r3, r9, r3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	46a2      	mov	sl, r4
 8006c7e:	e7d2      	b.n	8006c26 <_vfiprintf_r+0xe2>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	1d19      	adds	r1, r3, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	9103      	str	r1, [sp, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfbb      	ittet	lt
 8006c8c:	425b      	neglt	r3, r3
 8006c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c92:	9307      	strge	r3, [sp, #28]
 8006c94:	9307      	strlt	r3, [sp, #28]
 8006c96:	bfb8      	it	lt
 8006c98:	9204      	strlt	r2, [sp, #16]
 8006c9a:	7823      	ldrb	r3, [r4, #0]
 8006c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c9e:	d10c      	bne.n	8006cba <_vfiprintf_r+0x176>
 8006ca0:	7863      	ldrb	r3, [r4, #1]
 8006ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca4:	d135      	bne.n	8006d12 <_vfiprintf_r+0x1ce>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	1d1a      	adds	r2, r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9203      	str	r2, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfb8      	it	lt
 8006cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cb6:	3402      	adds	r4, #2
 8006cb8:	9305      	str	r3, [sp, #20]
 8006cba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006da0 <_vfiprintf_r+0x25c>
 8006cbe:	7821      	ldrb	r1, [r4, #0]
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f7f9 fa8c 	bl	80001e0 <memchr>
 8006cc8:	b140      	cbz	r0, 8006cdc <_vfiprintf_r+0x198>
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	eba0 000a 	sub.w	r0, r0, sl
 8006cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	4303      	orrs	r3, r0
 8006cd8:	3401      	adds	r4, #1
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	482c      	ldr	r0, [pc, #176]	; (8006d94 <_vfiprintf_r+0x250>)
 8006ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ce6:	2206      	movs	r2, #6
 8006ce8:	f7f9 fa7a 	bl	80001e0 <memchr>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d03f      	beq.n	8006d70 <_vfiprintf_r+0x22c>
 8006cf0:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <_vfiprintf_r+0x254>)
 8006cf2:	bb1b      	cbnz	r3, 8006d3c <_vfiprintf_r+0x1f8>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	3307      	adds	r3, #7
 8006cf8:	f023 0307 	bic.w	r3, r3, #7
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	9303      	str	r3, [sp, #12]
 8006d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d02:	443b      	add	r3, r7
 8006d04:	9309      	str	r3, [sp, #36]	; 0x24
 8006d06:	e767      	b.n	8006bd8 <_vfiprintf_r+0x94>
 8006d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	2001      	movs	r0, #1
 8006d10:	e7a5      	b.n	8006c5e <_vfiprintf_r+0x11a>
 8006d12:	2300      	movs	r3, #0
 8006d14:	3401      	adds	r4, #1
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f04f 0c0a 	mov.w	ip, #10
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d24:	3a30      	subs	r2, #48	; 0x30
 8006d26:	2a09      	cmp	r2, #9
 8006d28:	d903      	bls.n	8006d32 <_vfiprintf_r+0x1ee>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0c5      	beq.n	8006cba <_vfiprintf_r+0x176>
 8006d2e:	9105      	str	r1, [sp, #20]
 8006d30:	e7c3      	b.n	8006cba <_vfiprintf_r+0x176>
 8006d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d36:	4604      	mov	r4, r0
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7f0      	b.n	8006d1e <_vfiprintf_r+0x1da>
 8006d3c:	ab03      	add	r3, sp, #12
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	462a      	mov	r2, r5
 8006d42:	4b16      	ldr	r3, [pc, #88]	; (8006d9c <_vfiprintf_r+0x258>)
 8006d44:	a904      	add	r1, sp, #16
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7fd fe32 	bl	80049b0 <_printf_float>
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	1c78      	adds	r0, r7, #1
 8006d50:	d1d6      	bne.n	8006d00 <_vfiprintf_r+0x1bc>
 8006d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d54:	07d9      	lsls	r1, r3, #31
 8006d56:	d405      	bmi.n	8006d64 <_vfiprintf_r+0x220>
 8006d58:	89ab      	ldrh	r3, [r5, #12]
 8006d5a:	059a      	lsls	r2, r3, #22
 8006d5c:	d402      	bmi.n	8006d64 <_vfiprintf_r+0x220>
 8006d5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d60:	f000 faaf 	bl	80072c2 <__retarget_lock_release_recursive>
 8006d64:	89ab      	ldrh	r3, [r5, #12]
 8006d66:	065b      	lsls	r3, r3, #25
 8006d68:	f53f af12 	bmi.w	8006b90 <_vfiprintf_r+0x4c>
 8006d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d6e:	e711      	b.n	8006b94 <_vfiprintf_r+0x50>
 8006d70:	ab03      	add	r3, sp, #12
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	462a      	mov	r2, r5
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <_vfiprintf_r+0x258>)
 8006d78:	a904      	add	r1, sp, #16
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7fe f8b0 	bl	8004ee0 <_printf_i>
 8006d80:	e7e4      	b.n	8006d4c <_vfiprintf_r+0x208>
 8006d82:	bf00      	nop
 8006d84:	08007974 	.word	0x08007974
 8006d88:	08007994 	.word	0x08007994
 8006d8c:	08007954 	.word	0x08007954
 8006d90:	080077fc 	.word	0x080077fc
 8006d94:	08007806 	.word	0x08007806
 8006d98:	080049b1 	.word	0x080049b1
 8006d9c:	08006b1f 	.word	0x08006b1f
 8006da0:	08007802 	.word	0x08007802

08006da4 <__swbuf_r>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	460e      	mov	r6, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	4605      	mov	r5, r0
 8006dac:	b118      	cbz	r0, 8006db6 <__swbuf_r+0x12>
 8006dae:	6983      	ldr	r3, [r0, #24]
 8006db0:	b90b      	cbnz	r3, 8006db6 <__swbuf_r+0x12>
 8006db2:	f000 f9e7 	bl	8007184 <__sinit>
 8006db6:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <__swbuf_r+0x98>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d12b      	bne.n	8006e14 <__swbuf_r+0x70>
 8006dbc:	686c      	ldr	r4, [r5, #4]
 8006dbe:	69a3      	ldr	r3, [r4, #24]
 8006dc0:	60a3      	str	r3, [r4, #8]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	071a      	lsls	r2, r3, #28
 8006dc6:	d52f      	bpl.n	8006e28 <__swbuf_r+0x84>
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	b36b      	cbz	r3, 8006e28 <__swbuf_r+0x84>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	1ac0      	subs	r0, r0, r3
 8006dd2:	6963      	ldr	r3, [r4, #20]
 8006dd4:	b2f6      	uxtb	r6, r6
 8006dd6:	4283      	cmp	r3, r0
 8006dd8:	4637      	mov	r7, r6
 8006dda:	dc04      	bgt.n	8006de6 <__swbuf_r+0x42>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f93c 	bl	800705c <_fflush_r>
 8006de4:	bb30      	cbnz	r0, 8006e34 <__swbuf_r+0x90>
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	701e      	strb	r6, [r3, #0]
 8006df4:	6963      	ldr	r3, [r4, #20]
 8006df6:	3001      	adds	r0, #1
 8006df8:	4283      	cmp	r3, r0
 8006dfa:	d004      	beq.n	8006e06 <__swbuf_r+0x62>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	07db      	lsls	r3, r3, #31
 8006e00:	d506      	bpl.n	8006e10 <__swbuf_r+0x6c>
 8006e02:	2e0a      	cmp	r6, #10
 8006e04:	d104      	bne.n	8006e10 <__swbuf_r+0x6c>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 f927 	bl	800705c <_fflush_r>
 8006e0e:	b988      	cbnz	r0, 8006e34 <__swbuf_r+0x90>
 8006e10:	4638      	mov	r0, r7
 8006e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <__swbuf_r+0x9c>)
 8006e16:	429c      	cmp	r4, r3
 8006e18:	d101      	bne.n	8006e1e <__swbuf_r+0x7a>
 8006e1a:	68ac      	ldr	r4, [r5, #8]
 8006e1c:	e7cf      	b.n	8006dbe <__swbuf_r+0x1a>
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <__swbuf_r+0xa0>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	bf08      	it	eq
 8006e24:	68ec      	ldreq	r4, [r5, #12]
 8006e26:	e7ca      	b.n	8006dbe <__swbuf_r+0x1a>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f81a 	bl	8006e64 <__swsetup_r>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d0cb      	beq.n	8006dcc <__swbuf_r+0x28>
 8006e34:	f04f 37ff 	mov.w	r7, #4294967295
 8006e38:	e7ea      	b.n	8006e10 <__swbuf_r+0x6c>
 8006e3a:	bf00      	nop
 8006e3c:	08007974 	.word	0x08007974
 8006e40:	08007994 	.word	0x08007994
 8006e44:	08007954 	.word	0x08007954

08006e48 <__ascii_wctomb>:
 8006e48:	4603      	mov	r3, r0
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	b141      	cbz	r1, 8006e60 <__ascii_wctomb+0x18>
 8006e4e:	2aff      	cmp	r2, #255	; 0xff
 8006e50:	d904      	bls.n	8006e5c <__ascii_wctomb+0x14>
 8006e52:	228a      	movs	r2, #138	; 0x8a
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5a:	4770      	bx	lr
 8006e5c:	700a      	strb	r2, [r1, #0]
 8006e5e:	2001      	movs	r0, #1
 8006e60:	4770      	bx	lr
	...

08006e64 <__swsetup_r>:
 8006e64:	4b32      	ldr	r3, [pc, #200]	; (8006f30 <__swsetup_r+0xcc>)
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	b125      	cbz	r5, 8006e7a <__swsetup_r+0x16>
 8006e70:	69ab      	ldr	r3, [r5, #24]
 8006e72:	b913      	cbnz	r3, 8006e7a <__swsetup_r+0x16>
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f985 	bl	8007184 <__sinit>
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <__swsetup_r+0xd0>)
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	d10f      	bne.n	8006ea0 <__swsetup_r+0x3c>
 8006e80:	686c      	ldr	r4, [r5, #4]
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e88:	0719      	lsls	r1, r3, #28
 8006e8a:	d42c      	bmi.n	8006ee6 <__swsetup_r+0x82>
 8006e8c:	06dd      	lsls	r5, r3, #27
 8006e8e:	d411      	bmi.n	8006eb4 <__swsetup_r+0x50>
 8006e90:	2309      	movs	r3, #9
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	e03e      	b.n	8006f1e <__swsetup_r+0xba>
 8006ea0:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <__swsetup_r+0xd4>)
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	d101      	bne.n	8006eaa <__swsetup_r+0x46>
 8006ea6:	68ac      	ldr	r4, [r5, #8]
 8006ea8:	e7eb      	b.n	8006e82 <__swsetup_r+0x1e>
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <__swsetup_r+0xd8>)
 8006eac:	429c      	cmp	r4, r3
 8006eae:	bf08      	it	eq
 8006eb0:	68ec      	ldreq	r4, [r5, #12]
 8006eb2:	e7e6      	b.n	8006e82 <__swsetup_r+0x1e>
 8006eb4:	0758      	lsls	r0, r3, #29
 8006eb6:	d512      	bpl.n	8006ede <__swsetup_r+0x7a>
 8006eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eba:	b141      	cbz	r1, 8006ece <__swsetup_r+0x6a>
 8006ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	d002      	beq.n	8006eca <__swsetup_r+0x66>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff fb73 	bl	80065b0 <_free_r>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0308 	orr.w	r3, r3, #8
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	b94b      	cbnz	r3, 8006efe <__swsetup_r+0x9a>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef4:	d003      	beq.n	8006efe <__swsetup_r+0x9a>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 fa07 	bl	800730c <__smakebuf_r>
 8006efe:	89a0      	ldrh	r0, [r4, #12]
 8006f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f04:	f010 0301 	ands.w	r3, r0, #1
 8006f08:	d00a      	beq.n	8006f20 <__swsetup_r+0xbc>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60a3      	str	r3, [r4, #8]
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	425b      	negs	r3, r3
 8006f12:	61a3      	str	r3, [r4, #24]
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	b943      	cbnz	r3, 8006f2a <__swsetup_r+0xc6>
 8006f18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f1c:	d1ba      	bne.n	8006e94 <__swsetup_r+0x30>
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	0781      	lsls	r1, r0, #30
 8006f22:	bf58      	it	pl
 8006f24:	6963      	ldrpl	r3, [r4, #20]
 8006f26:	60a3      	str	r3, [r4, #8]
 8006f28:	e7f4      	b.n	8006f14 <__swsetup_r+0xb0>
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	e7f7      	b.n	8006f1e <__swsetup_r+0xba>
 8006f2e:	bf00      	nop
 8006f30:	2000000c 	.word	0x2000000c
 8006f34:	08007974 	.word	0x08007974
 8006f38:	08007994 	.word	0x08007994
 8006f3c:	08007954 	.word	0x08007954

08006f40 <abort>:
 8006f40:	b508      	push	{r3, lr}
 8006f42:	2006      	movs	r0, #6
 8006f44:	f000 fa52 	bl	80073ec <raise>
 8006f48:	2001      	movs	r0, #1
 8006f4a:	f7fb f8d1 	bl	80020f0 <_exit>
	...

08006f50 <__sflush_r>:
 8006f50:	898a      	ldrh	r2, [r1, #12]
 8006f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	4605      	mov	r5, r0
 8006f58:	0710      	lsls	r0, r2, #28
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	d458      	bmi.n	8007010 <__sflush_r+0xc0>
 8006f5e:	684b      	ldr	r3, [r1, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dc05      	bgt.n	8006f70 <__sflush_r+0x20>
 8006f64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dc02      	bgt.n	8006f70 <__sflush_r+0x20>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0f9      	beq.n	8006f6a <__sflush_r+0x1a>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f7c:	682f      	ldr	r7, [r5, #0]
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	d032      	beq.n	8006fe8 <__sflush_r+0x98>
 8006f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	075a      	lsls	r2, r3, #29
 8006f88:	d505      	bpl.n	8006f96 <__sflush_r+0x46>
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	1ac0      	subs	r0, r0, r3
 8006f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f90:	b10b      	cbz	r3, 8006f96 <__sflush_r+0x46>
 8006f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b0      	blx	r6
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	d106      	bne.n	8006fb6 <__sflush_r+0x66>
 8006fa8:	6829      	ldr	r1, [r5, #0]
 8006faa:	291d      	cmp	r1, #29
 8006fac:	d82c      	bhi.n	8007008 <__sflush_r+0xb8>
 8006fae:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <__sflush_r+0x108>)
 8006fb0:	40ca      	lsrs	r2, r1
 8006fb2:	07d6      	lsls	r6, r2, #31
 8006fb4:	d528      	bpl.n	8007008 <__sflush_r+0xb8>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6062      	str	r2, [r4, #4]
 8006fba:	04d9      	lsls	r1, r3, #19
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	d504      	bpl.n	8006fcc <__sflush_r+0x7c>
 8006fc2:	1c42      	adds	r2, r0, #1
 8006fc4:	d101      	bne.n	8006fca <__sflush_r+0x7a>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	b903      	cbnz	r3, 8006fcc <__sflush_r+0x7c>
 8006fca:	6560      	str	r0, [r4, #84]	; 0x54
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	602f      	str	r7, [r5, #0]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	d0ca      	beq.n	8006f6a <__sflush_r+0x1a>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__sflush_r+0x92>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f7ff fae7 	bl	80065b0 <_free_r>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8006fe6:	e7c1      	b.n	8006f6c <__sflush_r+0x1c>
 8006fe8:	6a21      	ldr	r1, [r4, #32]
 8006fea:	2301      	movs	r3, #1
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	1c41      	adds	r1, r0, #1
 8006ff2:	d1c7      	bne.n	8006f84 <__sflush_r+0x34>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c4      	beq.n	8006f84 <__sflush_r+0x34>
 8006ffa:	2b1d      	cmp	r3, #29
 8006ffc:	d001      	beq.n	8007002 <__sflush_r+0xb2>
 8006ffe:	2b16      	cmp	r3, #22
 8007000:	d101      	bne.n	8007006 <__sflush_r+0xb6>
 8007002:	602f      	str	r7, [r5, #0]
 8007004:	e7b1      	b.n	8006f6a <__sflush_r+0x1a>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7ad      	b.n	8006f6c <__sflush_r+0x1c>
 8007010:	690f      	ldr	r7, [r1, #16]
 8007012:	2f00      	cmp	r7, #0
 8007014:	d0a9      	beq.n	8006f6a <__sflush_r+0x1a>
 8007016:	0793      	lsls	r3, r2, #30
 8007018:	680e      	ldr	r6, [r1, #0]
 800701a:	bf08      	it	eq
 800701c:	694b      	ldreq	r3, [r1, #20]
 800701e:	600f      	str	r7, [r1, #0]
 8007020:	bf18      	it	ne
 8007022:	2300      	movne	r3, #0
 8007024:	eba6 0807 	sub.w	r8, r6, r7
 8007028:	608b      	str	r3, [r1, #8]
 800702a:	f1b8 0f00 	cmp.w	r8, #0
 800702e:	dd9c      	ble.n	8006f6a <__sflush_r+0x1a>
 8007030:	6a21      	ldr	r1, [r4, #32]
 8007032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007034:	4643      	mov	r3, r8
 8007036:	463a      	mov	r2, r7
 8007038:	4628      	mov	r0, r5
 800703a:	47b0      	blx	r6
 800703c:	2800      	cmp	r0, #0
 800703e:	dc06      	bgt.n	800704e <__sflush_r+0xfe>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e78e      	b.n	8006f6c <__sflush_r+0x1c>
 800704e:	4407      	add	r7, r0
 8007050:	eba8 0800 	sub.w	r8, r8, r0
 8007054:	e7e9      	b.n	800702a <__sflush_r+0xda>
 8007056:	bf00      	nop
 8007058:	20400001 	.word	0x20400001

0800705c <_fflush_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	690b      	ldr	r3, [r1, #16]
 8007060:	4605      	mov	r5, r0
 8007062:	460c      	mov	r4, r1
 8007064:	b913      	cbnz	r3, 800706c <_fflush_r+0x10>
 8007066:	2500      	movs	r5, #0
 8007068:	4628      	mov	r0, r5
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	b118      	cbz	r0, 8007076 <_fflush_r+0x1a>
 800706e:	6983      	ldr	r3, [r0, #24]
 8007070:	b90b      	cbnz	r3, 8007076 <_fflush_r+0x1a>
 8007072:	f000 f887 	bl	8007184 <__sinit>
 8007076:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <_fflush_r+0x6c>)
 8007078:	429c      	cmp	r4, r3
 800707a:	d11b      	bne.n	80070b4 <_fflush_r+0x58>
 800707c:	686c      	ldr	r4, [r5, #4]
 800707e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0ef      	beq.n	8007066 <_fflush_r+0xa>
 8007086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007088:	07d0      	lsls	r0, r2, #31
 800708a:	d404      	bmi.n	8007096 <_fflush_r+0x3a>
 800708c:	0599      	lsls	r1, r3, #22
 800708e:	d402      	bmi.n	8007096 <_fflush_r+0x3a>
 8007090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007092:	f000 f915 	bl	80072c0 <__retarget_lock_acquire_recursive>
 8007096:	4628      	mov	r0, r5
 8007098:	4621      	mov	r1, r4
 800709a:	f7ff ff59 	bl	8006f50 <__sflush_r>
 800709e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a0:	07da      	lsls	r2, r3, #31
 80070a2:	4605      	mov	r5, r0
 80070a4:	d4e0      	bmi.n	8007068 <_fflush_r+0xc>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	059b      	lsls	r3, r3, #22
 80070aa:	d4dd      	bmi.n	8007068 <_fflush_r+0xc>
 80070ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ae:	f000 f908 	bl	80072c2 <__retarget_lock_release_recursive>
 80070b2:	e7d9      	b.n	8007068 <_fflush_r+0xc>
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <_fflush_r+0x70>)
 80070b6:	429c      	cmp	r4, r3
 80070b8:	d101      	bne.n	80070be <_fflush_r+0x62>
 80070ba:	68ac      	ldr	r4, [r5, #8]
 80070bc:	e7df      	b.n	800707e <_fflush_r+0x22>
 80070be:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <_fflush_r+0x74>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	bf08      	it	eq
 80070c4:	68ec      	ldreq	r4, [r5, #12]
 80070c6:	e7da      	b.n	800707e <_fflush_r+0x22>
 80070c8:	08007974 	.word	0x08007974
 80070cc:	08007994 	.word	0x08007994
 80070d0:	08007954 	.word	0x08007954

080070d4 <std>:
 80070d4:	2300      	movs	r3, #0
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4604      	mov	r4, r0
 80070da:	e9c0 3300 	strd	r3, r3, [r0]
 80070de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070e2:	6083      	str	r3, [r0, #8]
 80070e4:	8181      	strh	r1, [r0, #12]
 80070e6:	6643      	str	r3, [r0, #100]	; 0x64
 80070e8:	81c2      	strh	r2, [r0, #14]
 80070ea:	6183      	str	r3, [r0, #24]
 80070ec:	4619      	mov	r1, r3
 80070ee:	2208      	movs	r2, #8
 80070f0:	305c      	adds	r0, #92	; 0x5c
 80070f2:	f7fd fbb7 	bl	8004864 <memset>
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <std+0x38>)
 80070f8:	6263      	str	r3, [r4, #36]	; 0x24
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <std+0x3c>)
 80070fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <std+0x40>)
 8007100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <std+0x44>)
 8007104:	6224      	str	r4, [r4, #32]
 8007106:	6323      	str	r3, [r4, #48]	; 0x30
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop
 800710c:	08007425 	.word	0x08007425
 8007110:	08007447 	.word	0x08007447
 8007114:	0800747f 	.word	0x0800747f
 8007118:	080074a3 	.word	0x080074a3

0800711c <_cleanup_r>:
 800711c:	4901      	ldr	r1, [pc, #4]	; (8007124 <_cleanup_r+0x8>)
 800711e:	f000 b8af 	b.w	8007280 <_fwalk_reent>
 8007122:	bf00      	nop
 8007124:	0800705d 	.word	0x0800705d

08007128 <__sfmoreglue>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	1e4a      	subs	r2, r1, #1
 800712c:	2568      	movs	r5, #104	; 0x68
 800712e:	4355      	muls	r5, r2
 8007130:	460e      	mov	r6, r1
 8007132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007136:	f7ff fa89 	bl	800664c <_malloc_r>
 800713a:	4604      	mov	r4, r0
 800713c:	b140      	cbz	r0, 8007150 <__sfmoreglue+0x28>
 800713e:	2100      	movs	r1, #0
 8007140:	e9c0 1600 	strd	r1, r6, [r0]
 8007144:	300c      	adds	r0, #12
 8007146:	60a0      	str	r0, [r4, #8]
 8007148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800714c:	f7fd fb8a 	bl	8004864 <memset>
 8007150:	4620      	mov	r0, r4
 8007152:	bd70      	pop	{r4, r5, r6, pc}

08007154 <__sfp_lock_acquire>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__sfp_lock_acquire+0x8>)
 8007156:	f000 b8b3 	b.w	80072c0 <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	200002e0 	.word	0x200002e0

08007160 <__sfp_lock_release>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__sfp_lock_release+0x8>)
 8007162:	f000 b8ae 	b.w	80072c2 <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	200002e0 	.word	0x200002e0

0800716c <__sinit_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sinit_lock_acquire+0x8>)
 800716e:	f000 b8a7 	b.w	80072c0 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	200002db 	.word	0x200002db

08007178 <__sinit_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sinit_lock_release+0x8>)
 800717a:	f000 b8a2 	b.w	80072c2 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	200002db 	.word	0x200002db

08007184 <__sinit>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f7ff fff0 	bl	800716c <__sinit_lock_acquire>
 800718c:	69a3      	ldr	r3, [r4, #24]
 800718e:	b11b      	cbz	r3, 8007198 <__sinit+0x14>
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	f7ff bff0 	b.w	8007178 <__sinit_lock_release>
 8007198:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800719c:	6523      	str	r3, [r4, #80]	; 0x50
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <__sinit+0x68>)
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <__sinit+0x6c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	bf04      	itt	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	61a3      	streq	r3, [r4, #24]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f820 	bl	80071f4 <__sfp>
 80071b4:	6060      	str	r0, [r4, #4]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f81c 	bl	80071f4 <__sfp>
 80071bc:	60a0      	str	r0, [r4, #8]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f818 	bl	80071f4 <__sfp>
 80071c4:	2200      	movs	r2, #0
 80071c6:	60e0      	str	r0, [r4, #12]
 80071c8:	2104      	movs	r1, #4
 80071ca:	6860      	ldr	r0, [r4, #4]
 80071cc:	f7ff ff82 	bl	80070d4 <std>
 80071d0:	68a0      	ldr	r0, [r4, #8]
 80071d2:	2201      	movs	r2, #1
 80071d4:	2109      	movs	r1, #9
 80071d6:	f7ff ff7d 	bl	80070d4 <std>
 80071da:	68e0      	ldr	r0, [r4, #12]
 80071dc:	2202      	movs	r2, #2
 80071de:	2112      	movs	r1, #18
 80071e0:	f7ff ff78 	bl	80070d4 <std>
 80071e4:	2301      	movs	r3, #1
 80071e6:	61a3      	str	r3, [r4, #24]
 80071e8:	e7d2      	b.n	8007190 <__sinit+0xc>
 80071ea:	bf00      	nop
 80071ec:	080075d4 	.word	0x080075d4
 80071f0:	0800711d 	.word	0x0800711d

080071f4 <__sfp>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	4607      	mov	r7, r0
 80071f8:	f7ff ffac 	bl	8007154 <__sfp_lock_acquire>
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <__sfp+0x84>)
 80071fe:	681e      	ldr	r6, [r3, #0]
 8007200:	69b3      	ldr	r3, [r6, #24]
 8007202:	b913      	cbnz	r3, 800720a <__sfp+0x16>
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ffbd 	bl	8007184 <__sinit>
 800720a:	3648      	adds	r6, #72	; 0x48
 800720c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007210:	3b01      	subs	r3, #1
 8007212:	d503      	bpl.n	800721c <__sfp+0x28>
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	b30b      	cbz	r3, 800725c <__sfp+0x68>
 8007218:	6836      	ldr	r6, [r6, #0]
 800721a:	e7f7      	b.n	800720c <__sfp+0x18>
 800721c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007220:	b9d5      	cbnz	r5, 8007258 <__sfp+0x64>
 8007222:	4b16      	ldr	r3, [pc, #88]	; (800727c <__sfp+0x88>)
 8007224:	60e3      	str	r3, [r4, #12]
 8007226:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800722a:	6665      	str	r5, [r4, #100]	; 0x64
 800722c:	f000 f847 	bl	80072be <__retarget_lock_init_recursive>
 8007230:	f7ff ff96 	bl	8007160 <__sfp_lock_release>
 8007234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800723c:	6025      	str	r5, [r4, #0]
 800723e:	61a5      	str	r5, [r4, #24]
 8007240:	2208      	movs	r2, #8
 8007242:	4629      	mov	r1, r5
 8007244:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007248:	f7fd fb0c 	bl	8004864 <memset>
 800724c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007250:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007254:	4620      	mov	r0, r4
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	3468      	adds	r4, #104	; 0x68
 800725a:	e7d9      	b.n	8007210 <__sfp+0x1c>
 800725c:	2104      	movs	r1, #4
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff ff62 	bl	8007128 <__sfmoreglue>
 8007264:	4604      	mov	r4, r0
 8007266:	6030      	str	r0, [r6, #0]
 8007268:	2800      	cmp	r0, #0
 800726a:	d1d5      	bne.n	8007218 <__sfp+0x24>
 800726c:	f7ff ff78 	bl	8007160 <__sfp_lock_release>
 8007270:	230c      	movs	r3, #12
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	e7ee      	b.n	8007254 <__sfp+0x60>
 8007276:	bf00      	nop
 8007278:	080075d4 	.word	0x080075d4
 800727c:	ffff0001 	.word	0xffff0001

08007280 <_fwalk_reent>:
 8007280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007284:	4606      	mov	r6, r0
 8007286:	4688      	mov	r8, r1
 8007288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800728c:	2700      	movs	r7, #0
 800728e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007292:	f1b9 0901 	subs.w	r9, r9, #1
 8007296:	d505      	bpl.n	80072a4 <_fwalk_reent+0x24>
 8007298:	6824      	ldr	r4, [r4, #0]
 800729a:	2c00      	cmp	r4, #0
 800729c:	d1f7      	bne.n	800728e <_fwalk_reent+0xe>
 800729e:	4638      	mov	r0, r7
 80072a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a4:	89ab      	ldrh	r3, [r5, #12]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d907      	bls.n	80072ba <_fwalk_reent+0x3a>
 80072aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072ae:	3301      	adds	r3, #1
 80072b0:	d003      	beq.n	80072ba <_fwalk_reent+0x3a>
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
 80072b6:	47c0      	blx	r8
 80072b8:	4307      	orrs	r7, r0
 80072ba:	3568      	adds	r5, #104	; 0x68
 80072bc:	e7e9      	b.n	8007292 <_fwalk_reent+0x12>

080072be <__retarget_lock_init_recursive>:
 80072be:	4770      	bx	lr

080072c0 <__retarget_lock_acquire_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <__retarget_lock_release_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <__swhatbuf_r>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	460e      	mov	r6, r1
 80072c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072cc:	2900      	cmp	r1, #0
 80072ce:	b096      	sub	sp, #88	; 0x58
 80072d0:	4614      	mov	r4, r2
 80072d2:	461d      	mov	r5, r3
 80072d4:	da07      	bge.n	80072e6 <__swhatbuf_r+0x22>
 80072d6:	2300      	movs	r3, #0
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	89b3      	ldrh	r3, [r6, #12]
 80072dc:	061a      	lsls	r2, r3, #24
 80072de:	d410      	bmi.n	8007302 <__swhatbuf_r+0x3e>
 80072e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e4:	e00e      	b.n	8007304 <__swhatbuf_r+0x40>
 80072e6:	466a      	mov	r2, sp
 80072e8:	f000 f902 	bl	80074f0 <_fstat_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	dbf2      	blt.n	80072d6 <__swhatbuf_r+0x12>
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072fa:	425a      	negs	r2, r3
 80072fc:	415a      	adcs	r2, r3
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	e7ee      	b.n	80072e0 <__swhatbuf_r+0x1c>
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	2000      	movs	r0, #0
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	b016      	add	sp, #88	; 0x58
 800730a:	bd70      	pop	{r4, r5, r6, pc}

0800730c <__smakebuf_r>:
 800730c:	898b      	ldrh	r3, [r1, #12]
 800730e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007310:	079d      	lsls	r5, r3, #30
 8007312:	4606      	mov	r6, r0
 8007314:	460c      	mov	r4, r1
 8007316:	d507      	bpl.n	8007328 <__smakebuf_r+0x1c>
 8007318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	2301      	movs	r3, #1
 8007322:	6163      	str	r3, [r4, #20]
 8007324:	b002      	add	sp, #8
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	ab01      	add	r3, sp, #4
 800732a:	466a      	mov	r2, sp
 800732c:	f7ff ffca 	bl	80072c4 <__swhatbuf_r>
 8007330:	9900      	ldr	r1, [sp, #0]
 8007332:	4605      	mov	r5, r0
 8007334:	4630      	mov	r0, r6
 8007336:	f7ff f989 	bl	800664c <_malloc_r>
 800733a:	b948      	cbnz	r0, 8007350 <__smakebuf_r+0x44>
 800733c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007340:	059a      	lsls	r2, r3, #22
 8007342:	d4ef      	bmi.n	8007324 <__smakebuf_r+0x18>
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	f043 0302 	orr.w	r3, r3, #2
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	e7e3      	b.n	8007318 <__smakebuf_r+0xc>
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <__smakebuf_r+0x7c>)
 8007352:	62b3      	str	r3, [r6, #40]	; 0x28
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	6163      	str	r3, [r4, #20]
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	6120      	str	r0, [r4, #16]
 8007366:	b15b      	cbz	r3, 8007380 <__smakebuf_r+0x74>
 8007368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736c:	4630      	mov	r0, r6
 800736e:	f000 f8d1 	bl	8007514 <_isatty_r>
 8007372:	b128      	cbz	r0, 8007380 <__smakebuf_r+0x74>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	89a0      	ldrh	r0, [r4, #12]
 8007382:	4305      	orrs	r5, r0
 8007384:	81a5      	strh	r5, [r4, #12]
 8007386:	e7cd      	b.n	8007324 <__smakebuf_r+0x18>
 8007388:	0800711d 	.word	0x0800711d

0800738c <_malloc_usable_size_r>:
 800738c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007390:	1f18      	subs	r0, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfbc      	itt	lt
 8007396:	580b      	ldrlt	r3, [r1, r0]
 8007398:	18c0      	addlt	r0, r0, r3
 800739a:	4770      	bx	lr

0800739c <_raise_r>:
 800739c:	291f      	cmp	r1, #31
 800739e:	b538      	push	{r3, r4, r5, lr}
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	d904      	bls.n	80073b0 <_raise_r+0x14>
 80073a6:	2316      	movs	r3, #22
 80073a8:	6003      	str	r3, [r0, #0]
 80073aa:	f04f 30ff 	mov.w	r0, #4294967295
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b2:	b112      	cbz	r2, 80073ba <_raise_r+0x1e>
 80073b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073b8:	b94b      	cbnz	r3, 80073ce <_raise_r+0x32>
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f830 	bl	8007420 <_getpid_r>
 80073c0:	462a      	mov	r2, r5
 80073c2:	4601      	mov	r1, r0
 80073c4:	4620      	mov	r0, r4
 80073c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ca:	f000 b817 	b.w	80073fc <_kill_r>
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d00a      	beq.n	80073e8 <_raise_r+0x4c>
 80073d2:	1c59      	adds	r1, r3, #1
 80073d4:	d103      	bne.n	80073de <_raise_r+0x42>
 80073d6:	2316      	movs	r3, #22
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	2001      	movs	r0, #1
 80073dc:	e7e7      	b.n	80073ae <_raise_r+0x12>
 80073de:	2400      	movs	r4, #0
 80073e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073e4:	4628      	mov	r0, r5
 80073e6:	4798      	blx	r3
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7e0      	b.n	80073ae <_raise_r+0x12>

080073ec <raise>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <raise+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f7ff bfd3 	b.w	800739c <_raise_r>
 80073f6:	bf00      	nop
 80073f8:	2000000c 	.word	0x2000000c

080073fc <_kill_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	; (800741c <_kill_r+0x20>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f7fa fe61 	bl	80020d0 <_kill>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d102      	bne.n	8007418 <_kill_r+0x1c>
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	b103      	cbz	r3, 8007418 <_kill_r+0x1c>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	200002d4 	.word	0x200002d4

08007420 <_getpid_r>:
 8007420:	f7fa be4f 	b.w	80020c2 <_getpid>

08007424 <__sread>:
 8007424:	b510      	push	{r4, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742c:	f000 f894 	bl	8007558 <_read_r>
 8007430:	2800      	cmp	r0, #0
 8007432:	bfab      	itete	ge
 8007434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007436:	89a3      	ldrhlt	r3, [r4, #12]
 8007438:	181b      	addge	r3, r3, r0
 800743a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800743e:	bfac      	ite	ge
 8007440:	6563      	strge	r3, [r4, #84]	; 0x54
 8007442:	81a3      	strhlt	r3, [r4, #12]
 8007444:	bd10      	pop	{r4, pc}

08007446 <__swrite>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	461f      	mov	r7, r3
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	05db      	lsls	r3, r3, #23
 8007450:	4605      	mov	r5, r0
 8007452:	460c      	mov	r4, r1
 8007454:	4616      	mov	r6, r2
 8007456:	d505      	bpl.n	8007464 <__swrite+0x1e>
 8007458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745c:	2302      	movs	r3, #2
 800745e:	2200      	movs	r2, #0
 8007460:	f000 f868 	bl	8007534 <_lseek_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746e:	81a3      	strh	r3, [r4, #12]
 8007470:	4632      	mov	r2, r6
 8007472:	463b      	mov	r3, r7
 8007474:	4628      	mov	r0, r5
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 b817 	b.w	80074ac <_write_r>

0800747e <__sseek>:
 800747e:	b510      	push	{r4, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 f855 	bl	8007534 <_lseek_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	bf15      	itete	ne
 8007490:	6560      	strne	r0, [r4, #84]	; 0x54
 8007492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749a:	81a3      	strheq	r3, [r4, #12]
 800749c:	bf18      	it	ne
 800749e:	81a3      	strhne	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__sclose>:
 80074a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a6:	f000 b813 	b.w	80074d0 <_close_r>
	...

080074ac <_write_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d07      	ldr	r5, [pc, #28]	; (80074cc <_write_r+0x20>)
 80074b0:	4604      	mov	r4, r0
 80074b2:	4608      	mov	r0, r1
 80074b4:	4611      	mov	r1, r2
 80074b6:	2200      	movs	r2, #0
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f7fa fe3f 	bl	800213e <_write>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_write_r+0x1e>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_write_r+0x1e>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	200002d4 	.word	0x200002d4

080074d0 <_close_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d06      	ldr	r5, [pc, #24]	; (80074ec <_close_r+0x1c>)
 80074d4:	2300      	movs	r3, #0
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	f7fa fe4b 	bl	8002176 <_close>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_close_r+0x1a>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_close_r+0x1a>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200002d4 	.word	0x200002d4

080074f0 <_fstat_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d07      	ldr	r5, [pc, #28]	; (8007510 <_fstat_r+0x20>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f7fa fe45 	bl	800218c <_fstat>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d102      	bne.n	800750c <_fstat_r+0x1c>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b103      	cbz	r3, 800750c <_fstat_r+0x1c>
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	200002d4 	.word	0x200002d4

08007514 <_isatty_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_isatty_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7fa fe43 	bl	80021aa <_isatty>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_isatty_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_isatty_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	200002d4 	.word	0x200002d4

08007534 <_lseek_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_lseek_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fa fe3b 	bl	80021be <_lseek>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_lseek_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_lseek_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	200002d4 	.word	0x200002d4

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_read_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fa fdcc 	bl	8002104 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	200002d4 	.word	0x200002d4

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
